// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestToInternet.proto

#ifndef PROTOBUF_TestToInternet_2eproto__INCLUDED
#define PROTOBUF_TestToInternet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Testtointernet {
class chanelpara;
class chanelparaDefaultTypeInternal;
extern chanelparaDefaultTypeInternal _chanelpara_default_instance_;
class item;
class itemDefaultTypeInternal;
extern itemDefaultTypeInternal _item_default_instance_;
class temperature;
class temperatureDefaultTypeInternal;
extern temperatureDefaultTypeInternal _temperature_default_instance_;
}  // namespace Testtointernet

namespace Testtointernet {

namespace protobuf_TestToInternet_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_TestToInternet_2eproto

enum para_type {
  testOff = 0,
  manual_type = 1,
  state_type = 2,
  differ_type = 3,
  distance_type = 4,
  para_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  para_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool para_type_IsValid(int value);
const para_type para_type_MIN = testOff;
const para_type para_type_MAX = distance_type;
const int para_type_ARRAYSIZE = para_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* para_type_descriptor();
inline const ::std::string& para_type_Name(para_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    para_type_descriptor(), value);
}
inline bool para_type_Parse(
    const ::std::string& name, para_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<para_type>(
    para_type_descriptor(), name, value);
}
// ===================================================================

class chanelpara : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Testtointernet.chanelpara) */ {
 public:
  chanelpara();
  virtual ~chanelpara();

  chanelpara(const chanelpara& from);

  inline chanelpara& operator=(const chanelpara& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chanelpara& default_instance();

  static inline const chanelpara* internal_default_instance() {
    return reinterpret_cast<const chanelpara*>(
               &_chanelpara_default_instance_);
  }

  void Swap(chanelpara* other);

  // implements Message ----------------------------------------------

  inline chanelpara* New() const PROTOBUF_FINAL { return New(NULL); }

  chanelpara* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const chanelpara& from);
  void MergeFrom(const chanelpara& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(chanelpara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float famptitude = 1;
  void clear_famptitude();
  static const int kFamptitudeFieldNumber = 1;
  float famptitude() const;
  void set_famptitude(float value);

  // float fphase = 2;
  void clear_fphase();
  static const int kFphaseFieldNumber = 2;
  float fphase() const;
  void set_fphase(float value);

  // float ffre = 3;
  void clear_ffre();
  static const int kFfreFieldNumber = 3;
  float ffre() const;
  void set_ffre(float value);

  // @@protoc_insertion_point(class_scope:Testtointernet.chanelpara)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float famptitude_;
  float fphase_;
  float ffre_;
  mutable int _cached_size_;
  friend struct protobuf_TestToInternet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class temperature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Testtointernet.temperature) */ {
 public:
  temperature();
  virtual ~temperature();

  temperature(const temperature& from);

  inline temperature& operator=(const temperature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const temperature& default_instance();

  static inline const temperature* internal_default_instance() {
    return reinterpret_cast<const temperature*>(
               &_temperature_default_instance_);
  }

  void Swap(temperature* other);

  // implements Message ----------------------------------------------

  inline temperature* New() const PROTOBUF_FINAL { return New(NULL); }

  temperature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const temperature& from);
  void MergeFrom(const temperature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(temperature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:Testtointernet.temperature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  mutable int _cached_size_;
  friend struct protobuf_TestToInternet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Testtointernet.item) */ {
 public:
  item();
  virtual ~item();

  item(const item& from);

  inline item& operator=(const item& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item& default_instance();

  static inline const item* internal_default_instance() {
    return reinterpret_cast<const item*>(
               &_item_default_instance_);
  }

  void Swap(item* other);

  // implements Message ----------------------------------------------

  inline item* New() const PROTOBUF_FINAL { return New(NULL); }

  item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const item& from);
  void MergeFrom(const item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Testtointernet.chanelpara analogcurrentchanelvalue = 2;
  int analogcurrentchanelvalue_size() const;
  void clear_analogcurrentchanelvalue();
  static const int kAnalogcurrentchanelvalueFieldNumber = 2;
  const ::Testtointernet::chanelpara& analogcurrentchanelvalue(int index) const;
  ::Testtointernet::chanelpara* mutable_analogcurrentchanelvalue(int index);
  ::Testtointernet::chanelpara* add_analogcurrentchanelvalue();
  ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >*
      mutable_analogcurrentchanelvalue();
  const ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >&
      analogcurrentchanelvalue() const;

  // repeated .Testtointernet.chanelpara analogvoltchangelvalue = 3;
  int analogvoltchangelvalue_size() const;
  void clear_analogvoltchangelvalue();
  static const int kAnalogvoltchangelvalueFieldNumber = 3;
  const ::Testtointernet::chanelpara& analogvoltchangelvalue(int index) const;
  ::Testtointernet::chanelpara* mutable_analogvoltchangelvalue(int index);
  ::Testtointernet::chanelpara* add_analogvoltchangelvalue();
  ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >*
      mutable_analogvoltchangelvalue();
  const ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >&
      analogvoltchangelvalue() const;

  // repeated .Testtointernet.temperature temperaturevalue = 4;
  int temperaturevalue_size() const;
  void clear_temperaturevalue();
  static const int kTemperaturevalueFieldNumber = 4;
  const ::Testtointernet::temperature& temperaturevalue(int index) const;
  ::Testtointernet::temperature* mutable_temperaturevalue(int index);
  ::Testtointernet::temperature* add_temperaturevalue();
  ::google::protobuf::RepeatedPtrField< ::Testtointernet::temperature >*
      mutable_temperaturevalue();
  const ::google::protobuf::RepeatedPtrField< ::Testtointernet::temperature >&
      temperaturevalue() const;

  // .Testtointernet.para_type testtype = 1;
  void clear_testtype();
  static const int kTesttypeFieldNumber = 1;
  ::Testtointernet::para_type testtype() const;
  void set_testtype(::Testtointernet::para_type value);

  // uint32 ibinstate = 5;
  void clear_ibinstate();
  static const int kIbinstateFieldNumber = 5;
  ::google::protobuf::uint32 ibinstate() const;
  void set_ibinstate(::google::protobuf::uint32 value);

  // uint32 nTimepart1 = 6;
  void clear_ntimepart1();
  static const int kNTimepart1FieldNumber = 6;
  ::google::protobuf::uint32 ntimepart1() const;
  void set_ntimepart1(::google::protobuf::uint32 value);

  // uint32 nTimepart2 = 7;
  void clear_ntimepart2();
  static const int kNTimepart2FieldNumber = 7;
  ::google::protobuf::uint32 ntimepart2() const;
  void set_ntimepart2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Testtointernet.item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara > analogcurrentchanelvalue_;
  ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara > analogvoltchangelvalue_;
  ::google::protobuf::RepeatedPtrField< ::Testtointernet::temperature > temperaturevalue_;
  int testtype_;
  ::google::protobuf::uint32 ibinstate_;
  ::google::protobuf::uint32 ntimepart1_;
  ::google::protobuf::uint32 ntimepart2_;
  mutable int _cached_size_;
  friend struct protobuf_TestToInternet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// chanelpara

// float famptitude = 1;
inline void chanelpara::clear_famptitude() {
  famptitude_ = 0;
}
inline float chanelpara::famptitude() const {
  // @@protoc_insertion_point(field_get:Testtointernet.chanelpara.famptitude)
  return famptitude_;
}
inline void chanelpara::set_famptitude(float value) {
  
  famptitude_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.chanelpara.famptitude)
}

// float fphase = 2;
inline void chanelpara::clear_fphase() {
  fphase_ = 0;
}
inline float chanelpara::fphase() const {
  // @@protoc_insertion_point(field_get:Testtointernet.chanelpara.fphase)
  return fphase_;
}
inline void chanelpara::set_fphase(float value) {
  
  fphase_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.chanelpara.fphase)
}

// float ffre = 3;
inline void chanelpara::clear_ffre() {
  ffre_ = 0;
}
inline float chanelpara::ffre() const {
  // @@protoc_insertion_point(field_get:Testtointernet.chanelpara.ffre)
  return ffre_;
}
inline void chanelpara::set_ffre(float value) {
  
  ffre_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.chanelpara.ffre)
}

// -------------------------------------------------------------------

// temperature

// float value = 1;
inline void temperature::clear_value() {
  value_ = 0;
}
inline float temperature::value() const {
  // @@protoc_insertion_point(field_get:Testtointernet.temperature.value)
  return value_;
}
inline void temperature::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.temperature.value)
}

// -------------------------------------------------------------------

// item

// .Testtointernet.para_type testtype = 1;
inline void item::clear_testtype() {
  testtype_ = 0;
}
inline ::Testtointernet::para_type item::testtype() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.testtype)
  return static_cast< ::Testtointernet::para_type >(testtype_);
}
inline void item::set_testtype(::Testtointernet::para_type value) {
  
  testtype_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.testtype)
}

// repeated .Testtointernet.chanelpara analogcurrentchanelvalue = 2;
inline int item::analogcurrentchanelvalue_size() const {
  return analogcurrentchanelvalue_.size();
}
inline void item::clear_analogcurrentchanelvalue() {
  analogcurrentchanelvalue_.Clear();
}
inline const ::Testtointernet::chanelpara& item::analogcurrentchanelvalue(int index) const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_.Get(index);
}
inline ::Testtointernet::chanelpara* item::mutable_analogcurrentchanelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_.Mutable(index);
}
inline ::Testtointernet::chanelpara* item::add_analogcurrentchanelvalue() {
  // @@protoc_insertion_point(field_add:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >*
item::mutable_analogcurrentchanelvalue() {
  // @@protoc_insertion_point(field_mutable_list:Testtointernet.item.analogcurrentchanelvalue)
  return &analogcurrentchanelvalue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >&
item::analogcurrentchanelvalue() const {
  // @@protoc_insertion_point(field_list:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_;
}

// repeated .Testtointernet.chanelpara analogvoltchangelvalue = 3;
inline int item::analogvoltchangelvalue_size() const {
  return analogvoltchangelvalue_.size();
}
inline void item::clear_analogvoltchangelvalue() {
  analogvoltchangelvalue_.Clear();
}
inline const ::Testtointernet::chanelpara& item::analogvoltchangelvalue(int index) const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_.Get(index);
}
inline ::Testtointernet::chanelpara* item::mutable_analogvoltchangelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_.Mutable(index);
}
inline ::Testtointernet::chanelpara* item::add_analogvoltchangelvalue() {
  // @@protoc_insertion_point(field_add:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >*
item::mutable_analogvoltchangelvalue() {
  // @@protoc_insertion_point(field_mutable_list:Testtointernet.item.analogvoltchangelvalue)
  return &analogvoltchangelvalue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >&
item::analogvoltchangelvalue() const {
  // @@protoc_insertion_point(field_list:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_;
}

// repeated .Testtointernet.temperature temperaturevalue = 4;
inline int item::temperaturevalue_size() const {
  return temperaturevalue_.size();
}
inline void item::clear_temperaturevalue() {
  temperaturevalue_.Clear();
}
inline const ::Testtointernet::temperature& item::temperaturevalue(int index) const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.temperaturevalue)
  return temperaturevalue_.Get(index);
}
inline ::Testtointernet::temperature* item::mutable_temperaturevalue(int index) {
  // @@protoc_insertion_point(field_mutable:Testtointernet.item.temperaturevalue)
  return temperaturevalue_.Mutable(index);
}
inline ::Testtointernet::temperature* item::add_temperaturevalue() {
  // @@protoc_insertion_point(field_add:Testtointernet.item.temperaturevalue)
  return temperaturevalue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Testtointernet::temperature >*
item::mutable_temperaturevalue() {
  // @@protoc_insertion_point(field_mutable_list:Testtointernet.item.temperaturevalue)
  return &temperaturevalue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Testtointernet::temperature >&
item::temperaturevalue() const {
  // @@protoc_insertion_point(field_list:Testtointernet.item.temperaturevalue)
  return temperaturevalue_;
}

// uint32 ibinstate = 5;
inline void item::clear_ibinstate() {
  ibinstate_ = 0u;
}
inline ::google::protobuf::uint32 item::ibinstate() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.ibinstate)
  return ibinstate_;
}
inline void item::set_ibinstate(::google::protobuf::uint32 value) {
  
  ibinstate_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.ibinstate)
}

// uint32 nTimepart1 = 6;
inline void item::clear_ntimepart1() {
  ntimepart1_ = 0u;
}
inline ::google::protobuf::uint32 item::ntimepart1() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.nTimepart1)
  return ntimepart1_;
}
inline void item::set_ntimepart1(::google::protobuf::uint32 value) {
  
  ntimepart1_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.nTimepart1)
}

// uint32 nTimepart2 = 7;
inline void item::clear_ntimepart2() {
  ntimepart2_ = 0u;
}
inline ::google::protobuf::uint32 item::ntimepart2() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.nTimepart2)
  return ntimepart2_;
}
inline void item::set_ntimepart2(::google::protobuf::uint32 value) {
  
  ntimepart2_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.nTimepart2)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Testtointernet

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Testtointernet::para_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Testtointernet::para_type>() {
  return ::Testtointernet::para_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestToInternet_2eproto__INCLUDED
