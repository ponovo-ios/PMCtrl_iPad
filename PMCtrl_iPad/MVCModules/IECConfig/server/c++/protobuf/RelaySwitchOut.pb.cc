// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RelaySwitchOut.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RelaySwitchOut.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RelaySwitchOut {
class TRIPMAPDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TRIPMAP> {
} _TRIPMAP_default_instance_;
class SwitchParaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SwitchPara> {
} _SwitchPara_default_instance_;

namespace protobuf_RelaySwitchOut_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIPMAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIPMAP, ik_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIPMAP, tripabc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, itripbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, ikoutput_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, ioutmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, fturntime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, fholdtime_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TRIPMAP)},
  { 6, -1, sizeof(SwitchPara)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TRIPMAP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SwitchPara_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "RelaySwitchOut.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _TRIPMAP_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SwitchPara_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _TRIPMAP_default_instance_.DefaultConstruct();
  _SwitchPara_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024RelaySwitchOut.proto\022\016RelaySwitchOut\"&"
      "\n\007TRIPMAP\022\n\n\002IK\030\001 \001(\r\022\017\n\007TripABC\030\002 \001(\r\"\201"
      "\001\n\nSwitchPara\022)\n\010iTripBuf\030\001 \003(\0132\027.RelayS"
      "witchOut.TRIPMAP\022\020\n\010iKOutput\030\002 \003(\r\022\020\n\010iO"
      "utMode\030\003 \001(\r\022\021\n\tfTurnTime\030\004 \001(\002\022\021\n\tfHold"
      "Time\030\005 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 218);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RelaySwitchOut.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_RelaySwitchOut_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TRIPMAP::kIKFieldNumber;
const int TRIPMAP::kTripABCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TRIPMAP::TRIPMAP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RelaySwitchOut_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RelaySwitchOut.TRIPMAP)
}
TRIPMAP::TRIPMAP(const TRIPMAP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ik_, &from.ik_,
    reinterpret_cast<char*>(&tripabc_) -
    reinterpret_cast<char*>(&ik_) + sizeof(tripabc_));
  // @@protoc_insertion_point(copy_constructor:RelaySwitchOut.TRIPMAP)
}

void TRIPMAP::SharedCtor() {
  ::memset(&ik_, 0, reinterpret_cast<char*>(&tripabc_) -
    reinterpret_cast<char*>(&ik_) + sizeof(tripabc_));
  _cached_size_ = 0;
}

TRIPMAP::~TRIPMAP() {
  // @@protoc_insertion_point(destructor:RelaySwitchOut.TRIPMAP)
  SharedDtor();
}

void TRIPMAP::SharedDtor() {
}

void TRIPMAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRIPMAP::descriptor() {
  protobuf_RelaySwitchOut_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RelaySwitchOut_2eproto::file_level_metadata[0].descriptor;
}

const TRIPMAP& TRIPMAP::default_instance() {
  protobuf_RelaySwitchOut_2eproto::InitDefaults();
  return *internal_default_instance();
}

TRIPMAP* TRIPMAP::New(::google::protobuf::Arena* arena) const {
  TRIPMAP* n = new TRIPMAP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TRIPMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:RelaySwitchOut.TRIPMAP)
  ::memset(&ik_, 0, reinterpret_cast<char*>(&tripabc_) -
    reinterpret_cast<char*>(&ik_) + sizeof(tripabc_));
}

bool TRIPMAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RelaySwitchOut.TRIPMAP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 IK = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ik_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TripABC = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tripabc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RelaySwitchOut.TRIPMAP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RelaySwitchOut.TRIPMAP)
  return false;
#undef DO_
}

void TRIPMAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RelaySwitchOut.TRIPMAP)
  // uint32 IK = 1;
  if (this->ik() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ik(), output);
  }

  // uint32 TripABC = 2;
  if (this->tripabc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tripabc(), output);
  }

  // @@protoc_insertion_point(serialize_end:RelaySwitchOut.TRIPMAP)
}

::google::protobuf::uint8* TRIPMAP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RelaySwitchOut.TRIPMAP)
  // uint32 IK = 1;
  if (this->ik() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ik(), target);
  }

  // uint32 TripABC = 2;
  if (this->tripabc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tripabc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RelaySwitchOut.TRIPMAP)
  return target;
}

size_t TRIPMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RelaySwitchOut.TRIPMAP)
  size_t total_size = 0;

  // uint32 IK = 1;
  if (this->ik() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ik());
  }

  // uint32 TripABC = 2;
  if (this->tripabc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tripabc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRIPMAP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RelaySwitchOut.TRIPMAP)
  GOOGLE_DCHECK_NE(&from, this);
  const TRIPMAP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TRIPMAP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RelaySwitchOut.TRIPMAP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RelaySwitchOut.TRIPMAP)
    MergeFrom(*source);
  }
}

void TRIPMAP::MergeFrom(const TRIPMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RelaySwitchOut.TRIPMAP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ik() != 0) {
    set_ik(from.ik());
  }
  if (from.tripabc() != 0) {
    set_tripabc(from.tripabc());
  }
}

void TRIPMAP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RelaySwitchOut.TRIPMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRIPMAP::CopyFrom(const TRIPMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RelaySwitchOut.TRIPMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRIPMAP::IsInitialized() const {
  return true;
}

void TRIPMAP::Swap(TRIPMAP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TRIPMAP::InternalSwap(TRIPMAP* other) {
  std::swap(ik_, other->ik_);
  std::swap(tripabc_, other->tripabc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TRIPMAP::GetMetadata() const {
  protobuf_RelaySwitchOut_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RelaySwitchOut_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TRIPMAP

// uint32 IK = 1;
void TRIPMAP::clear_ik() {
  ik_ = 0u;
}
::google::protobuf::uint32 TRIPMAP::ik() const {
  // @@protoc_insertion_point(field_get:RelaySwitchOut.TRIPMAP.IK)
  return ik_;
}
void TRIPMAP::set_ik(::google::protobuf::uint32 value) {
  
  ik_ = value;
  // @@protoc_insertion_point(field_set:RelaySwitchOut.TRIPMAP.IK)
}

// uint32 TripABC = 2;
void TRIPMAP::clear_tripabc() {
  tripabc_ = 0u;
}
::google::protobuf::uint32 TRIPMAP::tripabc() const {
  // @@protoc_insertion_point(field_get:RelaySwitchOut.TRIPMAP.TripABC)
  return tripabc_;
}
void TRIPMAP::set_tripabc(::google::protobuf::uint32 value) {
  
  tripabc_ = value;
  // @@protoc_insertion_point(field_set:RelaySwitchOut.TRIPMAP.TripABC)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchPara::kITripBufFieldNumber;
const int SwitchPara::kIKOutputFieldNumber;
const int SwitchPara::kIOutModeFieldNumber;
const int SwitchPara::kFTurnTimeFieldNumber;
const int SwitchPara::kFHoldTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchPara::SwitchPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RelaySwitchOut_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RelaySwitchOut.SwitchPara)
}
SwitchPara::SwitchPara(const SwitchPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      itripbuf_(from.itripbuf_),
      ikoutput_(from.ikoutput_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ioutmode_, &from.ioutmode_,
    reinterpret_cast<char*>(&fholdtime_) -
    reinterpret_cast<char*>(&ioutmode_) + sizeof(fholdtime_));
  // @@protoc_insertion_point(copy_constructor:RelaySwitchOut.SwitchPara)
}

void SwitchPara::SharedCtor() {
  ::memset(&ioutmode_, 0, reinterpret_cast<char*>(&fholdtime_) -
    reinterpret_cast<char*>(&ioutmode_) + sizeof(fholdtime_));
  _cached_size_ = 0;
}

SwitchPara::~SwitchPara() {
  // @@protoc_insertion_point(destructor:RelaySwitchOut.SwitchPara)
  SharedDtor();
}

void SwitchPara::SharedDtor() {
}

void SwitchPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchPara::descriptor() {
  protobuf_RelaySwitchOut_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RelaySwitchOut_2eproto::file_level_metadata[1].descriptor;
}

const SwitchPara& SwitchPara::default_instance() {
  protobuf_RelaySwitchOut_2eproto::InitDefaults();
  return *internal_default_instance();
}

SwitchPara* SwitchPara::New(::google::protobuf::Arena* arena) const {
  SwitchPara* n = new SwitchPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SwitchPara::Clear() {
// @@protoc_insertion_point(message_clear_start:RelaySwitchOut.SwitchPara)
  itripbuf_.Clear();
  ikoutput_.Clear();
  ::memset(&ioutmode_, 0, reinterpret_cast<char*>(&fholdtime_) -
    reinterpret_cast<char*>(&ioutmode_) + sizeof(fholdtime_));
}

bool SwitchPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RelaySwitchOut.SwitchPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RelaySwitchOut.TRIPMAP iTripBuf = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_itripbuf()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated uint32 iKOutput = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ikoutput())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_ikoutput())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 iOutMode = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ioutmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTurnTime = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fturntime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fHoldTime = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fholdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RelaySwitchOut.SwitchPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RelaySwitchOut.SwitchPara)
  return false;
#undef DO_
}

void SwitchPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RelaySwitchOut.SwitchPara)
  // repeated .RelaySwitchOut.TRIPMAP iTripBuf = 1;
  for (unsigned int i = 0, n = this->itripbuf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itripbuf(i), output);
  }

  // repeated uint32 iKOutput = 2;
  if (this->ikoutput_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ikoutput_cached_byte_size_);
  }
  for (int i = 0; i < this->ikoutput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ikoutput(i), output);
  }

  // uint32 iOutMode = 3;
  if (this->ioutmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ioutmode(), output);
  }

  // float fTurnTime = 4;
  if (this->fturntime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fturntime(), output);
  }

  // float fHoldTime = 5;
  if (this->fholdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fholdtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:RelaySwitchOut.SwitchPara)
}

::google::protobuf::uint8* SwitchPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RelaySwitchOut.SwitchPara)
  // repeated .RelaySwitchOut.TRIPMAP iTripBuf = 1;
  for (unsigned int i = 0, n = this->itripbuf_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->itripbuf(i), false, target);
  }

  // repeated uint32 iKOutput = 2;
  if (this->ikoutput_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ikoutput_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ikoutput_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ikoutput(i), target);
  }

  // uint32 iOutMode = 3;
  if (this->ioutmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ioutmode(), target);
  }

  // float fTurnTime = 4;
  if (this->fturntime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fturntime(), target);
  }

  // float fHoldTime = 5;
  if (this->fholdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fholdtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RelaySwitchOut.SwitchPara)
  return target;
}

size_t SwitchPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RelaySwitchOut.SwitchPara)
  size_t total_size = 0;

  // repeated .RelaySwitchOut.TRIPMAP iTripBuf = 1;
  {
    unsigned int count = this->itripbuf_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itripbuf(i));
    }
  }

  // repeated uint32 iKOutput = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ikoutput_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ikoutput_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 iOutMode = 3;
  if (this->ioutmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ioutmode());
  }

  // float fTurnTime = 4;
  if (this->fturntime() != 0) {
    total_size += 1 + 4;
  }

  // float fHoldTime = 5;
  if (this->fholdtime() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RelaySwitchOut.SwitchPara)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SwitchPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RelaySwitchOut.SwitchPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RelaySwitchOut.SwitchPara)
    MergeFrom(*source);
  }
}

void SwitchPara::MergeFrom(const SwitchPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RelaySwitchOut.SwitchPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itripbuf_.MergeFrom(from.itripbuf_);
  ikoutput_.MergeFrom(from.ikoutput_);
  if (from.ioutmode() != 0) {
    set_ioutmode(from.ioutmode());
  }
  if (from.fturntime() != 0) {
    set_fturntime(from.fturntime());
  }
  if (from.fholdtime() != 0) {
    set_fholdtime(from.fholdtime());
  }
}

void SwitchPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RelaySwitchOut.SwitchPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchPara::CopyFrom(const SwitchPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RelaySwitchOut.SwitchPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPara::IsInitialized() const {
  return true;
}

void SwitchPara::Swap(SwitchPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchPara::InternalSwap(SwitchPara* other) {
  itripbuf_.UnsafeArenaSwap(&other->itripbuf_);
  ikoutput_.UnsafeArenaSwap(&other->ikoutput_);
  std::swap(ioutmode_, other->ioutmode_);
  std::swap(fturntime_, other->fturntime_);
  std::swap(fholdtime_, other->fholdtime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SwitchPara::GetMetadata() const {
  protobuf_RelaySwitchOut_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RelaySwitchOut_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SwitchPara

// repeated .RelaySwitchOut.TRIPMAP iTripBuf = 1;
int SwitchPara::itripbuf_size() const {
  return itripbuf_.size();
}
void SwitchPara::clear_itripbuf() {
  itripbuf_.Clear();
}
const ::RelaySwitchOut::TRIPMAP& SwitchPara::itripbuf(int index) const {
  // @@protoc_insertion_point(field_get:RelaySwitchOut.SwitchPara.iTripBuf)
  return itripbuf_.Get(index);
}
::RelaySwitchOut::TRIPMAP* SwitchPara::mutable_itripbuf(int index) {
  // @@protoc_insertion_point(field_mutable:RelaySwitchOut.SwitchPara.iTripBuf)
  return itripbuf_.Mutable(index);
}
::RelaySwitchOut::TRIPMAP* SwitchPara::add_itripbuf() {
  // @@protoc_insertion_point(field_add:RelaySwitchOut.SwitchPara.iTripBuf)
  return itripbuf_.Add();
}
::google::protobuf::RepeatedPtrField< ::RelaySwitchOut::TRIPMAP >*
SwitchPara::mutable_itripbuf() {
  // @@protoc_insertion_point(field_mutable_list:RelaySwitchOut.SwitchPara.iTripBuf)
  return &itripbuf_;
}
const ::google::protobuf::RepeatedPtrField< ::RelaySwitchOut::TRIPMAP >&
SwitchPara::itripbuf() const {
  // @@protoc_insertion_point(field_list:RelaySwitchOut.SwitchPara.iTripBuf)
  return itripbuf_;
}

// repeated uint32 iKOutput = 2;
int SwitchPara::ikoutput_size() const {
  return ikoutput_.size();
}
void SwitchPara::clear_ikoutput() {
  ikoutput_.Clear();
}
::google::protobuf::uint32 SwitchPara::ikoutput(int index) const {
  // @@protoc_insertion_point(field_get:RelaySwitchOut.SwitchPara.iKOutput)
  return ikoutput_.Get(index);
}
void SwitchPara::set_ikoutput(int index, ::google::protobuf::uint32 value) {
  ikoutput_.Set(index, value);
  // @@protoc_insertion_point(field_set:RelaySwitchOut.SwitchPara.iKOutput)
}
void SwitchPara::add_ikoutput(::google::protobuf::uint32 value) {
  ikoutput_.Add(value);
  // @@protoc_insertion_point(field_add:RelaySwitchOut.SwitchPara.iKOutput)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SwitchPara::ikoutput() const {
  // @@protoc_insertion_point(field_list:RelaySwitchOut.SwitchPara.iKOutput)
  return ikoutput_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SwitchPara::mutable_ikoutput() {
  // @@protoc_insertion_point(field_mutable_list:RelaySwitchOut.SwitchPara.iKOutput)
  return &ikoutput_;
}

// uint32 iOutMode = 3;
void SwitchPara::clear_ioutmode() {
  ioutmode_ = 0u;
}
::google::protobuf::uint32 SwitchPara::ioutmode() const {
  // @@protoc_insertion_point(field_get:RelaySwitchOut.SwitchPara.iOutMode)
  return ioutmode_;
}
void SwitchPara::set_ioutmode(::google::protobuf::uint32 value) {
  
  ioutmode_ = value;
  // @@protoc_insertion_point(field_set:RelaySwitchOut.SwitchPara.iOutMode)
}

// float fTurnTime = 4;
void SwitchPara::clear_fturntime() {
  fturntime_ = 0;
}
float SwitchPara::fturntime() const {
  // @@protoc_insertion_point(field_get:RelaySwitchOut.SwitchPara.fTurnTime)
  return fturntime_;
}
void SwitchPara::set_fturntime(float value) {
  
  fturntime_ = value;
  // @@protoc_insertion_point(field_set:RelaySwitchOut.SwitchPara.fTurnTime)
}

// float fHoldTime = 5;
void SwitchPara::clear_fholdtime() {
  fholdtime_ = 0;
}
float SwitchPara::fholdtime() const {
  // @@protoc_insertion_point(field_get:RelaySwitchOut.SwitchPara.fHoldTime)
  return fholdtime_;
}
void SwitchPara::set_fholdtime(float value) {
  
  fholdtime_ = value;
  // @@protoc_insertion_point(field_set:RelaySwitchOut.SwitchPara.fHoldTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RelaySwitchOut

// @@protoc_insertion_point(global_scope)
