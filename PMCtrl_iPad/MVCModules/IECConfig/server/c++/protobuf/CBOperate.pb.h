// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CBOperate.proto

#ifndef PROTOBUF_CBOperate_2eproto__INCLUDED
#define PROTOBUF_CBOperate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "hqyGoosePublish.pb.h"
#include "RelaySwitchOut.pb.h"
// @@protoc_insertion_point(includes)
namespace CBOperate {
class BasicResultItem;
class BasicResultItemDefaultTypeInternal;
extern BasicResultItemDefaultTypeInternal _BasicResultItem_default_instance_;
class CommonPara;
class CommonParaDefaultTypeInternal;
extern CommonParaDefaultTypeInternal _CommonPara_default_instance_;
class Items;
class ItemsDefaultTypeInternal;
extern ItemsDefaultTypeInternal _Items_default_instance_;
class TestItem_CBOperate;
class TestItem_CBOperateDefaultTypeInternal;
extern TestItem_CBOperateDefaultTypeInternal _TestItem_CBOperate_default_instance_;
class TestItem_CBOperate_Result;
class TestItem_CBOperate_ResultDefaultTypeInternal;
extern TestItem_CBOperate_ResultDefaultTypeInternal _TestItem_CBOperate_Result_default_instance_;
class TestItem_CBOperate_Switch_State;
class TestItem_CBOperate_Switch_StateDefaultTypeInternal;
extern TestItem_CBOperate_Switch_StateDefaultTypeInternal _TestItem_CBOperate_Switch_State_default_instance_;
class TransFaltState;
class TransFaltStateDefaultTypeInternal;
extern TransFaltStateDefaultTypeInternal _TransFaltState_default_instance_;
class chanel;
class chanelDefaultTypeInternal;
extern chanelDefaultTypeInternal _chanel_default_instance_;
}  // namespace CBOperate
namespace RelaySwitchOut {
class SwitchPara;
class SwitchParaDefaultTypeInternal;
extern SwitchParaDefaultTypeInternal _SwitchPara_default_instance_;
class TRIPMAP;
class TRIPMAPDefaultTypeInternal;
extern TRIPMAPDefaultTypeInternal _TRIPMAP_default_instance_;
}  // namespace RelaySwitchOut
namespace hqyGoose_Pub_Setting {
class Control_Block;
class Control_BlockDefaultTypeInternal;
extern Control_BlockDefaultTypeInternal _Control_Block_default_instance_;
class Goose_Publish;
class Goose_PublishDefaultTypeInternal;
extern Goose_PublishDefaultTypeInternal _Goose_Publish_default_instance_;
}  // namespace hqyGoose_Pub_Setting

namespace CBOperate {

namespace protobuf_CBOperate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_CBOperate_2eproto

enum Error_type {
  Error_A_JD = 0,
  Error_B_JD = 1,
  Error_C_JD = 2,
  Error_AB_DL = 3,
  Error_BC_DL = 4,
  Error_CA_DL = 5,
  Error_AB_JDDL = 6,
  Error_BC_JDDL = 7,
  Error_CA_JDDL = 8,
  Error_ABC_DL = 9,
  Error_SINGLE_ZK = 10,
  Error_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_type_IsValid(int value);
const Error_type Error_type_MIN = Error_A_JD;
const Error_type Error_type_MAX = Error_SINGLE_ZK;
const int Error_type_ARRAYSIZE = Error_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_type_descriptor();
inline const ::std::string& Error_type_Name(Error_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_type_descriptor(), value);
}
inline bool Error_type_Parse(
    const ::std::string& name, Error_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_type>(
    Error_type_descriptor(), name, value);
}
enum Error_Dirc {
  reverse = 0,
  positive = 1,
  Error_Dirc_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_Dirc_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_Dirc_IsValid(int value);
const Error_Dirc Error_Dirc_MIN = reverse;
const Error_Dirc Error_Dirc_MAX = positive;
const int Error_Dirc_ARRAYSIZE = Error_Dirc_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Dirc_descriptor();
inline const ::std::string& Error_Dirc_Name(Error_Dirc value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Dirc_descriptor(), value);
}
inline bool Error_Dirc_Parse(
    const ::std::string& name, Error_Dirc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Dirc>(
    Error_Dirc_descriptor(), name, value);
}
enum OutPutType {
  analog_type = 0,
  digital_type = 1,
  analog_digital_type = 2,
  OutPutType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OutPutType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OutPutType_IsValid(int value);
const OutPutType OutPutType_MIN = analog_type;
const OutPutType OutPutType_MAX = analog_digital_type;
const int OutPutType_ARRAYSIZE = OutPutType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutPutType_descriptor();
inline const ::std::string& OutPutType_Name(OutPutType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutPutType_descriptor(), value);
}
inline bool OutPutType_Parse(
    const ::std::string& name, OutPutType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutPutType>(
    OutPutType_descriptor(), name, value);
}
enum Error_Nature {
  instant = 0,
  perpetual = 1,
  Error_Nature_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_Nature_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_Nature_IsValid(int value);
const Error_Nature Error_Nature_MIN = instant;
const Error_Nature Error_Nature_MAX = perpetual;
const int Error_Nature_ARRAYSIZE = Error_Nature_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Nature_descriptor();
inline const ::std::string& Error_Nature_Name(Error_Nature value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Nature_descriptor(), value);
}
inline bool Error_Nature_Parse(
    const ::std::string& name, Error_Nature* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Nature>(
    Error_Nature_descriptor(), name, value);
}
enum KoMode {
  K0 = 0,
  RERL = 1,
  Z0 = 2,
  KoMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KoMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KoMode_IsValid(int value);
const KoMode KoMode_MIN = K0;
const KoMode KoMode_MAX = Z0;
const int KoMode_ARRAYSIZE = KoMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* KoMode_descriptor();
inline const ::std::string& KoMode_Name(KoMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    KoMode_descriptor(), value);
}
inline bool KoMode_Parse(
    const ::std::string& name, KoMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KoMode>(
    KoMode_descriptor(), name, value);
}
enum FaultTrigeMode {
  TIME = 0,
  KEY = 1,
  H = 2,
  GPS = 3,
  FaultTrigeMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FaultTrigeMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FaultTrigeMode_IsValid(int value);
const FaultTrigeMode FaultTrigeMode_MIN = TIME;
const FaultTrigeMode FaultTrigeMode_MAX = GPS;
const int FaultTrigeMode_ARRAYSIZE = FaultTrigeMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FaultTrigeMode_descriptor();
inline const ::std::string& FaultTrigeMode_Name(FaultTrigeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FaultTrigeMode_descriptor(), value);
}
inline bool FaultTrigeMode_Parse(
    const ::std::string& name, FaultTrigeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaultTrigeMode>(
    FaultTrigeMode_descriptor(), name, value);
}
enum PTCON {
  BUS = 0,
  LINE = 1,
  PTCON_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PTCON_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PTCON_IsValid(int value);
const PTCON PTCON_MIN = BUS;
const PTCON PTCON_MAX = LINE;
const int PTCON_ARRAYSIZE = PTCON_MAX + 1;

const ::google::protobuf::EnumDescriptor* PTCON_descriptor();
inline const ::std::string& PTCON_Name(PTCON value) {
  return ::google::protobuf::internal::NameOfEnum(
    PTCON_descriptor(), value);
}
inline bool PTCON_Parse(
    const ::std::string& name, PTCON* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PTCON>(
    PTCON_descriptor(), name, value);
}
enum CTPOINT {
  POINT_BUS = 0,
  POINT_LINE = 1,
  CTPOINT_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CTPOINT_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CTPOINT_IsValid(int value);
const CTPOINT CTPOINT_MIN = POINT_BUS;
const CTPOINT CTPOINT_MAX = POINT_LINE;
const int CTPOINT_ARRAYSIZE = CTPOINT_MAX + 1;

const ::google::protobuf::EnumDescriptor* CTPOINT_descriptor();
inline const ::std::string& CTPOINT_Name(CTPOINT value) {
  return ::google::protobuf::internal::NameOfEnum(
    CTPOINT_descriptor(), value);
}
inline bool CTPOINT_Parse(
    const ::std::string& name, CTPOINT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CTPOINT>(
    CTPOINT_descriptor(), name, value);
}
enum RcloseMode {
  CLOSE_MIX = 0,
  CLOSE_THREE = 1,
  CLOSE_NONE = 2,
  RcloseMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RcloseMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RcloseMode_IsValid(int value);
const RcloseMode RcloseMode_MIN = CLOSE_MIX;
const RcloseMode RcloseMode_MAX = CLOSE_NONE;
const int RcloseMode_ARRAYSIZE = RcloseMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RcloseMode_descriptor();
inline const ::std::string& RcloseMode_Name(RcloseMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RcloseMode_descriptor(), value);
}
inline bool RcloseMode_Parse(
    const ::std::string& name, RcloseMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RcloseMode>(
    RcloseMode_descriptor(), name, value);
}
enum ControlMode {
  CONTROL_SIG = 0,
  CONTROL_TIME = 1,
  ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlMode_IsValid(int value);
const ControlMode ControlMode_MIN = CONTROL_SIG;
const ControlMode ControlMode_MAX = CONTROL_TIME;
const int ControlMode_ARRAYSIZE = ControlMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlMode_descriptor();
inline const ::std::string& ControlMode_Name(ControlMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlMode_descriptor(), value);
}
inline bool ControlMode_Parse(
    const ::std::string& name, ControlMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlMode>(
    ControlMode_descriptor(), name, value);
}
enum BCSIMULATION {
  NO = 0,
  YES = 1,
  BCSIMULATION_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BCSIMULATION_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BCSIMULATION_IsValid(int value);
const BCSIMULATION BCSIMULATION_MIN = NO;
const BCSIMULATION BCSIMULATION_MAX = YES;
const int BCSIMULATION_ARRAYSIZE = BCSIMULATION_MAX + 1;

const ::google::protobuf::EnumDescriptor* BCSIMULATION_descriptor();
inline const ::std::string& BCSIMULATION_Name(BCSIMULATION value) {
  return ::google::protobuf::internal::NameOfEnum(
    BCSIMULATION_descriptor(), value);
}
inline bool BCSIMULATION_Parse(
    const ::std::string& name, BCSIMULATION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BCSIMULATION>(
    BCSIMULATION_descriptor(), name, value);
}
enum RXS {
  Z = 0,
  RX = 1,
  RXS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RXS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RXS_IsValid(int value);
const RXS RXS_MIN = Z;
const RXS RXS_MAX = RX;
const int RXS_ARRAYSIZE = RXS_MAX + 1;

const ::google::protobuf::EnumDescriptor* RXS_descriptor();
inline const ::std::string& RXS_Name(RXS value) {
  return ::google::protobuf::internal::NameOfEnum(
    RXS_descriptor(), value);
}
inline bool RXS_Parse(
    const ::std::string& name, RXS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RXS>(
    RXS_descriptor(), name, value);
}
enum VZDEFINE {
  ZERO = 0,
  Z3X3VO = 1,
  F3X3VO = 2,
  Z3VO = 3,
  F3VO = 4,
  PHDEFINE = 5,
  VZDEFINE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VZDEFINE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VZDEFINE_IsValid(int value);
const VZDEFINE VZDEFINE_MIN = ZERO;
const VZDEFINE VZDEFINE_MAX = PHDEFINE;
const int VZDEFINE_ARRAYSIZE = VZDEFINE_MAX + 1;

const ::google::protobuf::EnumDescriptor* VZDEFINE_descriptor();
inline const ::std::string& VZDEFINE_Name(VZDEFINE value) {
  return ::google::protobuf::internal::NameOfEnum(
    VZDEFINE_descriptor(), value);
}
inline bool VZDEFINE_Parse(
    const ::std::string& name, VZDEFINE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VZDEFINE>(
    VZDEFINE_descriptor(), name, value);
}
enum VZPHDEFINE {
  VA_PHASE = 0,
  VB_PHASE = 1,
  VC_PHASE = 2,
  VAB_PHASE = 3,
  VBC_PHASE = 4,
  VCA_PHASE = 5,
  VZPHDEFINE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VZPHDEFINE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VZPHDEFINE_IsValid(int value);
const VZPHDEFINE VZPHDEFINE_MIN = VA_PHASE;
const VZPHDEFINE VZPHDEFINE_MAX = VCA_PHASE;
const int VZPHDEFINE_ARRAYSIZE = VZPHDEFINE_MAX + 1;

const ::google::protobuf::EnumDescriptor* VZPHDEFINE_descriptor();
inline const ::std::string& VZPHDEFINE_Name(VZPHDEFINE value) {
  return ::google::protobuf::internal::NameOfEnum(
    VZPHDEFINE_descriptor(), value);
}
inline bool VZPHDEFINE_Parse(
    const ::std::string& name, VZPHDEFINE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VZPHDEFINE>(
    VZPHDEFINE_descriptor(), name, value);
}
enum TESTMODE {
  NCHANGE_CUR = 0,
  NCHANGE_VOL = 1,
  NCHANGE_RES = 2,
  TESTMODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TESTMODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TESTMODE_IsValid(int value);
const TESTMODE TESTMODE_MIN = NCHANGE_CUR;
const TESTMODE TESTMODE_MAX = NCHANGE_RES;
const int TESTMODE_ARRAYSIZE = TESTMODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TESTMODE_descriptor();
inline const ::std::string& TESTMODE_Name(TESTMODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TESTMODE_descriptor(), value);
}
inline bool TESTMODE_Parse(
    const ::std::string& name, TESTMODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TESTMODE>(
    TESTMODE_descriptor(), name, value);
}
enum FAULTINCMODE {
  RAND = 0,
  CONST = 1,
  FAULTINCMODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FAULTINCMODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FAULTINCMODE_IsValid(int value);
const FAULTINCMODE FAULTINCMODE_MIN = RAND;
const FAULTINCMODE FAULTINCMODE_MAX = CONST;
const int FAULTINCMODE_ARRAYSIZE = FAULTINCMODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FAULTINCMODE_descriptor();
inline const ::std::string& FAULTINCMODE_Name(FAULTINCMODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FAULTINCMODE_descriptor(), value);
}
inline bool FAULTINCMODE_Parse(
    const ::std::string& name, FAULTINCMODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FAULTINCMODE>(
    FAULTINCMODE_descriptor(), name, value);
}
enum DCSIM {
  ADD = 0,
  ADD_NONE = 1,
  DCSIM_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DCSIM_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DCSIM_IsValid(int value);
const DCSIM DCSIM_MIN = ADD;
const DCSIM DCSIM_MAX = ADD_NONE;
const int DCSIM_ARRAYSIZE = DCSIM_MAX + 1;

const ::google::protobuf::EnumDescriptor* DCSIM_descriptor();
inline const ::std::string& DCSIM_Name(DCSIM value) {
  return ::google::protobuf::internal::NameOfEnum(
    DCSIM_descriptor(), value);
}
inline bool DCSIM_Parse(
    const ::std::string& name, DCSIM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DCSIM>(
    DCSIM_descriptor(), name, value);
}
// ===================================================================

class chanel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.chanel) */ {
 public:
  chanel();
  virtual ~chanel();

  chanel(const chanel& from);

  inline chanel& operator=(const chanel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chanel& default_instance();

  static inline const chanel* internal_default_instance() {
    return reinterpret_cast<const chanel*>(
               &_chanel_default_instance_);
  }

  void Swap(chanel* other);

  // implements Message ----------------------------------------------

  inline chanel* New() const PROTOBUF_FINAL { return New(NULL); }

  chanel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const chanel& from);
  void MergeFrom(const chanel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(chanel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float famptitude = 1;
  void clear_famptitude();
  static const int kFamptitudeFieldNumber = 1;
  float famptitude() const;
  void set_famptitude(float value);

  // float fphase = 2;
  void clear_fphase();
  static const int kFphaseFieldNumber = 2;
  float fphase() const;
  void set_fphase(float value);

  // @@protoc_insertion_point(class_scope:CBOperate.chanel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float famptitude_;
  float fphase_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicResultItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.BasicResultItem) */ {
 public:
  BasicResultItem();
  virtual ~BasicResultItem();

  BasicResultItem(const BasicResultItem& from);

  inline BasicResultItem& operator=(const BasicResultItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicResultItem& default_instance();

  static inline const BasicResultItem* internal_default_instance() {
    return reinterpret_cast<const BasicResultItem*>(
               &_BasicResultItem_default_instance_);
  }

  void Swap(BasicResultItem* other);

  // implements Message ----------------------------------------------

  inline BasicResultItem* New() const PROTOBUF_FINAL { return New(NULL); }

  BasicResultItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasicResultItem& from);
  void MergeFrom(const BasicResultItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasicResultItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CBOperate.chanel Va = 1;
  bool has_va() const;
  void clear_va();
  static const int kVaFieldNumber = 1;
  const ::CBOperate::chanel& va() const;
  ::CBOperate::chanel* mutable_va();
  ::CBOperate::chanel* release_va();
  void set_allocated_va(::CBOperate::chanel* va);

  // .CBOperate.chanel Vb = 2;
  bool has_vb() const;
  void clear_vb();
  static const int kVbFieldNumber = 2;
  const ::CBOperate::chanel& vb() const;
  ::CBOperate::chanel* mutable_vb();
  ::CBOperate::chanel* release_vb();
  void set_allocated_vb(::CBOperate::chanel* vb);

  // .CBOperate.chanel Vc = 3;
  bool has_vc() const;
  void clear_vc();
  static const int kVcFieldNumber = 3;
  const ::CBOperate::chanel& vc() const;
  ::CBOperate::chanel* mutable_vc();
  ::CBOperate::chanel* release_vc();
  void set_allocated_vc(::CBOperate::chanel* vc);

  // .CBOperate.chanel Ia = 4;
  bool has_ia() const;
  void clear_ia();
  static const int kIaFieldNumber = 4;
  const ::CBOperate::chanel& ia() const;
  ::CBOperate::chanel* mutable_ia();
  ::CBOperate::chanel* release_ia();
  void set_allocated_ia(::CBOperate::chanel* ia);

  // .CBOperate.chanel Ib = 5;
  bool has_ib() const;
  void clear_ib();
  static const int kIbFieldNumber = 5;
  const ::CBOperate::chanel& ib() const;
  ::CBOperate::chanel* mutable_ib();
  ::CBOperate::chanel* release_ib();
  void set_allocated_ib(::CBOperate::chanel* ib);

  // .CBOperate.chanel Ic = 6;
  bool has_ic() const;
  void clear_ic();
  static const int kIcFieldNumber = 6;
  const ::CBOperate::chanel& ic() const;
  ::CBOperate::chanel* mutable_ic();
  ::CBOperate::chanel* release_ic();
  void set_allocated_ic(::CBOperate::chanel* ic);

  // @@protoc_insertion_point(class_scope:CBOperate.BasicResultItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CBOperate::chanel* va_;
  ::CBOperate::chanel* vb_;
  ::CBOperate::chanel* vc_;
  ::CBOperate::chanel* ia_;
  ::CBOperate::chanel* ib_;
  ::CBOperate::chanel* ic_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestItem_CBOperate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.TestItem_CBOperate) */ {
 public:
  TestItem_CBOperate();
  virtual ~TestItem_CBOperate();

  TestItem_CBOperate(const TestItem_CBOperate& from);

  inline TestItem_CBOperate& operator=(const TestItem_CBOperate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestItem_CBOperate& default_instance();

  static inline const TestItem_CBOperate* internal_default_instance() {
    return reinterpret_cast<const TestItem_CBOperate*>(
               &_TestItem_CBOperate_default_instance_);
  }

  void Swap(TestItem_CBOperate* other);

  // implements Message ----------------------------------------------

  inline TestItem_CBOperate* New() const PROTOBUF_FINAL { return New(NULL); }

  TestItem_CBOperate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestItem_CBOperate& from);
  void MergeFrom(const TestItem_CBOperate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestItem_CBOperate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CBOperate.TransFaltState oTransFaltState = 15;
  bool has_otransfaltstate() const;
  void clear_otransfaltstate();
  static const int kOTransFaltStateFieldNumber = 15;
  const ::CBOperate::TransFaltState& otransfaltstate() const;
  ::CBOperate::TransFaltState* mutable_otransfaltstate();
  ::CBOperate::TransFaltState* release_otransfaltstate();
  void set_allocated_otransfaltstate(::CBOperate::TransFaltState* otransfaltstate);

  // .hqyGoose_Pub_Setting.Goose_Publish GooseChanged = 16;
  bool has_goosechanged() const;
  void clear_goosechanged();
  static const int kGooseChangedFieldNumber = 16;
  const ::hqyGoose_Pub_Setting::Goose_Publish& goosechanged() const;
  ::hqyGoose_Pub_Setting::Goose_Publish* mutable_goosechanged();
  ::hqyGoose_Pub_Setting::Goose_Publish* release_goosechanged();
  void set_allocated_goosechanged(::hqyGoose_Pub_Setting::Goose_Publish* goosechanged);

  // uint32 iIndex = 1;
  void clear_iindex();
  static const int kIIndexFieldNumber = 1;
  ::google::protobuf::uint32 iindex() const;
  void set_iindex(::google::protobuf::uint32 value);

  // .CBOperate.Error_type errortype = 2;
  void clear_errortype();
  static const int kErrortypeFieldNumber = 2;
  ::CBOperate::Error_type errortype() const;
  void set_errortype(::CBOperate::Error_type value);

  // float fdl_zk = 3;
  void clear_fdl_zk();
  static const int kFdlZkFieldNumber = 3;
  float fdl_zk() const;
  void set_fdl_zk(float value);

  // float fZK_Angle = 4;
  void clear_fzk_angle();
  static const int kFZKAngleFieldNumber = 4;
  float fzk_angle() const;
  void set_fzk_angle(float value);

  // float fR = 5;
  void clear_fr();
  static const int kFRFieldNumber = 5;
  float fr() const;
  void set_fr(float value);

  // float fX = 6;
  void clear_fx();
  static const int kFXFieldNumber = 6;
  float fx() const;
  void set_fx(float value);

  // float fDL_I = 7;
  void clear_fdl_i();
  static const int kFDLIFieldNumber = 7;
  float fdl_i() const;
  void set_fdl_i(float value);

  // float fDL_V = 8;
  void clear_fdl_v();
  static const int kFDLVFieldNumber = 8;
  float fdl_v() const;
  void set_fdl_v(float value);

  // .CBOperate.Error_Dirc dirc = 9;
  void clear_dirc();
  static const int kDircFieldNumber = 9;
  ::CBOperate::Error_Dirc dirc() const;
  void set_dirc(::CBOperate::Error_Dirc value);

  // .CBOperate.Error_Nature nature = 10;
  void clear_nature();
  static const int kNatureFieldNumber = 10;
  ::CBOperate::Error_Nature nature() const;
  void set_nature(::CBOperate::Error_Nature value);

  // float fMaxErrorTime = 11;
  void clear_fmaxerrortime();
  static const int kFMaxErrorTimeFieldNumber = 11;
  float fmaxerrortime() const;
  void set_fmaxerrortime(float value);

  // float fLoad_I = 12;
  void clear_fload_i();
  static const int kFLoadIFieldNumber = 12;
  float fload_i() const;
  void set_fload_i(float value);

  // float fLoad_Ang = 13;
  void clear_fload_ang();
  static const int kFLoadAngFieldNumber = 13;
  float fload_ang() const;
  void set_fload_ang(float value);

  // uint32 iTransSwitch = 14;
  void clear_itransswitch();
  static const int kITransSwitchFieldNumber = 14;
  ::google::protobuf::uint32 itransswitch() const;
  void set_itransswitch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CBOperate.TestItem_CBOperate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CBOperate::TransFaltState* otransfaltstate_;
  ::hqyGoose_Pub_Setting::Goose_Publish* goosechanged_;
  ::google::protobuf::uint32 iindex_;
  int errortype_;
  float fdl_zk_;
  float fzk_angle_;
  float fr_;
  float fx_;
  float fdl_i_;
  float fdl_v_;
  int dirc_;
  int nature_;
  float fmaxerrortime_;
  float fload_i_;
  float fload_ang_;
  ::google::protobuf::uint32 itransswitch_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransFaltState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.TransFaltState) */ {
 public:
  TransFaltState();
  virtual ~TransFaltState();

  TransFaltState(const TransFaltState& from);

  inline TransFaltState& operator=(const TransFaltState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransFaltState& default_instance();

  static inline const TransFaltState* internal_default_instance() {
    return reinterpret_cast<const TransFaltState*>(
               &_TransFaltState_default_instance_);
  }

  void Swap(TransFaltState* other);

  // implements Message ----------------------------------------------

  inline TransFaltState* New() const PROTOBUF_FINAL { return New(NULL); }

  TransFaltState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransFaltState& from);
  void MergeFrom(const TransFaltState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransFaltState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CBOperate.Error_type errortype = 1;
  void clear_errortype();
  static const int kErrortypeFieldNumber = 1;
  ::CBOperate::Error_type errortype() const;
  void set_errortype(::CBOperate::Error_type value);

  // float fTansTime = 2;
  void clear_ftanstime();
  static const int kFTansTimeFieldNumber = 2;
  float ftanstime() const;
  void set_ftanstime(float value);

  // float fdl_zk = 3;
  void clear_fdl_zk();
  static const int kFdlZkFieldNumber = 3;
  float fdl_zk() const;
  void set_fdl_zk(float value);

  // float fZK_Angle = 4;
  void clear_fzk_angle();
  static const int kFZKAngleFieldNumber = 4;
  float fzk_angle() const;
  void set_fzk_angle(float value);

  // float fDL_I = 7;
  void clear_fdl_i();
  static const int kFDLIFieldNumber = 7;
  float fdl_i() const;
  void set_fdl_i(float value);

  // float fDL_V = 8;
  void clear_fdl_v();
  static const int kFDLVFieldNumber = 8;
  float fdl_v() const;
  void set_fdl_v(float value);

  // .CBOperate.Error_Dirc dirc = 9;
  void clear_dirc();
  static const int kDircFieldNumber = 9;
  ::CBOperate::Error_Dirc dirc() const;
  void set_dirc(::CBOperate::Error_Dirc value);

  // @@protoc_insertion_point(class_scope:CBOperate.TransFaltState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int errortype_;
  float ftanstime_;
  float fdl_zk_;
  float fzk_angle_;
  float fdl_i_;
  float fdl_v_;
  int dirc_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestItem_CBOperate_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.TestItem_CBOperate_Result) */ {
 public:
  TestItem_CBOperate_Result();
  virtual ~TestItem_CBOperate_Result();

  TestItem_CBOperate_Result(const TestItem_CBOperate_Result& from);

  inline TestItem_CBOperate_Result& operator=(const TestItem_CBOperate_Result& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestItem_CBOperate_Result& default_instance();

  static inline const TestItem_CBOperate_Result* internal_default_instance() {
    return reinterpret_cast<const TestItem_CBOperate_Result*>(
               &_TestItem_CBOperate_Result_default_instance_);
  }

  void Swap(TestItem_CBOperate_Result* other);

  // implements Message ----------------------------------------------

  inline TestItem_CBOperate_Result* New() const PROTOBUF_FINAL { return New(NULL); }

  TestItem_CBOperate_Result* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestItem_CBOperate_Result& from);
  void MergeFrom(const TestItem_CBOperate_Result& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestItem_CBOperate_Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 iIndex = 1;
  void clear_iindex();
  static const int kIIndexFieldNumber = 1;
  ::google::protobuf::uint32 iindex() const;
  void set_iindex(::google::protobuf::uint32 value);

  // float fta = 2;
  void clear_fta();
  static const int kFtaFieldNumber = 2;
  float fta() const;
  void set_fta(float value);

  // float ftb = 3;
  void clear_ftb();
  static const int kFtbFieldNumber = 3;
  float ftb() const;
  void set_ftb(float value);

  // float ftc = 4;
  void clear_ftc();
  static const int kFtcFieldNumber = 4;
  float ftc() const;
  void set_ftc(float value);

  // float fchz = 5;
  void clear_fchz();
  static const int kFchzFieldNumber = 5;
  float fchz() const;
  void set_fchz(float value);

  // float fhjs = 6;
  void clear_fhjs();
  static const int kFhjsFieldNumber = 6;
  float fhjs() const;
  void set_fhjs(float value);

  // float frta = 7;
  void clear_frta();
  static const int kFrtaFieldNumber = 7;
  float frta() const;
  void set_frta(float value);

  // float frtb = 8;
  void clear_frtb();
  static const int kFrtbFieldNumber = 8;
  float frtb() const;
  void set_frtb(float value);

  // float frtc = 9;
  void clear_frtc();
  static const int kFrtcFieldNumber = 9;
  float frtc() const;
  void set_frtc(float value);

  // float frtd = 10;
  void clear_frtd();
  static const int kFrtdFieldNumber = 10;
  float frtd() const;
  void set_frtd(float value);

  // @@protoc_insertion_point(class_scope:CBOperate.TestItem_CBOperate_Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 iindex_;
  float fta_;
  float ftb_;
  float ftc_;
  float fchz_;
  float fhjs_;
  float frta_;
  float frtb_;
  float frtc_;
  float frtd_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestItem_CBOperate_Switch_State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.TestItem_CBOperate_Switch_State) */ {
 public:
  TestItem_CBOperate_Switch_State();
  virtual ~TestItem_CBOperate_Switch_State();

  TestItem_CBOperate_Switch_State(const TestItem_CBOperate_Switch_State& from);

  inline TestItem_CBOperate_Switch_State& operator=(const TestItem_CBOperate_Switch_State& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestItem_CBOperate_Switch_State& default_instance();

  static inline const TestItem_CBOperate_Switch_State* internal_default_instance() {
    return reinterpret_cast<const TestItem_CBOperate_Switch_State*>(
               &_TestItem_CBOperate_Switch_State_default_instance_);
  }

  void Swap(TestItem_CBOperate_Switch_State* other);

  // implements Message ----------------------------------------------

  inline TestItem_CBOperate_Switch_State* New() const PROTOBUF_FINAL { return New(NULL); }

  TestItem_CBOperate_Switch_State* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestItem_CBOperate_Switch_State& from);
  void MergeFrom(const TestItem_CBOperate_Switch_State& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestItem_CBOperate_Switch_State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 nibinstate = 1;
  void clear_nibinstate();
  static const int kNibinstateFieldNumber = 1;
  ::google::protobuf::uint32 nibinstate() const;
  void set_nibinstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CBOperate.TestItem_CBOperate_Switch_State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 nibinstate_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Items : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.Items) */ {
 public:
  Items();
  virtual ~Items();

  Items(const Items& from);

  inline Items& operator=(const Items& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Items& default_instance();

  static inline const Items* internal_default_instance() {
    return reinterpret_cast<const Items*>(
               &_Items_default_instance_);
  }

  void Swap(Items* other);

  // implements Message ----------------------------------------------

  inline Items* New() const PROTOBUF_FINAL { return New(NULL); }

  Items* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Items& from);
  void MergeFrom(const Items& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Items* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CBOperate.TestItem_CBOperate oItems = 3;
  int oitems_size() const;
  void clear_oitems();
  static const int kOItemsFieldNumber = 3;
  const ::CBOperate::TestItem_CBOperate& oitems(int index) const;
  ::CBOperate::TestItem_CBOperate* mutable_oitems(int index);
  ::CBOperate::TestItem_CBOperate* add_oitems();
  ::google::protobuf::RepeatedPtrField< ::CBOperate::TestItem_CBOperate >*
      mutable_oitems();
  const ::google::protobuf::RepeatedPtrField< ::CBOperate::TestItem_CBOperate >&
      oitems() const;

  // .CBOperate.CommonPara oComm = 1;
  bool has_ocomm() const;
  void clear_ocomm();
  static const int kOCommFieldNumber = 1;
  const ::CBOperate::CommonPara& ocomm() const;
  ::CBOperate::CommonPara* mutable_ocomm();
  ::CBOperate::CommonPara* release_ocomm();
  void set_allocated_ocomm(::CBOperate::CommonPara* ocomm);

  // .RelaySwitchOut.SwitchPara oSwitch = 2;
  bool has_oswitch() const;
  void clear_oswitch();
  static const int kOSwitchFieldNumber = 2;
  const ::RelaySwitchOut::SwitchPara& oswitch() const;
  ::RelaySwitchOut::SwitchPara* mutable_oswitch();
  ::RelaySwitchOut::SwitchPara* release_oswitch();
  void set_allocated_oswitch(::RelaySwitchOut::SwitchPara* oswitch);

  // .CBOperate.OutPutType outputType = 4;
  void clear_outputtype();
  static const int kOutputTypeFieldNumber = 4;
  ::CBOperate::OutPutType outputtype() const;
  void set_outputtype(::CBOperate::OutPutType value);

  // @@protoc_insertion_point(class_scope:CBOperate.Items)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CBOperate::TestItem_CBOperate > oitems_;
  ::CBOperate::CommonPara* ocomm_;
  ::RelaySwitchOut::SwitchPara* oswitch_;
  int outputtype_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonPara : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CBOperate.CommonPara) */ {
 public:
  CommonPara();
  virtual ~CommonPara();

  CommonPara(const CommonPara& from);

  inline CommonPara& operator=(const CommonPara& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonPara& default_instance();

  static inline const CommonPara* internal_default_instance() {
    return reinterpret_cast<const CommonPara*>(
               &_CommonPara_default_instance_);
  }

  void Swap(CommonPara* other);

  // implements Message ----------------------------------------------

  inline CommonPara* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonPara* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonPara& from);
  void MergeFrom(const CommonPara& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonPara* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float EDV = 1;
  void clear_edv();
  static const int kEDVFieldNumber = 1;
  float edv() const;
  void set_edv(float value);

  // float EDI = 2;
  void clear_edi();
  static const int kEDIFieldNumber = 2;
  float edi() const;
  void set_edi(float value);

  // float EDHZ = 3;
  void clear_edhz();
  static const int kEDHZFieldNumber = 3;
  float edhz() const;
  void set_edhz(float value);

  // float PreFaultTime = 4;
  void clear_prefaulttime();
  static const int kPreFaultTimeFieldNumber = 4;
  float prefaulttime() const;
  void set_prefaulttime(float value);

  // float PostFaultTime = 5;
  void clear_postfaulttime();
  static const int kPostFaultTimeFieldNumber = 5;
  float postfaulttime() const;
  void set_postfaulttime(float value);

  // .CBOperate.FaultTrigeMode eFaultTrigMode = 6;
  void clear_efaulttrigmode();
  static const int kEFaultTrigModeFieldNumber = 6;
  ::CBOperate::FaultTrigeMode efaulttrigmode() const;
  void set_efaulttrigmode(::CBOperate::FaultTrigeMode value);

  // .CBOperate.PTCON ePTCON = 7;
  void clear_eptcon();
  static const int kEPTCONFieldNumber = 7;
  ::CBOperate::PTCON eptcon() const;
  void set_eptcon(::CBOperate::PTCON value);

  // .CBOperate.CTPOINT eCTPOINT = 8;
  void clear_ectpoint();
  static const int kECTPOINTFieldNumber = 8;
  ::CBOperate::CTPOINT ectpoint() const;
  void set_ectpoint(::CBOperate::CTPOINT value);

  // .CBOperate.ControlMode eControlMode = 9;
  void clear_econtrolmode();
  static const int kEControlModeFieldNumber = 9;
  ::CBOperate::ControlMode econtrolmode() const;
  void set_econtrolmode(::CBOperate::ControlMode value);

  // .CBOperate.RcloseMode eRcloseMode = 10;
  void clear_erclosemode();
  static const int kERcloseModeFieldNumber = 10;
  ::CBOperate::RcloseMode erclosemode() const;
  void set_erclosemode(::CBOperate::RcloseMode value);

  // float fTripTimeSet = 11;
  void clear_ftriptimeset();
  static const int kFTripTimeSetFieldNumber = 11;
  float ftriptimeset() const;
  void set_ftriptimeset(float value);

  // float fReCloseTimeSet = 12;
  void clear_freclosetimeset();
  static const int kFReCloseTimeSetFieldNumber = 12;
  float freclosetimeset() const;
  void set_freclosetimeset(float value);

  // float fAccTripTimeSet = 13;
  void clear_facctriptimeset();
  static const int kFAccTripTimeSetFieldNumber = 13;
  float facctriptimeset() const;
  void set_facctriptimeset(float value);

  // .CBOperate.KoMode Emode = 14;
  void clear_emode();
  static const int kEmodeFieldNumber = 14;
  ::CBOperate::KoMode emode() const;
  void set_emode(::CBOperate::KoMode value);

  // float fKoOrRe = 15;
  void clear_fkoorre();
  static const int kFKoOrReFieldNumber = 15;
  float fkoorre() const;
  void set_fkoorre(float value);

  // float fPhiOrIm = 16;
  void clear_fphiorim();
  static const int kFPhiOrImFieldNumber = 16;
  float fphiorim() const;
  void set_fphiorim(float value);

  // .CBOperate.TESTMODE eTestMode = 17;
  void clear_etestmode();
  static const int kETestModeFieldNumber = 17;
  ::CBOperate::TESTMODE etestmode() const;
  void set_etestmode(::CBOperate::TESTMODE value);

  // float fZs = 18;
  void clear_fzs();
  static const int kFZsFieldNumber = 18;
  float fzs() const;
  void set_fzs(float value);

  // float fPhis = 19;
  void clear_fphis();
  static const int kFPhisFieldNumber = 19;
  float fphis() const;
  void set_fphis(float value);

  // .CBOperate.BCSIMULATION eBCSIMULATION = 20;
  void clear_ebcsimulation();
  static const int kEBCSIMULATIONFieldNumber = 20;
  ::CBOperate::BCSIMULATION ebcsimulation() const;
  void set_ebcsimulation(::CBOperate::BCSIMULATION value);

  // float fTripTime = 21;
  void clear_ftriptime();
  static const int kFTripTimeFieldNumber = 21;
  float ftriptime() const;
  void set_ftriptime(float value);

  // float fCloseTime = 22;
  void clear_fclosetime();
  static const int kFCloseTimeFieldNumber = 22;
  float fclosetime() const;
  void set_fclosetime(float value);

  // .CBOperate.RXS eRXS = 23;
  void clear_erxs();
  static const int kERXSFieldNumber = 23;
  ::CBOperate::RXS erxs() const;
  void set_erxs(::CBOperate::RXS value);

  // .CBOperate.VZDEFINE eVZDEFINE = 24;
  void clear_evzdefine();
  static const int kEVZDEFINEFieldNumber = 24;
  ::CBOperate::VZDEFINE evzdefine() const;
  void set_evzdefine(::CBOperate::VZDEFINE value);

  // .CBOperate.VZPHDEFINE eVZPHDEFINE = 25;
  void clear_evzphdefine();
  static const int kEVZPHDEFINEFieldNumber = 25;
  ::CBOperate::VZPHDEFINE evzphdefine() const;
  void set_evzphdefine(::CBOperate::VZPHDEFINE value);

  // float VzPhdiff = 26;
  void clear_vzphdiff();
  static const int kVzPhdiffFieldNumber = 26;
  float vzphdiff() const;
  void set_vzphdiff(float value);

  // float GpsTime = 27;
  void clear_gpstime();
  static const int kGpsTimeFieldNumber = 27;
  float gpstime() const;
  void set_gpstime(float value);

  // uint32 SwitchChanel = 28;
  void clear_switchchanel();
  static const int kSwitchChanelFieldNumber = 28;
  ::google::protobuf::uint32 switchchanel() const;
  void set_switchchanel(::google::protobuf::uint32 value);

  // .CBOperate.FAULTINCMODE eFAULTINCMODE = 29;
  void clear_efaultincmode();
  static const int kEFAULTINCMODEFieldNumber = 29;
  ::CBOperate::FAULTINCMODE efaultincmode() const;
  void set_efaultincmode(::CBOperate::FAULTINCMODE value);

  // float fFaltAng = 30;
  void clear_ffaltang();
  static const int kFFaltAngFieldNumber = 30;
  float ffaltang() const;
  void set_ffaltang(float value);

  // .CBOperate.DCSIM eDCSIM = 31;
  void clear_edcsim();
  static const int kEDCSIMFieldNumber = 31;
  ::CBOperate::DCSIM edcsim() const;
  void set_edcsim(::CBOperate::DCSIM value);

  // @@protoc_insertion_point(class_scope:CBOperate.CommonPara)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float edv_;
  float edi_;
  float edhz_;
  float prefaulttime_;
  float postfaulttime_;
  int efaulttrigmode_;
  int eptcon_;
  int ectpoint_;
  int econtrolmode_;
  int erclosemode_;
  float ftriptimeset_;
  float freclosetimeset_;
  float facctriptimeset_;
  int emode_;
  float fkoorre_;
  float fphiorim_;
  int etestmode_;
  float fzs_;
  float fphis_;
  int ebcsimulation_;
  float ftriptime_;
  float fclosetime_;
  int erxs_;
  int evzdefine_;
  int evzphdefine_;
  float vzphdiff_;
  float gpstime_;
  ::google::protobuf::uint32 switchchanel_;
  int efaultincmode_;
  float ffaltang_;
  int edcsim_;
  mutable int _cached_size_;
  friend struct  protobuf_CBOperate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// chanel

// float famptitude = 1;
inline void chanel::clear_famptitude() {
  famptitude_ = 0;
}
inline float chanel::famptitude() const {
  // @@protoc_insertion_point(field_get:CBOperate.chanel.famptitude)
  return famptitude_;
}
inline void chanel::set_famptitude(float value) {
  
  famptitude_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.chanel.famptitude)
}

// float fphase = 2;
inline void chanel::clear_fphase() {
  fphase_ = 0;
}
inline float chanel::fphase() const {
  // @@protoc_insertion_point(field_get:CBOperate.chanel.fphase)
  return fphase_;
}
inline void chanel::set_fphase(float value) {
  
  fphase_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.chanel.fphase)
}

// -------------------------------------------------------------------

// BasicResultItem

// .CBOperate.chanel Va = 1;
inline bool BasicResultItem::has_va() const {
  return this != internal_default_instance() && va_ != NULL;
}
inline void BasicResultItem::clear_va() {
  if (GetArenaNoVirtual() == NULL && va_ != NULL) delete va_;
  va_ = NULL;
}
inline const ::CBOperate::chanel& BasicResultItem::va() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Va)
  return va_ != NULL ? *va_
                         : *::CBOperate::chanel::internal_default_instance();
}
inline ::CBOperate::chanel* BasicResultItem::mutable_va() {
  
  if (va_ == NULL) {
    va_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Va)
  return va_;
}
inline ::CBOperate::chanel* BasicResultItem::release_va() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Va)
  
  ::CBOperate::chanel* temp = va_;
  va_ = NULL;
  return temp;
}
inline void BasicResultItem::set_allocated_va(::CBOperate::chanel* va) {
  delete va_;
  va_ = va;
  if (va) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Va)
}

// .CBOperate.chanel Vb = 2;
inline bool BasicResultItem::has_vb() const {
  return this != internal_default_instance() && vb_ != NULL;
}
inline void BasicResultItem::clear_vb() {
  if (GetArenaNoVirtual() == NULL && vb_ != NULL) delete vb_;
  vb_ = NULL;
}
inline const ::CBOperate::chanel& BasicResultItem::vb() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Vb)
  return vb_ != NULL ? *vb_
                         : *::CBOperate::chanel::internal_default_instance();
}
inline ::CBOperate::chanel* BasicResultItem::mutable_vb() {
  
  if (vb_ == NULL) {
    vb_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Vb)
  return vb_;
}
inline ::CBOperate::chanel* BasicResultItem::release_vb() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Vb)
  
  ::CBOperate::chanel* temp = vb_;
  vb_ = NULL;
  return temp;
}
inline void BasicResultItem::set_allocated_vb(::CBOperate::chanel* vb) {
  delete vb_;
  vb_ = vb;
  if (vb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Vb)
}

// .CBOperate.chanel Vc = 3;
inline bool BasicResultItem::has_vc() const {
  return this != internal_default_instance() && vc_ != NULL;
}
inline void BasicResultItem::clear_vc() {
  if (GetArenaNoVirtual() == NULL && vc_ != NULL) delete vc_;
  vc_ = NULL;
}
inline const ::CBOperate::chanel& BasicResultItem::vc() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Vc)
  return vc_ != NULL ? *vc_
                         : *::CBOperate::chanel::internal_default_instance();
}
inline ::CBOperate::chanel* BasicResultItem::mutable_vc() {
  
  if (vc_ == NULL) {
    vc_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Vc)
  return vc_;
}
inline ::CBOperate::chanel* BasicResultItem::release_vc() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Vc)
  
  ::CBOperate::chanel* temp = vc_;
  vc_ = NULL;
  return temp;
}
inline void BasicResultItem::set_allocated_vc(::CBOperate::chanel* vc) {
  delete vc_;
  vc_ = vc;
  if (vc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Vc)
}

// .CBOperate.chanel Ia = 4;
inline bool BasicResultItem::has_ia() const {
  return this != internal_default_instance() && ia_ != NULL;
}
inline void BasicResultItem::clear_ia() {
  if (GetArenaNoVirtual() == NULL && ia_ != NULL) delete ia_;
  ia_ = NULL;
}
inline const ::CBOperate::chanel& BasicResultItem::ia() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Ia)
  return ia_ != NULL ? *ia_
                         : *::CBOperate::chanel::internal_default_instance();
}
inline ::CBOperate::chanel* BasicResultItem::mutable_ia() {
  
  if (ia_ == NULL) {
    ia_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Ia)
  return ia_;
}
inline ::CBOperate::chanel* BasicResultItem::release_ia() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Ia)
  
  ::CBOperate::chanel* temp = ia_;
  ia_ = NULL;
  return temp;
}
inline void BasicResultItem::set_allocated_ia(::CBOperate::chanel* ia) {
  delete ia_;
  ia_ = ia;
  if (ia) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Ia)
}

// .CBOperate.chanel Ib = 5;
inline bool BasicResultItem::has_ib() const {
  return this != internal_default_instance() && ib_ != NULL;
}
inline void BasicResultItem::clear_ib() {
  if (GetArenaNoVirtual() == NULL && ib_ != NULL) delete ib_;
  ib_ = NULL;
}
inline const ::CBOperate::chanel& BasicResultItem::ib() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Ib)
  return ib_ != NULL ? *ib_
                         : *::CBOperate::chanel::internal_default_instance();
}
inline ::CBOperate::chanel* BasicResultItem::mutable_ib() {
  
  if (ib_ == NULL) {
    ib_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Ib)
  return ib_;
}
inline ::CBOperate::chanel* BasicResultItem::release_ib() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Ib)
  
  ::CBOperate::chanel* temp = ib_;
  ib_ = NULL;
  return temp;
}
inline void BasicResultItem::set_allocated_ib(::CBOperate::chanel* ib) {
  delete ib_;
  ib_ = ib;
  if (ib) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Ib)
}

// .CBOperate.chanel Ic = 6;
inline bool BasicResultItem::has_ic() const {
  return this != internal_default_instance() && ic_ != NULL;
}
inline void BasicResultItem::clear_ic() {
  if (GetArenaNoVirtual() == NULL && ic_ != NULL) delete ic_;
  ic_ = NULL;
}
inline const ::CBOperate::chanel& BasicResultItem::ic() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Ic)
  return ic_ != NULL ? *ic_
                         : *::CBOperate::chanel::internal_default_instance();
}
inline ::CBOperate::chanel* BasicResultItem::mutable_ic() {
  
  if (ic_ == NULL) {
    ic_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Ic)
  return ic_;
}
inline ::CBOperate::chanel* BasicResultItem::release_ic() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Ic)
  
  ::CBOperate::chanel* temp = ic_;
  ic_ = NULL;
  return temp;
}
inline void BasicResultItem::set_allocated_ic(::CBOperate::chanel* ic) {
  delete ic_;
  ic_ = ic;
  if (ic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Ic)
}

// -------------------------------------------------------------------

// TestItem_CBOperate

// uint32 iIndex = 1;
inline void TestItem_CBOperate::clear_iindex() {
  iindex_ = 0u;
}
inline ::google::protobuf::uint32 TestItem_CBOperate::iindex() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.iIndex)
  return iindex_;
}
inline void TestItem_CBOperate::set_iindex(::google::protobuf::uint32 value) {
  
  iindex_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.iIndex)
}

// .CBOperate.Error_type errortype = 2;
inline void TestItem_CBOperate::clear_errortype() {
  errortype_ = 0;
}
inline ::CBOperate::Error_type TestItem_CBOperate::errortype() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.errortype)
  return static_cast< ::CBOperate::Error_type >(errortype_);
}
inline void TestItem_CBOperate::set_errortype(::CBOperate::Error_type value) {
  
  errortype_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.errortype)
}

// float fdl_zk = 3;
inline void TestItem_CBOperate::clear_fdl_zk() {
  fdl_zk_ = 0;
}
inline float TestItem_CBOperate::fdl_zk() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fdl_zk)
  return fdl_zk_;
}
inline void TestItem_CBOperate::set_fdl_zk(float value) {
  
  fdl_zk_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fdl_zk)
}

// float fZK_Angle = 4;
inline void TestItem_CBOperate::clear_fzk_angle() {
  fzk_angle_ = 0;
}
inline float TestItem_CBOperate::fzk_angle() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fZK_Angle)
  return fzk_angle_;
}
inline void TestItem_CBOperate::set_fzk_angle(float value) {
  
  fzk_angle_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fZK_Angle)
}

// float fR = 5;
inline void TestItem_CBOperate::clear_fr() {
  fr_ = 0;
}
inline float TestItem_CBOperate::fr() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fR)
  return fr_;
}
inline void TestItem_CBOperate::set_fr(float value) {
  
  fr_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fR)
}

// float fX = 6;
inline void TestItem_CBOperate::clear_fx() {
  fx_ = 0;
}
inline float TestItem_CBOperate::fx() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fX)
  return fx_;
}
inline void TestItem_CBOperate::set_fx(float value) {
  
  fx_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fX)
}

// float fDL_I = 7;
inline void TestItem_CBOperate::clear_fdl_i() {
  fdl_i_ = 0;
}
inline float TestItem_CBOperate::fdl_i() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fDL_I)
  return fdl_i_;
}
inline void TestItem_CBOperate::set_fdl_i(float value) {
  
  fdl_i_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fDL_I)
}

// float fDL_V = 8;
inline void TestItem_CBOperate::clear_fdl_v() {
  fdl_v_ = 0;
}
inline float TestItem_CBOperate::fdl_v() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fDL_V)
  return fdl_v_;
}
inline void TestItem_CBOperate::set_fdl_v(float value) {
  
  fdl_v_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fDL_V)
}

// .CBOperate.Error_Dirc dirc = 9;
inline void TestItem_CBOperate::clear_dirc() {
  dirc_ = 0;
}
inline ::CBOperate::Error_Dirc TestItem_CBOperate::dirc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.dirc)
  return static_cast< ::CBOperate::Error_Dirc >(dirc_);
}
inline void TestItem_CBOperate::set_dirc(::CBOperate::Error_Dirc value) {
  
  dirc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.dirc)
}

// .CBOperate.Error_Nature nature = 10;
inline void TestItem_CBOperate::clear_nature() {
  nature_ = 0;
}
inline ::CBOperate::Error_Nature TestItem_CBOperate::nature() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.nature)
  return static_cast< ::CBOperate::Error_Nature >(nature_);
}
inline void TestItem_CBOperate::set_nature(::CBOperate::Error_Nature value) {
  
  nature_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.nature)
}

// float fMaxErrorTime = 11;
inline void TestItem_CBOperate::clear_fmaxerrortime() {
  fmaxerrortime_ = 0;
}
inline float TestItem_CBOperate::fmaxerrortime() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fMaxErrorTime)
  return fmaxerrortime_;
}
inline void TestItem_CBOperate::set_fmaxerrortime(float value) {
  
  fmaxerrortime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fMaxErrorTime)
}

// float fLoad_I = 12;
inline void TestItem_CBOperate::clear_fload_i() {
  fload_i_ = 0;
}
inline float TestItem_CBOperate::fload_i() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fLoad_I)
  return fload_i_;
}
inline void TestItem_CBOperate::set_fload_i(float value) {
  
  fload_i_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fLoad_I)
}

// float fLoad_Ang = 13;
inline void TestItem_CBOperate::clear_fload_ang() {
  fload_ang_ = 0;
}
inline float TestItem_CBOperate::fload_ang() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fLoad_Ang)
  return fload_ang_;
}
inline void TestItem_CBOperate::set_fload_ang(float value) {
  
  fload_ang_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fLoad_Ang)
}

// uint32 iTransSwitch = 14;
inline void TestItem_CBOperate::clear_itransswitch() {
  itransswitch_ = 0u;
}
inline ::google::protobuf::uint32 TestItem_CBOperate::itransswitch() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.iTransSwitch)
  return itransswitch_;
}
inline void TestItem_CBOperate::set_itransswitch(::google::protobuf::uint32 value) {
  
  itransswitch_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.iTransSwitch)
}

// .CBOperate.TransFaltState oTransFaltState = 15;
inline bool TestItem_CBOperate::has_otransfaltstate() const {
  return this != internal_default_instance() && otransfaltstate_ != NULL;
}
inline void TestItem_CBOperate::clear_otransfaltstate() {
  if (GetArenaNoVirtual() == NULL && otransfaltstate_ != NULL) delete otransfaltstate_;
  otransfaltstate_ = NULL;
}
inline const ::CBOperate::TransFaltState& TestItem_CBOperate::otransfaltstate() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.oTransFaltState)
  return otransfaltstate_ != NULL ? *otransfaltstate_
                         : *::CBOperate::TransFaltState::internal_default_instance();
}
inline ::CBOperate::TransFaltState* TestItem_CBOperate::mutable_otransfaltstate() {
  
  if (otransfaltstate_ == NULL) {
    otransfaltstate_ = new ::CBOperate::TransFaltState;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.TestItem_CBOperate.oTransFaltState)
  return otransfaltstate_;
}
inline ::CBOperate::TransFaltState* TestItem_CBOperate::release_otransfaltstate() {
  // @@protoc_insertion_point(field_release:CBOperate.TestItem_CBOperate.oTransFaltState)
  
  ::CBOperate::TransFaltState* temp = otransfaltstate_;
  otransfaltstate_ = NULL;
  return temp;
}
inline void TestItem_CBOperate::set_allocated_otransfaltstate(::CBOperate::TransFaltState* otransfaltstate) {
  delete otransfaltstate_;
  otransfaltstate_ = otransfaltstate;
  if (otransfaltstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.TestItem_CBOperate.oTransFaltState)
}

// .hqyGoose_Pub_Setting.Goose_Publish GooseChanged = 16;
inline bool TestItem_CBOperate::has_goosechanged() const {
  return this != internal_default_instance() && goosechanged_ != NULL;
}
inline void TestItem_CBOperate::clear_goosechanged() {
  if (GetArenaNoVirtual() == NULL && goosechanged_ != NULL) delete goosechanged_;
  goosechanged_ = NULL;
}
inline const ::hqyGoose_Pub_Setting::Goose_Publish& TestItem_CBOperate::goosechanged() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.GooseChanged)
  return goosechanged_ != NULL ? *goosechanged_
                         : *::hqyGoose_Pub_Setting::Goose_Publish::internal_default_instance();
}
inline ::hqyGoose_Pub_Setting::Goose_Publish* TestItem_CBOperate::mutable_goosechanged() {
  
  if (goosechanged_ == NULL) {
    goosechanged_ = new ::hqyGoose_Pub_Setting::Goose_Publish;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.TestItem_CBOperate.GooseChanged)
  return goosechanged_;
}
inline ::hqyGoose_Pub_Setting::Goose_Publish* TestItem_CBOperate::release_goosechanged() {
  // @@protoc_insertion_point(field_release:CBOperate.TestItem_CBOperate.GooseChanged)
  
  ::hqyGoose_Pub_Setting::Goose_Publish* temp = goosechanged_;
  goosechanged_ = NULL;
  return temp;
}
inline void TestItem_CBOperate::set_allocated_goosechanged(::hqyGoose_Pub_Setting::Goose_Publish* goosechanged) {
  delete goosechanged_;
  goosechanged_ = goosechanged;
  if (goosechanged) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.TestItem_CBOperate.GooseChanged)
}

// -------------------------------------------------------------------

// TransFaltState

// .CBOperate.Error_type errortype = 1;
inline void TransFaltState::clear_errortype() {
  errortype_ = 0;
}
inline ::CBOperate::Error_type TransFaltState::errortype() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.errortype)
  return static_cast< ::CBOperate::Error_type >(errortype_);
}
inline void TransFaltState::set_errortype(::CBOperate::Error_type value) {
  
  errortype_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.errortype)
}

// float fTansTime = 2;
inline void TransFaltState::clear_ftanstime() {
  ftanstime_ = 0;
}
inline float TransFaltState::ftanstime() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fTansTime)
  return ftanstime_;
}
inline void TransFaltState::set_ftanstime(float value) {
  
  ftanstime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fTansTime)
}

// float fdl_zk = 3;
inline void TransFaltState::clear_fdl_zk() {
  fdl_zk_ = 0;
}
inline float TransFaltState::fdl_zk() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fdl_zk)
  return fdl_zk_;
}
inline void TransFaltState::set_fdl_zk(float value) {
  
  fdl_zk_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fdl_zk)
}

// float fZK_Angle = 4;
inline void TransFaltState::clear_fzk_angle() {
  fzk_angle_ = 0;
}
inline float TransFaltState::fzk_angle() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fZK_Angle)
  return fzk_angle_;
}
inline void TransFaltState::set_fzk_angle(float value) {
  
  fzk_angle_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fZK_Angle)
}

// float fDL_I = 7;
inline void TransFaltState::clear_fdl_i() {
  fdl_i_ = 0;
}
inline float TransFaltState::fdl_i() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fDL_I)
  return fdl_i_;
}
inline void TransFaltState::set_fdl_i(float value) {
  
  fdl_i_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fDL_I)
}

// float fDL_V = 8;
inline void TransFaltState::clear_fdl_v() {
  fdl_v_ = 0;
}
inline float TransFaltState::fdl_v() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fDL_V)
  return fdl_v_;
}
inline void TransFaltState::set_fdl_v(float value) {
  
  fdl_v_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fDL_V)
}

// .CBOperate.Error_Dirc dirc = 9;
inline void TransFaltState::clear_dirc() {
  dirc_ = 0;
}
inline ::CBOperate::Error_Dirc TransFaltState::dirc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.dirc)
  return static_cast< ::CBOperate::Error_Dirc >(dirc_);
}
inline void TransFaltState::set_dirc(::CBOperate::Error_Dirc value) {
  
  dirc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.dirc)
}

// -------------------------------------------------------------------

// TestItem_CBOperate_Result

// uint32 iIndex = 1;
inline void TestItem_CBOperate_Result::clear_iindex() {
  iindex_ = 0u;
}
inline ::google::protobuf::uint32 TestItem_CBOperate_Result::iindex() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.iIndex)
  return iindex_;
}
inline void TestItem_CBOperate_Result::set_iindex(::google::protobuf::uint32 value) {
  
  iindex_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.iIndex)
}

// float fta = 2;
inline void TestItem_CBOperate_Result::clear_fta() {
  fta_ = 0;
}
inline float TestItem_CBOperate_Result::fta() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.fta)
  return fta_;
}
inline void TestItem_CBOperate_Result::set_fta(float value) {
  
  fta_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.fta)
}

// float ftb = 3;
inline void TestItem_CBOperate_Result::clear_ftb() {
  ftb_ = 0;
}
inline float TestItem_CBOperate_Result::ftb() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.ftb)
  return ftb_;
}
inline void TestItem_CBOperate_Result::set_ftb(float value) {
  
  ftb_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.ftb)
}

// float ftc = 4;
inline void TestItem_CBOperate_Result::clear_ftc() {
  ftc_ = 0;
}
inline float TestItem_CBOperate_Result::ftc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.ftc)
  return ftc_;
}
inline void TestItem_CBOperate_Result::set_ftc(float value) {
  
  ftc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.ftc)
}

// float fchz = 5;
inline void TestItem_CBOperate_Result::clear_fchz() {
  fchz_ = 0;
}
inline float TestItem_CBOperate_Result::fchz() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.fchz)
  return fchz_;
}
inline void TestItem_CBOperate_Result::set_fchz(float value) {
  
  fchz_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.fchz)
}

// float fhjs = 6;
inline void TestItem_CBOperate_Result::clear_fhjs() {
  fhjs_ = 0;
}
inline float TestItem_CBOperate_Result::fhjs() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.fhjs)
  return fhjs_;
}
inline void TestItem_CBOperate_Result::set_fhjs(float value) {
  
  fhjs_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.fhjs)
}

// float frta = 7;
inline void TestItem_CBOperate_Result::clear_frta() {
  frta_ = 0;
}
inline float TestItem_CBOperate_Result::frta() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frta)
  return frta_;
}
inline void TestItem_CBOperate_Result::set_frta(float value) {
  
  frta_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frta)
}

// float frtb = 8;
inline void TestItem_CBOperate_Result::clear_frtb() {
  frtb_ = 0;
}
inline float TestItem_CBOperate_Result::frtb() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frtb)
  return frtb_;
}
inline void TestItem_CBOperate_Result::set_frtb(float value) {
  
  frtb_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frtb)
}

// float frtc = 9;
inline void TestItem_CBOperate_Result::clear_frtc() {
  frtc_ = 0;
}
inline float TestItem_CBOperate_Result::frtc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frtc)
  return frtc_;
}
inline void TestItem_CBOperate_Result::set_frtc(float value) {
  
  frtc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frtc)
}

// float frtd = 10;
inline void TestItem_CBOperate_Result::clear_frtd() {
  frtd_ = 0;
}
inline float TestItem_CBOperate_Result::frtd() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frtd)
  return frtd_;
}
inline void TestItem_CBOperate_Result::set_frtd(float value) {
  
  frtd_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frtd)
}

// -------------------------------------------------------------------

// TestItem_CBOperate_Switch_State

// uint32 nibinstate = 1;
inline void TestItem_CBOperate_Switch_State::clear_nibinstate() {
  nibinstate_ = 0u;
}
inline ::google::protobuf::uint32 TestItem_CBOperate_Switch_State::nibinstate() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Switch_State.nibinstate)
  return nibinstate_;
}
inline void TestItem_CBOperate_Switch_State::set_nibinstate(::google::protobuf::uint32 value) {
  
  nibinstate_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Switch_State.nibinstate)
}

// -------------------------------------------------------------------

// Items

// .CBOperate.CommonPara oComm = 1;
inline bool Items::has_ocomm() const {
  return this != internal_default_instance() && ocomm_ != NULL;
}
inline void Items::clear_ocomm() {
  if (GetArenaNoVirtual() == NULL && ocomm_ != NULL) delete ocomm_;
  ocomm_ = NULL;
}
inline const ::CBOperate::CommonPara& Items::ocomm() const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.oComm)
  return ocomm_ != NULL ? *ocomm_
                         : *::CBOperate::CommonPara::internal_default_instance();
}
inline ::CBOperate::CommonPara* Items::mutable_ocomm() {
  
  if (ocomm_ == NULL) {
    ocomm_ = new ::CBOperate::CommonPara;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.Items.oComm)
  return ocomm_;
}
inline ::CBOperate::CommonPara* Items::release_ocomm() {
  // @@protoc_insertion_point(field_release:CBOperate.Items.oComm)
  
  ::CBOperate::CommonPara* temp = ocomm_;
  ocomm_ = NULL;
  return temp;
}
inline void Items::set_allocated_ocomm(::CBOperate::CommonPara* ocomm) {
  delete ocomm_;
  ocomm_ = ocomm;
  if (ocomm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.Items.oComm)
}

// .RelaySwitchOut.SwitchPara oSwitch = 2;
inline bool Items::has_oswitch() const {
  return this != internal_default_instance() && oswitch_ != NULL;
}
inline void Items::clear_oswitch() {
  if (GetArenaNoVirtual() == NULL && oswitch_ != NULL) delete oswitch_;
  oswitch_ = NULL;
}
inline const ::RelaySwitchOut::SwitchPara& Items::oswitch() const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.oSwitch)
  return oswitch_ != NULL ? *oswitch_
                         : *::RelaySwitchOut::SwitchPara::internal_default_instance();
}
inline ::RelaySwitchOut::SwitchPara* Items::mutable_oswitch() {
  
  if (oswitch_ == NULL) {
    oswitch_ = new ::RelaySwitchOut::SwitchPara;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.Items.oSwitch)
  return oswitch_;
}
inline ::RelaySwitchOut::SwitchPara* Items::release_oswitch() {
  // @@protoc_insertion_point(field_release:CBOperate.Items.oSwitch)
  
  ::RelaySwitchOut::SwitchPara* temp = oswitch_;
  oswitch_ = NULL;
  return temp;
}
inline void Items::set_allocated_oswitch(::RelaySwitchOut::SwitchPara* oswitch) {
  delete oswitch_;
  oswitch_ = oswitch;
  if (oswitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.Items.oSwitch)
}

// repeated .CBOperate.TestItem_CBOperate oItems = 3;
inline int Items::oitems_size() const {
  return oitems_.size();
}
inline void Items::clear_oitems() {
  oitems_.Clear();
}
inline const ::CBOperate::TestItem_CBOperate& Items::oitems(int index) const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.oItems)
  return oitems_.Get(index);
}
inline ::CBOperate::TestItem_CBOperate* Items::mutable_oitems(int index) {
  // @@protoc_insertion_point(field_mutable:CBOperate.Items.oItems)
  return oitems_.Mutable(index);
}
inline ::CBOperate::TestItem_CBOperate* Items::add_oitems() {
  // @@protoc_insertion_point(field_add:CBOperate.Items.oItems)
  return oitems_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CBOperate::TestItem_CBOperate >*
Items::mutable_oitems() {
  // @@protoc_insertion_point(field_mutable_list:CBOperate.Items.oItems)
  return &oitems_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CBOperate::TestItem_CBOperate >&
Items::oitems() const {
  // @@protoc_insertion_point(field_list:CBOperate.Items.oItems)
  return oitems_;
}

// .CBOperate.OutPutType outputType = 4;
inline void Items::clear_outputtype() {
  outputtype_ = 0;
}
inline ::CBOperate::OutPutType Items::outputtype() const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.outputType)
  return static_cast< ::CBOperate::OutPutType >(outputtype_);
}
inline void Items::set_outputtype(::CBOperate::OutPutType value) {
  
  outputtype_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.Items.outputType)
}

// -------------------------------------------------------------------

// CommonPara

// float EDV = 1;
inline void CommonPara::clear_edv() {
  edv_ = 0;
}
inline float CommonPara::edv() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.EDV)
  return edv_;
}
inline void CommonPara::set_edv(float value) {
  
  edv_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.EDV)
}

// float EDI = 2;
inline void CommonPara::clear_edi() {
  edi_ = 0;
}
inline float CommonPara::edi() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.EDI)
  return edi_;
}
inline void CommonPara::set_edi(float value) {
  
  edi_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.EDI)
}

// float EDHZ = 3;
inline void CommonPara::clear_edhz() {
  edhz_ = 0;
}
inline float CommonPara::edhz() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.EDHZ)
  return edhz_;
}
inline void CommonPara::set_edhz(float value) {
  
  edhz_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.EDHZ)
}

// float PreFaultTime = 4;
inline void CommonPara::clear_prefaulttime() {
  prefaulttime_ = 0;
}
inline float CommonPara::prefaulttime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.PreFaultTime)
  return prefaulttime_;
}
inline void CommonPara::set_prefaulttime(float value) {
  
  prefaulttime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.PreFaultTime)
}

// float PostFaultTime = 5;
inline void CommonPara::clear_postfaulttime() {
  postfaulttime_ = 0;
}
inline float CommonPara::postfaulttime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.PostFaultTime)
  return postfaulttime_;
}
inline void CommonPara::set_postfaulttime(float value) {
  
  postfaulttime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.PostFaultTime)
}

// .CBOperate.FaultTrigeMode eFaultTrigMode = 6;
inline void CommonPara::clear_efaulttrigmode() {
  efaulttrigmode_ = 0;
}
inline ::CBOperate::FaultTrigeMode CommonPara::efaulttrigmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eFaultTrigMode)
  return static_cast< ::CBOperate::FaultTrigeMode >(efaulttrigmode_);
}
inline void CommonPara::set_efaulttrigmode(::CBOperate::FaultTrigeMode value) {
  
  efaulttrigmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eFaultTrigMode)
}

// .CBOperate.PTCON ePTCON = 7;
inline void CommonPara::clear_eptcon() {
  eptcon_ = 0;
}
inline ::CBOperate::PTCON CommonPara::eptcon() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.ePTCON)
  return static_cast< ::CBOperate::PTCON >(eptcon_);
}
inline void CommonPara::set_eptcon(::CBOperate::PTCON value) {
  
  eptcon_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.ePTCON)
}

// .CBOperate.CTPOINT eCTPOINT = 8;
inline void CommonPara::clear_ectpoint() {
  ectpoint_ = 0;
}
inline ::CBOperate::CTPOINT CommonPara::ectpoint() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eCTPOINT)
  return static_cast< ::CBOperate::CTPOINT >(ectpoint_);
}
inline void CommonPara::set_ectpoint(::CBOperate::CTPOINT value) {
  
  ectpoint_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eCTPOINT)
}

// .CBOperate.ControlMode eControlMode = 9;
inline void CommonPara::clear_econtrolmode() {
  econtrolmode_ = 0;
}
inline ::CBOperate::ControlMode CommonPara::econtrolmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eControlMode)
  return static_cast< ::CBOperate::ControlMode >(econtrolmode_);
}
inline void CommonPara::set_econtrolmode(::CBOperate::ControlMode value) {
  
  econtrolmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eControlMode)
}

// .CBOperate.RcloseMode eRcloseMode = 10;
inline void CommonPara::clear_erclosemode() {
  erclosemode_ = 0;
}
inline ::CBOperate::RcloseMode CommonPara::erclosemode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eRcloseMode)
  return static_cast< ::CBOperate::RcloseMode >(erclosemode_);
}
inline void CommonPara::set_erclosemode(::CBOperate::RcloseMode value) {
  
  erclosemode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eRcloseMode)
}

// float fTripTimeSet = 11;
inline void CommonPara::clear_ftriptimeset() {
  ftriptimeset_ = 0;
}
inline float CommonPara::ftriptimeset() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fTripTimeSet)
  return ftriptimeset_;
}
inline void CommonPara::set_ftriptimeset(float value) {
  
  ftriptimeset_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fTripTimeSet)
}

// float fReCloseTimeSet = 12;
inline void CommonPara::clear_freclosetimeset() {
  freclosetimeset_ = 0;
}
inline float CommonPara::freclosetimeset() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fReCloseTimeSet)
  return freclosetimeset_;
}
inline void CommonPara::set_freclosetimeset(float value) {
  
  freclosetimeset_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fReCloseTimeSet)
}

// float fAccTripTimeSet = 13;
inline void CommonPara::clear_facctriptimeset() {
  facctriptimeset_ = 0;
}
inline float CommonPara::facctriptimeset() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fAccTripTimeSet)
  return facctriptimeset_;
}
inline void CommonPara::set_facctriptimeset(float value) {
  
  facctriptimeset_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fAccTripTimeSet)
}

// .CBOperate.KoMode Emode = 14;
inline void CommonPara::clear_emode() {
  emode_ = 0;
}
inline ::CBOperate::KoMode CommonPara::emode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.Emode)
  return static_cast< ::CBOperate::KoMode >(emode_);
}
inline void CommonPara::set_emode(::CBOperate::KoMode value) {
  
  emode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.Emode)
}

// float fKoOrRe = 15;
inline void CommonPara::clear_fkoorre() {
  fkoorre_ = 0;
}
inline float CommonPara::fkoorre() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fKoOrRe)
  return fkoorre_;
}
inline void CommonPara::set_fkoorre(float value) {
  
  fkoorre_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fKoOrRe)
}

// float fPhiOrIm = 16;
inline void CommonPara::clear_fphiorim() {
  fphiorim_ = 0;
}
inline float CommonPara::fphiorim() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fPhiOrIm)
  return fphiorim_;
}
inline void CommonPara::set_fphiorim(float value) {
  
  fphiorim_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fPhiOrIm)
}

// .CBOperate.TESTMODE eTestMode = 17;
inline void CommonPara::clear_etestmode() {
  etestmode_ = 0;
}
inline ::CBOperate::TESTMODE CommonPara::etestmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eTestMode)
  return static_cast< ::CBOperate::TESTMODE >(etestmode_);
}
inline void CommonPara::set_etestmode(::CBOperate::TESTMODE value) {
  
  etestmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eTestMode)
}

// float fZs = 18;
inline void CommonPara::clear_fzs() {
  fzs_ = 0;
}
inline float CommonPara::fzs() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fZs)
  return fzs_;
}
inline void CommonPara::set_fzs(float value) {
  
  fzs_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fZs)
}

// float fPhis = 19;
inline void CommonPara::clear_fphis() {
  fphis_ = 0;
}
inline float CommonPara::fphis() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fPhis)
  return fphis_;
}
inline void CommonPara::set_fphis(float value) {
  
  fphis_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fPhis)
}

// .CBOperate.BCSIMULATION eBCSIMULATION = 20;
inline void CommonPara::clear_ebcsimulation() {
  ebcsimulation_ = 0;
}
inline ::CBOperate::BCSIMULATION CommonPara::ebcsimulation() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eBCSIMULATION)
  return static_cast< ::CBOperate::BCSIMULATION >(ebcsimulation_);
}
inline void CommonPara::set_ebcsimulation(::CBOperate::BCSIMULATION value) {
  
  ebcsimulation_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eBCSIMULATION)
}

// float fTripTime = 21;
inline void CommonPara::clear_ftriptime() {
  ftriptime_ = 0;
}
inline float CommonPara::ftriptime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fTripTime)
  return ftriptime_;
}
inline void CommonPara::set_ftriptime(float value) {
  
  ftriptime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fTripTime)
}

// float fCloseTime = 22;
inline void CommonPara::clear_fclosetime() {
  fclosetime_ = 0;
}
inline float CommonPara::fclosetime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fCloseTime)
  return fclosetime_;
}
inline void CommonPara::set_fclosetime(float value) {
  
  fclosetime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fCloseTime)
}

// .CBOperate.RXS eRXS = 23;
inline void CommonPara::clear_erxs() {
  erxs_ = 0;
}
inline ::CBOperate::RXS CommonPara::erxs() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eRXS)
  return static_cast< ::CBOperate::RXS >(erxs_);
}
inline void CommonPara::set_erxs(::CBOperate::RXS value) {
  
  erxs_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eRXS)
}

// .CBOperate.VZDEFINE eVZDEFINE = 24;
inline void CommonPara::clear_evzdefine() {
  evzdefine_ = 0;
}
inline ::CBOperate::VZDEFINE CommonPara::evzdefine() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eVZDEFINE)
  return static_cast< ::CBOperate::VZDEFINE >(evzdefine_);
}
inline void CommonPara::set_evzdefine(::CBOperate::VZDEFINE value) {
  
  evzdefine_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eVZDEFINE)
}

// .CBOperate.VZPHDEFINE eVZPHDEFINE = 25;
inline void CommonPara::clear_evzphdefine() {
  evzphdefine_ = 0;
}
inline ::CBOperate::VZPHDEFINE CommonPara::evzphdefine() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eVZPHDEFINE)
  return static_cast< ::CBOperate::VZPHDEFINE >(evzphdefine_);
}
inline void CommonPara::set_evzphdefine(::CBOperate::VZPHDEFINE value) {
  
  evzphdefine_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eVZPHDEFINE)
}

// float VzPhdiff = 26;
inline void CommonPara::clear_vzphdiff() {
  vzphdiff_ = 0;
}
inline float CommonPara::vzphdiff() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.VzPhdiff)
  return vzphdiff_;
}
inline void CommonPara::set_vzphdiff(float value) {
  
  vzphdiff_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.VzPhdiff)
}

// float GpsTime = 27;
inline void CommonPara::clear_gpstime() {
  gpstime_ = 0;
}
inline float CommonPara::gpstime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.GpsTime)
  return gpstime_;
}
inline void CommonPara::set_gpstime(float value) {
  
  gpstime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.GpsTime)
}

// uint32 SwitchChanel = 28;
inline void CommonPara::clear_switchchanel() {
  switchchanel_ = 0u;
}
inline ::google::protobuf::uint32 CommonPara::switchchanel() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.SwitchChanel)
  return switchchanel_;
}
inline void CommonPara::set_switchchanel(::google::protobuf::uint32 value) {
  
  switchchanel_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.SwitchChanel)
}

// .CBOperate.FAULTINCMODE eFAULTINCMODE = 29;
inline void CommonPara::clear_efaultincmode() {
  efaultincmode_ = 0;
}
inline ::CBOperate::FAULTINCMODE CommonPara::efaultincmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eFAULTINCMODE)
  return static_cast< ::CBOperate::FAULTINCMODE >(efaultincmode_);
}
inline void CommonPara::set_efaultincmode(::CBOperate::FAULTINCMODE value) {
  
  efaultincmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eFAULTINCMODE)
}

// float fFaltAng = 30;
inline void CommonPara::clear_ffaltang() {
  ffaltang_ = 0;
}
inline float CommonPara::ffaltang() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fFaltAng)
  return ffaltang_;
}
inline void CommonPara::set_ffaltang(float value) {
  
  ffaltang_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fFaltAng)
}

// .CBOperate.DCSIM eDCSIM = 31;
inline void CommonPara::clear_edcsim() {
  edcsim_ = 0;
}
inline ::CBOperate::DCSIM CommonPara::edcsim() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eDCSIM)
  return static_cast< ::CBOperate::DCSIM >(edcsim_);
}
inline void CommonPara::set_edcsim(::CBOperate::DCSIM value) {
  
  edcsim_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eDCSIM)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace CBOperate

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CBOperate::Error_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::Error_type>() {
  return ::CBOperate::Error_type_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::Error_Dirc> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::Error_Dirc>() {
  return ::CBOperate::Error_Dirc_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::OutPutType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::OutPutType>() {
  return ::CBOperate::OutPutType_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::Error_Nature> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::Error_Nature>() {
  return ::CBOperate::Error_Nature_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::KoMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::KoMode>() {
  return ::CBOperate::KoMode_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::FaultTrigeMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::FaultTrigeMode>() {
  return ::CBOperate::FaultTrigeMode_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::PTCON> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::PTCON>() {
  return ::CBOperate::PTCON_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::CTPOINT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::CTPOINT>() {
  return ::CBOperate::CTPOINT_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::RcloseMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::RcloseMode>() {
  return ::CBOperate::RcloseMode_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::ControlMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::ControlMode>() {
  return ::CBOperate::ControlMode_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::BCSIMULATION> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::BCSIMULATION>() {
  return ::CBOperate::BCSIMULATION_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::RXS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::RXS>() {
  return ::CBOperate::RXS_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::VZDEFINE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::VZDEFINE>() {
  return ::CBOperate::VZDEFINE_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::VZPHDEFINE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::VZPHDEFINE>() {
  return ::CBOperate::VZPHDEFINE_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::TESTMODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::TESTMODE>() {
  return ::CBOperate::TESTMODE_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::FAULTINCMODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::FAULTINCMODE>() {
  return ::CBOperate::FAULTINCMODE_descriptor();
}
template <> struct is_proto_enum< ::CBOperate::DCSIM> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBOperate::DCSIM>() {
  return ::CBOperate::DCSIM_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CBOperate_2eproto__INCLUDED
