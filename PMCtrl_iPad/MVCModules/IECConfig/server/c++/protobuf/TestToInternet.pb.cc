// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestToInternet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TestToInternet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Testtointernet {
class chanelparaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<chanelpara> {
} _chanelpara_default_instance_;
class temperatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<temperature> {
} _temperature_default_instance_;
class itemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<item> {
} _item_default_instance_;

namespace protobuf_TestToInternet_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanelpara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanelpara, famptitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanelpara, fphase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanelpara, ffre_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(temperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(temperature, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, testtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, analogcurrentchanelvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, analogvoltchangelvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, temperaturevalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, ibinstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, ntimepart1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, ntimepart2_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(chanelpara)},
  { 7, -1, sizeof(temperature)},
  { 12, -1, sizeof(item)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_chanelpara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_temperature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_item_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TestToInternet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _chanelpara_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _temperature_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _item_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _chanelpara_default_instance_.DefaultConstruct();
  _temperature_default_instance_.DefaultConstruct();
  _item_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024TestToInternet.proto\022\016Testtointernet\">"
      "\n\nchanelpara\022\022\n\nfamptitude\030\001 \001(\002\022\016\n\006fpha"
      "se\030\002 \001(\002\022\014\n\004ffre\030\003 \001(\002\"\034\n\013temperature\022\r\n"
      "\005value\030\001 \001(\002\"\237\002\n\004item\022+\n\010testtype\030\001 \001(\0162"
      "\031.Testtointernet.para_type\022<\n\030analogcurr"
      "entchanelvalue\030\002 \003(\0132\032.Testtointernet.ch"
      "anelpara\022:\n\026analogvoltchangelvalue\030\003 \003(\013"
      "2\032.Testtointernet.chanelpara\0225\n\020temperat"
      "urevalue\030\004 \003(\0132\033.Testtointernet.temperat"
      "ure\022\021\n\tibinstate\030\005 \001(\r\022\022\n\nnTimepart1\030\006 \001"
      "(\r\022\022\n\nnTimepart2\030\007 \001(\r*]\n\tpara_type\022\013\n\007t"
      "estOff\020\000\022\017\n\013manual_type\020\001\022\016\n\nstate_type\020"
      "\002\022\017\n\013differ_type\020\003\022\021\n\rdistance_type\020\004b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TestToInternet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_TestToInternet_2eproto

const ::google::protobuf::EnumDescriptor* para_type_descriptor() {
  protobuf_TestToInternet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TestToInternet_2eproto::file_level_enum_descriptors[0];
}
bool para_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chanelpara::kFamptitudeFieldNumber;
const int chanelpara::kFphaseFieldNumber;
const int chanelpara::kFfreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chanelpara::chanelpara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TestToInternet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Testtointernet.chanelpara)
}
chanelpara::chanelpara(const chanelpara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&famptitude_, &from.famptitude_,
    reinterpret_cast<char*>(&ffre_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(ffre_));
  // @@protoc_insertion_point(copy_constructor:Testtointernet.chanelpara)
}

void chanelpara::SharedCtor() {
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&ffre_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(ffre_));
  _cached_size_ = 0;
}

chanelpara::~chanelpara() {
  // @@protoc_insertion_point(destructor:Testtointernet.chanelpara)
  SharedDtor();
}

void chanelpara::SharedDtor() {
}

void chanelpara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chanelpara::descriptor() {
  protobuf_TestToInternet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TestToInternet_2eproto::file_level_metadata[0].descriptor;
}

const chanelpara& chanelpara::default_instance() {
  protobuf_TestToInternet_2eproto::InitDefaults();
  return *internal_default_instance();
}

chanelpara* chanelpara::New(::google::protobuf::Arena* arena) const {
  chanelpara* n = new chanelpara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chanelpara::Clear() {
// @@protoc_insertion_point(message_clear_start:Testtointernet.chanelpara)
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&ffre_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(ffre_));
}

bool chanelpara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Testtointernet.chanelpara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float famptitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &famptitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fphase = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ffre = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ffre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Testtointernet.chanelpara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Testtointernet.chanelpara)
  return false;
#undef DO_
}

void chanelpara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Testtointernet.chanelpara)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->famptitude(), output);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fphase(), output);
  }

  // float ffre = 3;
  if (this->ffre() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ffre(), output);
  }

  // @@protoc_insertion_point(serialize_end:Testtointernet.chanelpara)
}

::google::protobuf::uint8* chanelpara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Testtointernet.chanelpara)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->famptitude(), target);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fphase(), target);
  }

  // float ffre = 3;
  if (this->ffre() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ffre(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Testtointernet.chanelpara)
  return target;
}

size_t chanelpara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Testtointernet.chanelpara)
  size_t total_size = 0;

  // float famptitude = 1;
  if (this->famptitude() != 0) {
    total_size += 1 + 4;
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    total_size += 1 + 4;
  }

  // float ffre = 3;
  if (this->ffre() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chanelpara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Testtointernet.chanelpara)
  GOOGLE_DCHECK_NE(&from, this);
  const chanelpara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const chanelpara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Testtointernet.chanelpara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Testtointernet.chanelpara)
    MergeFrom(*source);
  }
}

void chanelpara::MergeFrom(const chanelpara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Testtointernet.chanelpara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.famptitude() != 0) {
    set_famptitude(from.famptitude());
  }
  if (from.fphase() != 0) {
    set_fphase(from.fphase());
  }
  if (from.ffre() != 0) {
    set_ffre(from.ffre());
  }
}

void chanelpara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Testtointernet.chanelpara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chanelpara::CopyFrom(const chanelpara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Testtointernet.chanelpara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chanelpara::IsInitialized() const {
  return true;
}

void chanelpara::Swap(chanelpara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chanelpara::InternalSwap(chanelpara* other) {
  std::swap(famptitude_, other->famptitude_);
  std::swap(fphase_, other->fphase_);
  std::swap(ffre_, other->ffre_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chanelpara::GetMetadata() const {
  protobuf_TestToInternet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TestToInternet_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// chanelpara

// float famptitude = 1;
void chanelpara::clear_famptitude() {
  famptitude_ = 0;
}
float chanelpara::famptitude() const {
  // @@protoc_insertion_point(field_get:Testtointernet.chanelpara.famptitude)
  return famptitude_;
}
void chanelpara::set_famptitude(float value) {
  
  famptitude_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.chanelpara.famptitude)
}

// float fphase = 2;
void chanelpara::clear_fphase() {
  fphase_ = 0;
}
float chanelpara::fphase() const {
  // @@protoc_insertion_point(field_get:Testtointernet.chanelpara.fphase)
  return fphase_;
}
void chanelpara::set_fphase(float value) {
  
  fphase_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.chanelpara.fphase)
}

// float ffre = 3;
void chanelpara::clear_ffre() {
  ffre_ = 0;
}
float chanelpara::ffre() const {
  // @@protoc_insertion_point(field_get:Testtointernet.chanelpara.ffre)
  return ffre_;
}
void chanelpara::set_ffre(float value) {
  
  ffre_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.chanelpara.ffre)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int temperature::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

temperature::temperature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TestToInternet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Testtointernet.temperature)
}
temperature::temperature(const temperature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Testtointernet.temperature)
}

void temperature::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

temperature::~temperature() {
  // @@protoc_insertion_point(destructor:Testtointernet.temperature)
  SharedDtor();
}

void temperature::SharedDtor() {
}

void temperature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* temperature::descriptor() {
  protobuf_TestToInternet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TestToInternet_2eproto::file_level_metadata[1].descriptor;
}

const temperature& temperature::default_instance() {
  protobuf_TestToInternet_2eproto::InitDefaults();
  return *internal_default_instance();
}

temperature* temperature::New(::google::protobuf::Arena* arena) const {
  temperature* n = new temperature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void temperature::Clear() {
// @@protoc_insertion_point(message_clear_start:Testtointernet.temperature)
  value_ = 0;
}

bool temperature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Testtointernet.temperature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Testtointernet.temperature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Testtointernet.temperature)
  return false;
#undef DO_
}

void temperature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Testtointernet.temperature)
  // float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:Testtointernet.temperature)
}

::google::protobuf::uint8* temperature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Testtointernet.temperature)
  // float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Testtointernet.temperature)
  return target;
}

size_t temperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Testtointernet.temperature)
  size_t total_size = 0;

  // float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void temperature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Testtointernet.temperature)
  GOOGLE_DCHECK_NE(&from, this);
  const temperature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const temperature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Testtointernet.temperature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Testtointernet.temperature)
    MergeFrom(*source);
  }
}

void temperature::MergeFrom(const temperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Testtointernet.temperature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void temperature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Testtointernet.temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void temperature::CopyFrom(const temperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Testtointernet.temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool temperature::IsInitialized() const {
  return true;
}

void temperature::Swap(temperature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void temperature::InternalSwap(temperature* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata temperature::GetMetadata() const {
  protobuf_TestToInternet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TestToInternet_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// temperature

// float value = 1;
void temperature::clear_value() {
  value_ = 0;
}
float temperature::value() const {
  // @@protoc_insertion_point(field_get:Testtointernet.temperature.value)
  return value_;
}
void temperature::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.temperature.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int item::kTesttypeFieldNumber;
const int item::kAnalogcurrentchanelvalueFieldNumber;
const int item::kAnalogvoltchangelvalueFieldNumber;
const int item::kTemperaturevalueFieldNumber;
const int item::kIbinstateFieldNumber;
const int item::kNTimepart1FieldNumber;
const int item::kNTimepart2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

item::item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TestToInternet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Testtointernet.item)
}
item::item(const item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      analogcurrentchanelvalue_(from.analogcurrentchanelvalue_),
      analogvoltchangelvalue_(from.analogvoltchangelvalue_),
      temperaturevalue_(from.temperaturevalue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&testtype_, &from.testtype_,
    reinterpret_cast<char*>(&ntimepart2_) -
    reinterpret_cast<char*>(&testtype_) + sizeof(ntimepart2_));
  // @@protoc_insertion_point(copy_constructor:Testtointernet.item)
}

void item::SharedCtor() {
  ::memset(&testtype_, 0, reinterpret_cast<char*>(&ntimepart2_) -
    reinterpret_cast<char*>(&testtype_) + sizeof(ntimepart2_));
  _cached_size_ = 0;
}

item::~item() {
  // @@protoc_insertion_point(destructor:Testtointernet.item)
  SharedDtor();
}

void item::SharedDtor() {
}

void item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item::descriptor() {
  protobuf_TestToInternet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TestToInternet_2eproto::file_level_metadata[2].descriptor;
}

const item& item::default_instance() {
  protobuf_TestToInternet_2eproto::InitDefaults();
  return *internal_default_instance();
}

item* item::New(::google::protobuf::Arena* arena) const {
  item* n = new item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void item::Clear() {
// @@protoc_insertion_point(message_clear_start:Testtointernet.item)
  analogcurrentchanelvalue_.Clear();
  analogvoltchangelvalue_.Clear();
  temperaturevalue_.Clear();
  ::memset(&testtype_, 0, reinterpret_cast<char*>(&ntimepart2_) -
    reinterpret_cast<char*>(&testtype_) + sizeof(ntimepart2_));
}

bool item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Testtointernet.item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Testtointernet.para_type testtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_testtype(static_cast< ::Testtointernet::para_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Testtointernet.chanelpara analogcurrentchanelvalue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_analogcurrentchanelvalue()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Testtointernet.chanelpara analogvoltchangelvalue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_analogvoltchangelvalue()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Testtointernet.temperature temperaturevalue = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_temperaturevalue()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 ibinstate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ibinstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nTimepart1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntimepart1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nTimepart2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ntimepart2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Testtointernet.item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Testtointernet.item)
  return false;
#undef DO_
}

void item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Testtointernet.item)
  // .Testtointernet.para_type testtype = 1;
  if (this->testtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->testtype(), output);
  }

  // repeated .Testtointernet.chanelpara analogcurrentchanelvalue = 2;
  for (unsigned int i = 0, n = this->analogcurrentchanelvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->analogcurrentchanelvalue(i), output);
  }

  // repeated .Testtointernet.chanelpara analogvoltchangelvalue = 3;
  for (unsigned int i = 0, n = this->analogvoltchangelvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->analogvoltchangelvalue(i), output);
  }

  // repeated .Testtointernet.temperature temperaturevalue = 4;
  for (unsigned int i = 0, n = this->temperaturevalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->temperaturevalue(i), output);
  }

  // uint32 ibinstate = 5;
  if (this->ibinstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ibinstate(), output);
  }

  // uint32 nTimepart1 = 6;
  if (this->ntimepart1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ntimepart1(), output);
  }

  // uint32 nTimepart2 = 7;
  if (this->ntimepart2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ntimepart2(), output);
  }

  // @@protoc_insertion_point(serialize_end:Testtointernet.item)
}

::google::protobuf::uint8* item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Testtointernet.item)
  // .Testtointernet.para_type testtype = 1;
  if (this->testtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->testtype(), target);
  }

  // repeated .Testtointernet.chanelpara analogcurrentchanelvalue = 2;
  for (unsigned int i = 0, n = this->analogcurrentchanelvalue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->analogcurrentchanelvalue(i), false, target);
  }

  // repeated .Testtointernet.chanelpara analogvoltchangelvalue = 3;
  for (unsigned int i = 0, n = this->analogvoltchangelvalue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->analogvoltchangelvalue(i), false, target);
  }

  // repeated .Testtointernet.temperature temperaturevalue = 4;
  for (unsigned int i = 0, n = this->temperaturevalue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->temperaturevalue(i), false, target);
  }

  // uint32 ibinstate = 5;
  if (this->ibinstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ibinstate(), target);
  }

  // uint32 nTimepart1 = 6;
  if (this->ntimepart1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ntimepart1(), target);
  }

  // uint32 nTimepart2 = 7;
  if (this->ntimepart2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ntimepart2(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Testtointernet.item)
  return target;
}

size_t item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Testtointernet.item)
  size_t total_size = 0;

  // repeated .Testtointernet.chanelpara analogcurrentchanelvalue = 2;
  {
    unsigned int count = this->analogcurrentchanelvalue_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analogcurrentchanelvalue(i));
    }
  }

  // repeated .Testtointernet.chanelpara analogvoltchangelvalue = 3;
  {
    unsigned int count = this->analogvoltchangelvalue_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analogvoltchangelvalue(i));
    }
  }

  // repeated .Testtointernet.temperature temperaturevalue = 4;
  {
    unsigned int count = this->temperaturevalue_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->temperaturevalue(i));
    }
  }

  // .Testtointernet.para_type testtype = 1;
  if (this->testtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->testtype());
  }

  // uint32 ibinstate = 5;
  if (this->ibinstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ibinstate());
  }

  // uint32 nTimepart1 = 6;
  if (this->ntimepart1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntimepart1());
  }

  // uint32 nTimepart2 = 7;
  if (this->ntimepart2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ntimepart2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Testtointernet.item)
  GOOGLE_DCHECK_NE(&from, this);
  const item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Testtointernet.item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Testtointernet.item)
    MergeFrom(*source);
  }
}

void item::MergeFrom(const item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Testtointernet.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analogcurrentchanelvalue_.MergeFrom(from.analogcurrentchanelvalue_);
  analogvoltchangelvalue_.MergeFrom(from.analogvoltchangelvalue_);
  temperaturevalue_.MergeFrom(from.temperaturevalue_);
  if (from.testtype() != 0) {
    set_testtype(from.testtype());
  }
  if (from.ibinstate() != 0) {
    set_ibinstate(from.ibinstate());
  }
  if (from.ntimepart1() != 0) {
    set_ntimepart1(from.ntimepart1());
  }
  if (from.ntimepart2() != 0) {
    set_ntimepart2(from.ntimepart2());
  }
}

void item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Testtointernet.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item::CopyFrom(const item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Testtointernet.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item::IsInitialized() const {
  return true;
}

void item::Swap(item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void item::InternalSwap(item* other) {
  analogcurrentchanelvalue_.UnsafeArenaSwap(&other->analogcurrentchanelvalue_);
  analogvoltchangelvalue_.UnsafeArenaSwap(&other->analogvoltchangelvalue_);
  temperaturevalue_.UnsafeArenaSwap(&other->temperaturevalue_);
  std::swap(testtype_, other->testtype_);
  std::swap(ibinstate_, other->ibinstate_);
  std::swap(ntimepart1_, other->ntimepart1_);
  std::swap(ntimepart2_, other->ntimepart2_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata item::GetMetadata() const {
  protobuf_TestToInternet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TestToInternet_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// item

// .Testtointernet.para_type testtype = 1;
void item::clear_testtype() {
  testtype_ = 0;
}
::Testtointernet::para_type item::testtype() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.testtype)
  return static_cast< ::Testtointernet::para_type >(testtype_);
}
void item::set_testtype(::Testtointernet::para_type value) {
  
  testtype_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.testtype)
}

// repeated .Testtointernet.chanelpara analogcurrentchanelvalue = 2;
int item::analogcurrentchanelvalue_size() const {
  return analogcurrentchanelvalue_.size();
}
void item::clear_analogcurrentchanelvalue() {
  analogcurrentchanelvalue_.Clear();
}
const ::Testtointernet::chanelpara& item::analogcurrentchanelvalue(int index) const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_.Get(index);
}
::Testtointernet::chanelpara* item::mutable_analogcurrentchanelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_.Mutable(index);
}
::Testtointernet::chanelpara* item::add_analogcurrentchanelvalue() {
  // @@protoc_insertion_point(field_add:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_.Add();
}
::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >*
item::mutable_analogcurrentchanelvalue() {
  // @@protoc_insertion_point(field_mutable_list:Testtointernet.item.analogcurrentchanelvalue)
  return &analogcurrentchanelvalue_;
}
const ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >&
item::analogcurrentchanelvalue() const {
  // @@protoc_insertion_point(field_list:Testtointernet.item.analogcurrentchanelvalue)
  return analogcurrentchanelvalue_;
}

// repeated .Testtointernet.chanelpara analogvoltchangelvalue = 3;
int item::analogvoltchangelvalue_size() const {
  return analogvoltchangelvalue_.size();
}
void item::clear_analogvoltchangelvalue() {
  analogvoltchangelvalue_.Clear();
}
const ::Testtointernet::chanelpara& item::analogvoltchangelvalue(int index) const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_.Get(index);
}
::Testtointernet::chanelpara* item::mutable_analogvoltchangelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_.Mutable(index);
}
::Testtointernet::chanelpara* item::add_analogvoltchangelvalue() {
  // @@protoc_insertion_point(field_add:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_.Add();
}
::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >*
item::mutable_analogvoltchangelvalue() {
  // @@protoc_insertion_point(field_mutable_list:Testtointernet.item.analogvoltchangelvalue)
  return &analogvoltchangelvalue_;
}
const ::google::protobuf::RepeatedPtrField< ::Testtointernet::chanelpara >&
item::analogvoltchangelvalue() const {
  // @@protoc_insertion_point(field_list:Testtointernet.item.analogvoltchangelvalue)
  return analogvoltchangelvalue_;
}

// repeated .Testtointernet.temperature temperaturevalue = 4;
int item::temperaturevalue_size() const {
  return temperaturevalue_.size();
}
void item::clear_temperaturevalue() {
  temperaturevalue_.Clear();
}
const ::Testtointernet::temperature& item::temperaturevalue(int index) const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.temperaturevalue)
  return temperaturevalue_.Get(index);
}
::Testtointernet::temperature* item::mutable_temperaturevalue(int index) {
  // @@protoc_insertion_point(field_mutable:Testtointernet.item.temperaturevalue)
  return temperaturevalue_.Mutable(index);
}
::Testtointernet::temperature* item::add_temperaturevalue() {
  // @@protoc_insertion_point(field_add:Testtointernet.item.temperaturevalue)
  return temperaturevalue_.Add();
}
::google::protobuf::RepeatedPtrField< ::Testtointernet::temperature >*
item::mutable_temperaturevalue() {
  // @@protoc_insertion_point(field_mutable_list:Testtointernet.item.temperaturevalue)
  return &temperaturevalue_;
}
const ::google::protobuf::RepeatedPtrField< ::Testtointernet::temperature >&
item::temperaturevalue() const {
  // @@protoc_insertion_point(field_list:Testtointernet.item.temperaturevalue)
  return temperaturevalue_;
}

// uint32 ibinstate = 5;
void item::clear_ibinstate() {
  ibinstate_ = 0u;
}
::google::protobuf::uint32 item::ibinstate() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.ibinstate)
  return ibinstate_;
}
void item::set_ibinstate(::google::protobuf::uint32 value) {
  
  ibinstate_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.ibinstate)
}

// uint32 nTimepart1 = 6;
void item::clear_ntimepart1() {
  ntimepart1_ = 0u;
}
::google::protobuf::uint32 item::ntimepart1() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.nTimepart1)
  return ntimepart1_;
}
void item::set_ntimepart1(::google::protobuf::uint32 value) {
  
  ntimepart1_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.nTimepart1)
}

// uint32 nTimepart2 = 7;
void item::clear_ntimepart2() {
  ntimepart2_ = 0u;
}
::google::protobuf::uint32 item::ntimepart2() const {
  // @@protoc_insertion_point(field_get:Testtointernet.item.nTimepart2)
  return ntimepart2_;
}
void item::set_ntimepart2(::google::protobuf::uint32 value) {
  
  ntimepart2_ = value;
  // @@protoc_insertion_point(field_set:Testtointernet.item.nTimepart2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Testtointernet

// @@protoc_insertion_point(global_scope)
