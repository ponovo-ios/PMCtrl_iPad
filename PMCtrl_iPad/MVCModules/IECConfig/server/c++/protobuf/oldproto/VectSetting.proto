
package VectSetting;


enum PhaseType
{
    PHT_UNKNOWN      = 0;
    PHT_A            = 1;  // A相
    PHT_B            = 2;  // B相
    PHT_C            = 3;  // C相
}

enum SignalType
{
   S_VOLTAGE         = 0;
   S_CURRENT         = 1;
   S_UNKNOWN         = 2;
}

enum OutputType
{
   OUT_ANALOG        = 0;   // 模拟输出
   OUT_DIGITAL       = 1;   // 数字输出
   OUT_BOTH          = 2;   // 数字模拟同时输出
}

message HarmonicItem
{
    optional int32   Index       = 1;    // 谐波次数， 0次为直流分量，1次为基波分量
    optional double  Amplitude   = 2;    // 谐波幅值
    optional double  Angle       = 3;    // 谐波相位
}



message HarmonicInfo
{
    optional double   BaseFrequency     = 1;
    repeated HarmonicItem Item = 2;
}

message keyValue
{
    optional string  key   = 1;
    optional double  val   = 2; 
}

message ExtendInfo
{
    optional double              tag        = 1;
    repeated int32      Integers   = 2;
    repeated double     Floats     = 3;
    repeated keyValue   Maps       = 4;
}

message ChannelBase
{
    optional string        VectName        = 1;
    optional string        Name            = 2;
    optional PhaseType     Phase           = 4;     // 相位或者相序
    optional SignalType    Type            = 5;
    optional int32         Num             = 6; 
    optional bool          IsAC            = 7;
    optional OutputType    OutType         = 8;
}

message ChannelList
{
    repeated ChannelBase item = 1;    // 自动递变或者手动递变的通道列表
}

message EvalItem
{
    optional string  RefVarName           = 1;
    optional string  Display              = 2;
    optional double  SettingV             = 3;
    optional bool    IsAbsoluteError      = 4;
    optional double  AbsoluteError        = 5;
    optional bool    IsRelativeError      = 6;
    optional double  RelativeError        = 7;
    optional double  MeasureV             = 8;
    optional string  EvalString           = 9;
    optional bool    IsSysVar             = 10;
}

message EvalInfo
{
    repeated EvalItem BinaryItem       = 1;   // 所有开关量评估条件
    repeated EvalItem ActionItem       = 2;   // 所有整定值评估条件
}
