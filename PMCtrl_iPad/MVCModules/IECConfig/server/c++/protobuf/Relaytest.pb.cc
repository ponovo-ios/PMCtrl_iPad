// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Relaytest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Relaytest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace relaytest {
class ChannelInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelInfo> {
} _ChannelInfo_default_instance_;
class ItemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Items> {
} _Items_default_instance_;
class ComDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComData> {
} _ComData_default_instance_;
class ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Item> {
} _Item_default_instance_;
class ChannelDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelData> {
} _ChannelData_default_instance_;

namespace protobuf_Relaytest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, nindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, strname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, nphase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, nccbm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, nunit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, fcoefa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, fcoefb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, fskew_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, ftime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, fmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, fmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, fprimary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, fsecondary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelInfo, ps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, oitems_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, triptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, switchlogic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, validchannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, mdelay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, gpssec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, gpsnsec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, faultmsec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, replaychannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, replaychannel2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, loopflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, faultstartpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, fre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, nsamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, nendsamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, nisloop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComData, ncyclenum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, oinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, odata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, ocomdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, va_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, vb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, vc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, ia_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, ib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, ic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, vap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, vbp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, vcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, iap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, ibp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelData, icp_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ChannelInfo)},
  { 18, -1, sizeof(Items)},
  { 23, -1, sizeof(ComData)},
  { 44, -1, sizeof(Item)},
  { 51, -1, sizeof(ChannelData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Items_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Relaytest.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _ChannelInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Items_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ComData_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Item_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ChannelData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChannelInfo_default_instance_.DefaultConstruct();
  _Items_default_instance_.DefaultConstruct();
  _ComData_default_instance_.DefaultConstruct();
  _Item_default_instance_.DefaultConstruct();
  _ChannelData_default_instance_.DefaultConstruct();
  _Item_default_instance_.get_mutable()->oinfo_ = const_cast< ::relaytest::ChannelInfo*>(
      ::relaytest::ChannelInfo::internal_default_instance());
  _Item_default_instance_.get_mutable()->odata_ = const_cast< ::relaytest::ChannelData*>(
      ::relaytest::ChannelData::internal_default_instance());
  _Item_default_instance_.get_mutable()->ocomdata_ = const_cast< ::relaytest::ComData*>(
      ::relaytest::ComData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017Relaytest.proto\022\trelaytest\"\371\001\n\013Channel"
      "Info\022\016\n\006nIndex\030\001 \001(\r\022\017\n\007strName\030\002 \001(\t\022\016\n"
      "\006nPhase\030\003 \001(\t\022\r\n\005nCCbm\030\004 \001(\r\022\036\n\005nUnit\030\005 "
      "\001(\0162\017.relaytest.Unit\022\016\n\006fCoefA\030\006 \001(\002\022\016\n\006"
      "fCoefB\030\007 \001(\002\022\r\n\005fSkew\030\010 \001(\002\022\r\n\005fTime\030\t \001"
      "(\002\022\014\n\004fMin\030\n \001(\002\022\014\n\004fMax\030\013 \001(\002\022\020\n\010fPrima"
      "ry\030\014 \001(\002\022\022\n\nfSecondary\030\r \001(\002\022\n\n\002PS\030\016 \001(\t"
      "\"(\n\005Items\022\037\n\006oItems\030\001 \003(\0132\017.relaytest.It"
      "em\"\304\002\n\007ComData\022\020\n\010tripType\030\001 \001(\r\022\023\n\013swit"
      "chLogic\030\002 \001(\r\022\024\n\014validChannel\030\003 \001(\r\022\016\n\006m"
      "Delay\030\004 \001(\r\022\016\n\006gpsSec\030\005 \001(\r\022\017\n\007gpsnSec\030\006"
      " \001(\r\022\021\n\tfaultmSec\030\007 \001(\r\022\025\n\rReplayChannel"
      "\030\010 \001(\r\022\026\n\016ReplayChannel2\030\t \001(\r\022\014\n\004freq\030\n"
      " \001(\r\022\020\n\010loopFlag\030\013 \001(\r\022\027\n\017faultStartPoin"
      "t\030\014 \001(\r\022\013\n\003fre\030\r \001(\002\022\r\n\005nSamp\030\016 \001(\r\022\020\n\010n"
      "EndSamp\030\017 \001(\r\022\017\n\007nIsloop\030\020 \001(\r\022\021\n\tnCycle"
      "Num\030\021 \001(\r\"z\n\004Item\022%\n\005oinfo\030\001 \001(\0132\026.relay"
      "test.ChannelInfo\022%\n\005odata\030\002 \001(\0132\026.relayt"
      "est.ChannelData\022$\n\010ocomData\030\003 \001(\0132\022.rela"
      "ytest.ComData\"\243\001\n\013ChannelData\022\n\n\002Va\030\001 \003("
      "\002\022\n\n\002Vb\030\002 \003(\002\022\n\n\002Vc\030\003 \003(\002\022\n\n\002Ia\030\004 \003(\002\022\n\n"
      "\002Ib\030\005 \003(\002\022\n\n\002Ic\030\006 \003(\002\022\013\n\003Vap\030\007 \003(\002\022\013\n\003Vb"
      "p\030\010 \003(\002\022\013\n\003Vcp\030\t \003(\002\022\013\n\003Iap\030\n \003(\002\022\013\n\003Ibp"
      "\030\013 \003(\002\022\013\n\003Icp\030\014 \003(\002*2\n\007Version\022\r\n\tversio"
      "n91\020\000\022\r\n\tversion99\020\001\022\t\n\005other\020\002*$\n\004Unit\022"
      "\005\n\001A\020\000\022\006\n\002kA\020\001\022\005\n\001V\020\002\022\006\n\002kV\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Relaytest.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Relaytest_2eproto

const ::google::protobuf::EnumDescriptor* Version_descriptor() {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_enum_descriptors[0];
}
bool Version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Unit_descriptor() {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_enum_descriptors[1];
}
bool Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelInfo::kNIndexFieldNumber;
const int ChannelInfo::kStrNameFieldNumber;
const int ChannelInfo::kNPhaseFieldNumber;
const int ChannelInfo::kNCCbmFieldNumber;
const int ChannelInfo::kNUnitFieldNumber;
const int ChannelInfo::kFCoefAFieldNumber;
const int ChannelInfo::kFCoefBFieldNumber;
const int ChannelInfo::kFSkewFieldNumber;
const int ChannelInfo::kFTimeFieldNumber;
const int ChannelInfo::kFMinFieldNumber;
const int ChannelInfo::kFMaxFieldNumber;
const int ChannelInfo::kFPrimaryFieldNumber;
const int ChannelInfo::kFSecondaryFieldNumber;
const int ChannelInfo::kPSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelInfo::ChannelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Relaytest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:relaytest.ChannelInfo)
}
ChannelInfo::ChannelInfo(const ChannelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strname().size() > 0) {
    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  nphase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nphase().size() > 0) {
    nphase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nphase_);
  }
  ps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ps().size() > 0) {
    ps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ps_);
  }
  ::memcpy(&nindex_, &from.nindex_,
    reinterpret_cast<char*>(&fsecondary_) -
    reinterpret_cast<char*>(&nindex_) + sizeof(fsecondary_));
  // @@protoc_insertion_point(copy_constructor:relaytest.ChannelInfo)
}

void ChannelInfo::SharedCtor() {
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nphase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ps_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nindex_, 0, reinterpret_cast<char*>(&fsecondary_) -
    reinterpret_cast<char*>(&nindex_) + sizeof(fsecondary_));
  _cached_size_ = 0;
}

ChannelInfo::~ChannelInfo() {
  // @@protoc_insertion_point(destructor:relaytest.ChannelInfo)
  SharedDtor();
}

void ChannelInfo::SharedDtor() {
  strname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nphase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ps_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelInfo::descriptor() {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[0].descriptor;
}

const ChannelInfo& ChannelInfo::default_instance() {
  protobuf_Relaytest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelInfo* ChannelInfo::New(::google::protobuf::Arena* arena) const {
  ChannelInfo* n = new ChannelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:relaytest.ChannelInfo)
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nphase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nindex_, 0, reinterpret_cast<char*>(&fsecondary_) -
    reinterpret_cast<char*>(&nindex_) + sizeof(fsecondary_));
}

bool ChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:relaytest.ChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 nIndex = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strName = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "relaytest.ChannelInfo.strName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nPhase = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nphase()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nphase().data(), this->nphase().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "relaytest.ChannelInfo.nPhase"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nCCbm = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nccbm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .relaytest.Unit nUnit = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nunit(static_cast< ::relaytest::Unit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fCoefA = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcoefa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fCoefB = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcoefb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fSkew = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fskew_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTime = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMin = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMax = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fPrimary = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fprimary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fSecondary = 13;
      case 13: {
        if (tag == 109u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsecondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PS = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ps()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ps().data(), this->ps().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "relaytest.ChannelInfo.PS"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:relaytest.ChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:relaytest.ChannelInfo)
  return false;
#undef DO_
}

void ChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:relaytest.ChannelInfo)
  // uint32 nIndex = 1;
  if (this->nindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nindex(), output);
  }

  // string strName = 2;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "relaytest.ChannelInfo.strName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strname(), output);
  }

  // string nPhase = 3;
  if (this->nphase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nphase().data(), this->nphase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "relaytest.ChannelInfo.nPhase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nphase(), output);
  }

  // uint32 nCCbm = 4;
  if (this->nccbm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nccbm(), output);
  }

  // .relaytest.Unit nUnit = 5;
  if (this->nunit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->nunit(), output);
  }

  // float fCoefA = 6;
  if (this->fcoefa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fcoefa(), output);
  }

  // float fCoefB = 7;
  if (this->fcoefb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fcoefb(), output);
  }

  // float fSkew = 8;
  if (this->fskew() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fskew(), output);
  }

  // float fTime = 9;
  if (this->ftime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ftime(), output);
  }

  // float fMin = 10;
  if (this->fmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fmin(), output);
  }

  // float fMax = 11;
  if (this->fmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->fmax(), output);
  }

  // float fPrimary = 12;
  if (this->fprimary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fprimary(), output);
  }

  // float fSecondary = 13;
  if (this->fsecondary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fsecondary(), output);
  }

  // string PS = 14;
  if (this->ps().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "relaytest.ChannelInfo.PS");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->ps(), output);
  }

  // @@protoc_insertion_point(serialize_end:relaytest.ChannelInfo)
}

::google::protobuf::uint8* ChannelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:relaytest.ChannelInfo)
  // uint32 nIndex = 1;
  if (this->nindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nindex(), target);
  }

  // string strName = 2;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "relaytest.ChannelInfo.strName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strname(), target);
  }

  // string nPhase = 3;
  if (this->nphase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nphase().data(), this->nphase().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "relaytest.ChannelInfo.nPhase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nphase(), target);
  }

  // uint32 nCCbm = 4;
  if (this->nccbm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nccbm(), target);
  }

  // .relaytest.Unit nUnit = 5;
  if (this->nunit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->nunit(), target);
  }

  // float fCoefA = 6;
  if (this->fcoefa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fcoefa(), target);
  }

  // float fCoefB = 7;
  if (this->fcoefb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fcoefb(), target);
  }

  // float fSkew = 8;
  if (this->fskew() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fskew(), target);
  }

  // float fTime = 9;
  if (this->ftime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->ftime(), target);
  }

  // float fMin = 10;
  if (this->fmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fmin(), target);
  }

  // float fMax = 11;
  if (this->fmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->fmax(), target);
  }

  // float fPrimary = 12;
  if (this->fprimary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->fprimary(), target);
  }

  // float fSecondary = 13;
  if (this->fsecondary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fsecondary(), target);
  }

  // string PS = 14;
  if (this->ps().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "relaytest.ChannelInfo.PS");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->ps(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:relaytest.ChannelInfo)
  return target;
}

size_t ChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relaytest.ChannelInfo)
  size_t total_size = 0;

  // string strName = 2;
  if (this->strname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strname());
  }

  // string nPhase = 3;
  if (this->nphase().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nphase());
  }

  // string PS = 14;
  if (this->ps().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ps());
  }

  // uint32 nIndex = 1;
  if (this->nindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nindex());
  }

  // uint32 nCCbm = 4;
  if (this->nccbm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nccbm());
  }

  // .relaytest.Unit nUnit = 5;
  if (this->nunit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nunit());
  }

  // float fCoefA = 6;
  if (this->fcoefa() != 0) {
    total_size += 1 + 4;
  }

  // float fCoefB = 7;
  if (this->fcoefb() != 0) {
    total_size += 1 + 4;
  }

  // float fSkew = 8;
  if (this->fskew() != 0) {
    total_size += 1 + 4;
  }

  // float fTime = 9;
  if (this->ftime() != 0) {
    total_size += 1 + 4;
  }

  // float fMin = 10;
  if (this->fmin() != 0) {
    total_size += 1 + 4;
  }

  // float fMax = 11;
  if (this->fmax() != 0) {
    total_size += 1 + 4;
  }

  // float fPrimary = 12;
  if (this->fprimary() != 0) {
    total_size += 1 + 4;
  }

  // float fSecondary = 13;
  if (this->fsecondary() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relaytest.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relaytest.ChannelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relaytest.ChannelInfo)
    MergeFrom(*source);
  }
}

void ChannelInfo::MergeFrom(const ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relaytest.ChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strname().size() > 0) {

    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  if (from.nphase().size() > 0) {

    nphase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nphase_);
  }
  if (from.ps().size() > 0) {

    ps_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ps_);
  }
  if (from.nindex() != 0) {
    set_nindex(from.nindex());
  }
  if (from.nccbm() != 0) {
    set_nccbm(from.nccbm());
  }
  if (from.nunit() != 0) {
    set_nunit(from.nunit());
  }
  if (from.fcoefa() != 0) {
    set_fcoefa(from.fcoefa());
  }
  if (from.fcoefb() != 0) {
    set_fcoefb(from.fcoefb());
  }
  if (from.fskew() != 0) {
    set_fskew(from.fskew());
  }
  if (from.ftime() != 0) {
    set_ftime(from.ftime());
  }
  if (from.fmin() != 0) {
    set_fmin(from.fmin());
  }
  if (from.fmax() != 0) {
    set_fmax(from.fmax());
  }
  if (from.fprimary() != 0) {
    set_fprimary(from.fprimary());
  }
  if (from.fsecondary() != 0) {
    set_fsecondary(from.fsecondary());
  }
}

void ChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relaytest.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelInfo::CopyFrom(const ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relaytest.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelInfo::IsInitialized() const {
  return true;
}

void ChannelInfo::Swap(ChannelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelInfo::InternalSwap(ChannelInfo* other) {
  strname_.Swap(&other->strname_);
  nphase_.Swap(&other->nphase_);
  ps_.Swap(&other->ps_);
  std::swap(nindex_, other->nindex_);
  std::swap(nccbm_, other->nccbm_);
  std::swap(nunit_, other->nunit_);
  std::swap(fcoefa_, other->fcoefa_);
  std::swap(fcoefb_, other->fcoefb_);
  std::swap(fskew_, other->fskew_);
  std::swap(ftime_, other->ftime_);
  std::swap(fmin_, other->fmin_);
  std::swap(fmax_, other->fmax_);
  std::swap(fprimary_, other->fprimary_);
  std::swap(fsecondary_, other->fsecondary_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelInfo::GetMetadata() const {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelInfo

// uint32 nIndex = 1;
void ChannelInfo::clear_nindex() {
  nindex_ = 0u;
}
::google::protobuf::uint32 ChannelInfo::nindex() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nIndex)
  return nindex_;
}
void ChannelInfo::set_nindex(::google::protobuf::uint32 value) {
  
  nindex_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nIndex)
}

// string strName = 2;
void ChannelInfo::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelInfo::strname() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.strName)
  return strname_.GetNoArena();
}
void ChannelInfo::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.strName)
}
#if LANG_CXX11
void ChannelInfo::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relaytest.ChannelInfo.strName)
}
#endif
void ChannelInfo::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relaytest.ChannelInfo.strName)
}
void ChannelInfo::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relaytest.ChannelInfo.strName)
}
::std::string* ChannelInfo::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:relaytest.ChannelInfo.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelInfo::release_strname() {
  // @@protoc_insertion_point(field_release:relaytest.ChannelInfo.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelInfo::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:relaytest.ChannelInfo.strName)
}

// string nPhase = 3;
void ChannelInfo::clear_nphase() {
  nphase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelInfo::nphase() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nPhase)
  return nphase_.GetNoArena();
}
void ChannelInfo::set_nphase(const ::std::string& value) {
  
  nphase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nPhase)
}
#if LANG_CXX11
void ChannelInfo::set_nphase(::std::string&& value) {
  
  nphase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relaytest.ChannelInfo.nPhase)
}
#endif
void ChannelInfo::set_nphase(const char* value) {
  
  nphase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relaytest.ChannelInfo.nPhase)
}
void ChannelInfo::set_nphase(const char* value, size_t size) {
  
  nphase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relaytest.ChannelInfo.nPhase)
}
::std::string* ChannelInfo::mutable_nphase() {
  
  // @@protoc_insertion_point(field_mutable:relaytest.ChannelInfo.nPhase)
  return nphase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelInfo::release_nphase() {
  // @@protoc_insertion_point(field_release:relaytest.ChannelInfo.nPhase)
  
  return nphase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelInfo::set_allocated_nphase(::std::string* nphase) {
  if (nphase != NULL) {
    
  } else {
    
  }
  nphase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nphase);
  // @@protoc_insertion_point(field_set_allocated:relaytest.ChannelInfo.nPhase)
}

// uint32 nCCbm = 4;
void ChannelInfo::clear_nccbm() {
  nccbm_ = 0u;
}
::google::protobuf::uint32 ChannelInfo::nccbm() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nCCbm)
  return nccbm_;
}
void ChannelInfo::set_nccbm(::google::protobuf::uint32 value) {
  
  nccbm_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nCCbm)
}

// .relaytest.Unit nUnit = 5;
void ChannelInfo::clear_nunit() {
  nunit_ = 0;
}
::relaytest::Unit ChannelInfo::nunit() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nUnit)
  return static_cast< ::relaytest::Unit >(nunit_);
}
void ChannelInfo::set_nunit(::relaytest::Unit value) {
  
  nunit_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nUnit)
}

// float fCoefA = 6;
void ChannelInfo::clear_fcoefa() {
  fcoefa_ = 0;
}
float ChannelInfo::fcoefa() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fCoefA)
  return fcoefa_;
}
void ChannelInfo::set_fcoefa(float value) {
  
  fcoefa_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fCoefA)
}

// float fCoefB = 7;
void ChannelInfo::clear_fcoefb() {
  fcoefb_ = 0;
}
float ChannelInfo::fcoefb() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fCoefB)
  return fcoefb_;
}
void ChannelInfo::set_fcoefb(float value) {
  
  fcoefb_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fCoefB)
}

// float fSkew = 8;
void ChannelInfo::clear_fskew() {
  fskew_ = 0;
}
float ChannelInfo::fskew() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fSkew)
  return fskew_;
}
void ChannelInfo::set_fskew(float value) {
  
  fskew_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fSkew)
}

// float fTime = 9;
void ChannelInfo::clear_ftime() {
  ftime_ = 0;
}
float ChannelInfo::ftime() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fTime)
  return ftime_;
}
void ChannelInfo::set_ftime(float value) {
  
  ftime_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fTime)
}

// float fMin = 10;
void ChannelInfo::clear_fmin() {
  fmin_ = 0;
}
float ChannelInfo::fmin() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fMin)
  return fmin_;
}
void ChannelInfo::set_fmin(float value) {
  
  fmin_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fMin)
}

// float fMax = 11;
void ChannelInfo::clear_fmax() {
  fmax_ = 0;
}
float ChannelInfo::fmax() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fMax)
  return fmax_;
}
void ChannelInfo::set_fmax(float value) {
  
  fmax_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fMax)
}

// float fPrimary = 12;
void ChannelInfo::clear_fprimary() {
  fprimary_ = 0;
}
float ChannelInfo::fprimary() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fPrimary)
  return fprimary_;
}
void ChannelInfo::set_fprimary(float value) {
  
  fprimary_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fPrimary)
}

// float fSecondary = 13;
void ChannelInfo::clear_fsecondary() {
  fsecondary_ = 0;
}
float ChannelInfo::fsecondary() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fSecondary)
  return fsecondary_;
}
void ChannelInfo::set_fsecondary(float value) {
  
  fsecondary_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fSecondary)
}

// string PS = 14;
void ChannelInfo::clear_ps() {
  ps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelInfo::ps() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.PS)
  return ps_.GetNoArena();
}
void ChannelInfo::set_ps(const ::std::string& value) {
  
  ps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.PS)
}
#if LANG_CXX11
void ChannelInfo::set_ps(::std::string&& value) {
  
  ps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relaytest.ChannelInfo.PS)
}
#endif
void ChannelInfo::set_ps(const char* value) {
  
  ps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relaytest.ChannelInfo.PS)
}
void ChannelInfo::set_ps(const char* value, size_t size) {
  
  ps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relaytest.ChannelInfo.PS)
}
::std::string* ChannelInfo::mutable_ps() {
  
  // @@protoc_insertion_point(field_mutable:relaytest.ChannelInfo.PS)
  return ps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelInfo::release_ps() {
  // @@protoc_insertion_point(field_release:relaytest.ChannelInfo.PS)
  
  return ps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelInfo::set_allocated_ps(::std::string* ps) {
  if (ps != NULL) {
    
  } else {
    
  }
  ps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ps);
  // @@protoc_insertion_point(field_set_allocated:relaytest.ChannelInfo.PS)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Items::kOItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Items::Items()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Relaytest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:relaytest.Items)
}
Items::Items(const Items& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      oitems_(from.oitems_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:relaytest.Items)
}

void Items::SharedCtor() {
  _cached_size_ = 0;
}

Items::~Items() {
  // @@protoc_insertion_point(destructor:relaytest.Items)
  SharedDtor();
}

void Items::SharedDtor() {
}

void Items::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Items::descriptor() {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[1].descriptor;
}

const Items& Items::default_instance() {
  protobuf_Relaytest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Items* Items::New(::google::protobuf::Arena* arena) const {
  Items* n = new Items;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Items::Clear() {
// @@protoc_insertion_point(message_clear_start:relaytest.Items)
  oitems_.Clear();
}

bool Items::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:relaytest.Items)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .relaytest.Item oItems = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_oitems()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:relaytest.Items)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:relaytest.Items)
  return false;
#undef DO_
}

void Items::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:relaytest.Items)
  // repeated .relaytest.Item oItems = 1;
  for (unsigned int i = 0, n = this->oitems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->oitems(i), output);
  }

  // @@protoc_insertion_point(serialize_end:relaytest.Items)
}

::google::protobuf::uint8* Items::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:relaytest.Items)
  // repeated .relaytest.Item oItems = 1;
  for (unsigned int i = 0, n = this->oitems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->oitems(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:relaytest.Items)
  return target;
}

size_t Items::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relaytest.Items)
  size_t total_size = 0;

  // repeated .relaytest.Item oItems = 1;
  {
    unsigned int count = this->oitems_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oitems(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Items::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relaytest.Items)
  GOOGLE_DCHECK_NE(&from, this);
  const Items* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Items>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relaytest.Items)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relaytest.Items)
    MergeFrom(*source);
  }
}

void Items::MergeFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relaytest.Items)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oitems_.MergeFrom(from.oitems_);
}

void Items::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relaytest.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Items::CopyFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relaytest.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Items::IsInitialized() const {
  return true;
}

void Items::Swap(Items* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Items::InternalSwap(Items* other) {
  oitems_.UnsafeArenaSwap(&other->oitems_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Items::GetMetadata() const {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Items

// repeated .relaytest.Item oItems = 1;
int Items::oitems_size() const {
  return oitems_.size();
}
void Items::clear_oitems() {
  oitems_.Clear();
}
const ::relaytest::Item& Items::oitems(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.Items.oItems)
  return oitems_.Get(index);
}
::relaytest::Item* Items::mutable_oitems(int index) {
  // @@protoc_insertion_point(field_mutable:relaytest.Items.oItems)
  return oitems_.Mutable(index);
}
::relaytest::Item* Items::add_oitems() {
  // @@protoc_insertion_point(field_add:relaytest.Items.oItems)
  return oitems_.Add();
}
::google::protobuf::RepeatedPtrField< ::relaytest::Item >*
Items::mutable_oitems() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.Items.oItems)
  return &oitems_;
}
const ::google::protobuf::RepeatedPtrField< ::relaytest::Item >&
Items::oitems() const {
  // @@protoc_insertion_point(field_list:relaytest.Items.oItems)
  return oitems_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComData::kTripTypeFieldNumber;
const int ComData::kSwitchLogicFieldNumber;
const int ComData::kValidChannelFieldNumber;
const int ComData::kMDelayFieldNumber;
const int ComData::kGpsSecFieldNumber;
const int ComData::kGpsnSecFieldNumber;
const int ComData::kFaultmSecFieldNumber;
const int ComData::kReplayChannelFieldNumber;
const int ComData::kReplayChannel2FieldNumber;
const int ComData::kFreqFieldNumber;
const int ComData::kLoopFlagFieldNumber;
const int ComData::kFaultStartPointFieldNumber;
const int ComData::kFreFieldNumber;
const int ComData::kNSampFieldNumber;
const int ComData::kNEndSampFieldNumber;
const int ComData::kNIsloopFieldNumber;
const int ComData::kNCycleNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComData::ComData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Relaytest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:relaytest.ComData)
}
ComData::ComData(const ComData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&triptype_, &from.triptype_,
    reinterpret_cast<char*>(&ncyclenum_) -
    reinterpret_cast<char*>(&triptype_) + sizeof(ncyclenum_));
  // @@protoc_insertion_point(copy_constructor:relaytest.ComData)
}

void ComData::SharedCtor() {
  ::memset(&triptype_, 0, reinterpret_cast<char*>(&ncyclenum_) -
    reinterpret_cast<char*>(&triptype_) + sizeof(ncyclenum_));
  _cached_size_ = 0;
}

ComData::~ComData() {
  // @@protoc_insertion_point(destructor:relaytest.ComData)
  SharedDtor();
}

void ComData::SharedDtor() {
}

void ComData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComData::descriptor() {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[2].descriptor;
}

const ComData& ComData::default_instance() {
  protobuf_Relaytest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComData* ComData::New(::google::protobuf::Arena* arena) const {
  ComData* n = new ComData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComData::Clear() {
// @@protoc_insertion_point(message_clear_start:relaytest.ComData)
  ::memset(&triptype_, 0, reinterpret_cast<char*>(&ncyclenum_) -
    reinterpret_cast<char*>(&triptype_) + sizeof(ncyclenum_));
}

bool ComData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:relaytest.ComData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tripType = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triptype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 switchLogic = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchlogic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 validChannel = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validchannel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mDelay = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mdelay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gpsSec = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpssec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gpsnSec = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpsnsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 faultmSec = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faultmsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ReplayChannel = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replaychannel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ReplayChannel2 = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replaychannel2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 freq = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 loopFlag = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 faultStartPoint = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faultstartpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fre = 13;
      case 13: {
        if (tag == 109u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nSamp = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nEndSamp = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nendsamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nIsloop = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nisloop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nCycleNum = 17;
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncyclenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:relaytest.ComData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:relaytest.ComData)
  return false;
#undef DO_
}

void ComData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:relaytest.ComData)
  // uint32 tripType = 1;
  if (this->triptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->triptype(), output);
  }

  // uint32 switchLogic = 2;
  if (this->switchlogic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->switchlogic(), output);
  }

  // uint32 validChannel = 3;
  if (this->validchannel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->validchannel(), output);
  }

  // uint32 mDelay = 4;
  if (this->mdelay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mdelay(), output);
  }

  // uint32 gpsSec = 5;
  if (this->gpssec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gpssec(), output);
  }

  // uint32 gpsnSec = 6;
  if (this->gpsnsec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gpsnsec(), output);
  }

  // uint32 faultmSec = 7;
  if (this->faultmsec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->faultmsec(), output);
  }

  // uint32 ReplayChannel = 8;
  if (this->replaychannel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->replaychannel(), output);
  }

  // uint32 ReplayChannel2 = 9;
  if (this->replaychannel2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->replaychannel2(), output);
  }

  // uint32 freq = 10;
  if (this->freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->freq(), output);
  }

  // uint32 loopFlag = 11;
  if (this->loopflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->loopflag(), output);
  }

  // uint32 faultStartPoint = 12;
  if (this->faultstartpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->faultstartpoint(), output);
  }

  // float fre = 13;
  if (this->fre() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fre(), output);
  }

  // uint32 nSamp = 14;
  if (this->nsamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nsamp(), output);
  }

  // uint32 nEndSamp = 15;
  if (this->nendsamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->nendsamp(), output);
  }

  // uint32 nIsloop = 16;
  if (this->nisloop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->nisloop(), output);
  }

  // uint32 nCycleNum = 17;
  if (this->ncyclenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->ncyclenum(), output);
  }

  // @@protoc_insertion_point(serialize_end:relaytest.ComData)
}

::google::protobuf::uint8* ComData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:relaytest.ComData)
  // uint32 tripType = 1;
  if (this->triptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->triptype(), target);
  }

  // uint32 switchLogic = 2;
  if (this->switchlogic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->switchlogic(), target);
  }

  // uint32 validChannel = 3;
  if (this->validchannel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->validchannel(), target);
  }

  // uint32 mDelay = 4;
  if (this->mdelay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mdelay(), target);
  }

  // uint32 gpsSec = 5;
  if (this->gpssec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gpssec(), target);
  }

  // uint32 gpsnSec = 6;
  if (this->gpsnsec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gpsnsec(), target);
  }

  // uint32 faultmSec = 7;
  if (this->faultmsec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->faultmsec(), target);
  }

  // uint32 ReplayChannel = 8;
  if (this->replaychannel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->replaychannel(), target);
  }

  // uint32 ReplayChannel2 = 9;
  if (this->replaychannel2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->replaychannel2(), target);
  }

  // uint32 freq = 10;
  if (this->freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->freq(), target);
  }

  // uint32 loopFlag = 11;
  if (this->loopflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->loopflag(), target);
  }

  // uint32 faultStartPoint = 12;
  if (this->faultstartpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->faultstartpoint(), target);
  }

  // float fre = 13;
  if (this->fre() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fre(), target);
  }

  // uint32 nSamp = 14;
  if (this->nsamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->nsamp(), target);
  }

  // uint32 nEndSamp = 15;
  if (this->nendsamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->nendsamp(), target);
  }

  // uint32 nIsloop = 16;
  if (this->nisloop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->nisloop(), target);
  }

  // uint32 nCycleNum = 17;
  if (this->ncyclenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->ncyclenum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:relaytest.ComData)
  return target;
}

size_t ComData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relaytest.ComData)
  size_t total_size = 0;

  // uint32 tripType = 1;
  if (this->triptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->triptype());
  }

  // uint32 switchLogic = 2;
  if (this->switchlogic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->switchlogic());
  }

  // uint32 validChannel = 3;
  if (this->validchannel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->validchannel());
  }

  // uint32 mDelay = 4;
  if (this->mdelay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mdelay());
  }

  // uint32 gpsSec = 5;
  if (this->gpssec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gpssec());
  }

  // uint32 gpsnSec = 6;
  if (this->gpsnsec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gpsnsec());
  }

  // uint32 faultmSec = 7;
  if (this->faultmsec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->faultmsec());
  }

  // uint32 ReplayChannel = 8;
  if (this->replaychannel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->replaychannel());
  }

  // uint32 ReplayChannel2 = 9;
  if (this->replaychannel2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->replaychannel2());
  }

  // uint32 freq = 10;
  if (this->freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freq());
  }

  // uint32 loopFlag = 11;
  if (this->loopflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->loopflag());
  }

  // uint32 faultStartPoint = 12;
  if (this->faultstartpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->faultstartpoint());
  }

  // float fre = 13;
  if (this->fre() != 0) {
    total_size += 1 + 4;
  }

  // uint32 nSamp = 14;
  if (this->nsamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nsamp());
  }

  // uint32 nEndSamp = 15;
  if (this->nendsamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nendsamp());
  }

  // uint32 nIsloop = 16;
  if (this->nisloop() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nisloop());
  }

  // uint32 nCycleNum = 17;
  if (this->ncyclenum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncyclenum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relaytest.ComData)
  GOOGLE_DCHECK_NE(&from, this);
  const ComData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relaytest.ComData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relaytest.ComData)
    MergeFrom(*source);
  }
}

void ComData::MergeFrom(const ComData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relaytest.ComData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.triptype() != 0) {
    set_triptype(from.triptype());
  }
  if (from.switchlogic() != 0) {
    set_switchlogic(from.switchlogic());
  }
  if (from.validchannel() != 0) {
    set_validchannel(from.validchannel());
  }
  if (from.mdelay() != 0) {
    set_mdelay(from.mdelay());
  }
  if (from.gpssec() != 0) {
    set_gpssec(from.gpssec());
  }
  if (from.gpsnsec() != 0) {
    set_gpsnsec(from.gpsnsec());
  }
  if (from.faultmsec() != 0) {
    set_faultmsec(from.faultmsec());
  }
  if (from.replaychannel() != 0) {
    set_replaychannel(from.replaychannel());
  }
  if (from.replaychannel2() != 0) {
    set_replaychannel2(from.replaychannel2());
  }
  if (from.freq() != 0) {
    set_freq(from.freq());
  }
  if (from.loopflag() != 0) {
    set_loopflag(from.loopflag());
  }
  if (from.faultstartpoint() != 0) {
    set_faultstartpoint(from.faultstartpoint());
  }
  if (from.fre() != 0) {
    set_fre(from.fre());
  }
  if (from.nsamp() != 0) {
    set_nsamp(from.nsamp());
  }
  if (from.nendsamp() != 0) {
    set_nendsamp(from.nendsamp());
  }
  if (from.nisloop() != 0) {
    set_nisloop(from.nisloop());
  }
  if (from.ncyclenum() != 0) {
    set_ncyclenum(from.ncyclenum());
  }
}

void ComData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relaytest.ComData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComData::CopyFrom(const ComData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relaytest.ComData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComData::IsInitialized() const {
  return true;
}

void ComData::Swap(ComData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComData::InternalSwap(ComData* other) {
  std::swap(triptype_, other->triptype_);
  std::swap(switchlogic_, other->switchlogic_);
  std::swap(validchannel_, other->validchannel_);
  std::swap(mdelay_, other->mdelay_);
  std::swap(gpssec_, other->gpssec_);
  std::swap(gpsnsec_, other->gpsnsec_);
  std::swap(faultmsec_, other->faultmsec_);
  std::swap(replaychannel_, other->replaychannel_);
  std::swap(replaychannel2_, other->replaychannel2_);
  std::swap(freq_, other->freq_);
  std::swap(loopflag_, other->loopflag_);
  std::swap(faultstartpoint_, other->faultstartpoint_);
  std::swap(fre_, other->fre_);
  std::swap(nsamp_, other->nsamp_);
  std::swap(nendsamp_, other->nendsamp_);
  std::swap(nisloop_, other->nisloop_);
  std::swap(ncyclenum_, other->ncyclenum_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComData::GetMetadata() const {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComData

// uint32 tripType = 1;
void ComData::clear_triptype() {
  triptype_ = 0u;
}
::google::protobuf::uint32 ComData::triptype() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.tripType)
  return triptype_;
}
void ComData::set_triptype(::google::protobuf::uint32 value) {
  
  triptype_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.tripType)
}

// uint32 switchLogic = 2;
void ComData::clear_switchlogic() {
  switchlogic_ = 0u;
}
::google::protobuf::uint32 ComData::switchlogic() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.switchLogic)
  return switchlogic_;
}
void ComData::set_switchlogic(::google::protobuf::uint32 value) {
  
  switchlogic_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.switchLogic)
}

// uint32 validChannel = 3;
void ComData::clear_validchannel() {
  validchannel_ = 0u;
}
::google::protobuf::uint32 ComData::validchannel() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.validChannel)
  return validchannel_;
}
void ComData::set_validchannel(::google::protobuf::uint32 value) {
  
  validchannel_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.validChannel)
}

// uint32 mDelay = 4;
void ComData::clear_mdelay() {
  mdelay_ = 0u;
}
::google::protobuf::uint32 ComData::mdelay() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.mDelay)
  return mdelay_;
}
void ComData::set_mdelay(::google::protobuf::uint32 value) {
  
  mdelay_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.mDelay)
}

// uint32 gpsSec = 5;
void ComData::clear_gpssec() {
  gpssec_ = 0u;
}
::google::protobuf::uint32 ComData::gpssec() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.gpsSec)
  return gpssec_;
}
void ComData::set_gpssec(::google::protobuf::uint32 value) {
  
  gpssec_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.gpsSec)
}

// uint32 gpsnSec = 6;
void ComData::clear_gpsnsec() {
  gpsnsec_ = 0u;
}
::google::protobuf::uint32 ComData::gpsnsec() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.gpsnSec)
  return gpsnsec_;
}
void ComData::set_gpsnsec(::google::protobuf::uint32 value) {
  
  gpsnsec_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.gpsnSec)
}

// uint32 faultmSec = 7;
void ComData::clear_faultmsec() {
  faultmsec_ = 0u;
}
::google::protobuf::uint32 ComData::faultmsec() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.faultmSec)
  return faultmsec_;
}
void ComData::set_faultmsec(::google::protobuf::uint32 value) {
  
  faultmsec_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.faultmSec)
}

// uint32 ReplayChannel = 8;
void ComData::clear_replaychannel() {
  replaychannel_ = 0u;
}
::google::protobuf::uint32 ComData::replaychannel() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.ReplayChannel)
  return replaychannel_;
}
void ComData::set_replaychannel(::google::protobuf::uint32 value) {
  
  replaychannel_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.ReplayChannel)
}

// uint32 ReplayChannel2 = 9;
void ComData::clear_replaychannel2() {
  replaychannel2_ = 0u;
}
::google::protobuf::uint32 ComData::replaychannel2() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.ReplayChannel2)
  return replaychannel2_;
}
void ComData::set_replaychannel2(::google::protobuf::uint32 value) {
  
  replaychannel2_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.ReplayChannel2)
}

// uint32 freq = 10;
void ComData::clear_freq() {
  freq_ = 0u;
}
::google::protobuf::uint32 ComData::freq() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.freq)
  return freq_;
}
void ComData::set_freq(::google::protobuf::uint32 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.freq)
}

// uint32 loopFlag = 11;
void ComData::clear_loopflag() {
  loopflag_ = 0u;
}
::google::protobuf::uint32 ComData::loopflag() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.loopFlag)
  return loopflag_;
}
void ComData::set_loopflag(::google::protobuf::uint32 value) {
  
  loopflag_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.loopFlag)
}

// uint32 faultStartPoint = 12;
void ComData::clear_faultstartpoint() {
  faultstartpoint_ = 0u;
}
::google::protobuf::uint32 ComData::faultstartpoint() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.faultStartPoint)
  return faultstartpoint_;
}
void ComData::set_faultstartpoint(::google::protobuf::uint32 value) {
  
  faultstartpoint_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.faultStartPoint)
}

// float fre = 13;
void ComData::clear_fre() {
  fre_ = 0;
}
float ComData::fre() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.fre)
  return fre_;
}
void ComData::set_fre(float value) {
  
  fre_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.fre)
}

// uint32 nSamp = 14;
void ComData::clear_nsamp() {
  nsamp_ = 0u;
}
::google::protobuf::uint32 ComData::nsamp() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nSamp)
  return nsamp_;
}
void ComData::set_nsamp(::google::protobuf::uint32 value) {
  
  nsamp_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nSamp)
}

// uint32 nEndSamp = 15;
void ComData::clear_nendsamp() {
  nendsamp_ = 0u;
}
::google::protobuf::uint32 ComData::nendsamp() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nEndSamp)
  return nendsamp_;
}
void ComData::set_nendsamp(::google::protobuf::uint32 value) {
  
  nendsamp_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nEndSamp)
}

// uint32 nIsloop = 16;
void ComData::clear_nisloop() {
  nisloop_ = 0u;
}
::google::protobuf::uint32 ComData::nisloop() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nIsloop)
  return nisloop_;
}
void ComData::set_nisloop(::google::protobuf::uint32 value) {
  
  nisloop_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nIsloop)
}

// uint32 nCycleNum = 17;
void ComData::clear_ncyclenum() {
  ncyclenum_ = 0u;
}
::google::protobuf::uint32 ComData::ncyclenum() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nCycleNum)
  return ncyclenum_;
}
void ComData::set_ncyclenum(::google::protobuf::uint32 value) {
  
  ncyclenum_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nCycleNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Item::kOinfoFieldNumber;
const int Item::kOdataFieldNumber;
const int Item::kOcomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Item::Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Relaytest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:relaytest.Item)
}
Item::Item(const Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_oinfo()) {
    oinfo_ = new ::relaytest::ChannelInfo(*from.oinfo_);
  } else {
    oinfo_ = NULL;
  }
  if (from.has_odata()) {
    odata_ = new ::relaytest::ChannelData(*from.odata_);
  } else {
    odata_ = NULL;
  }
  if (from.has_ocomdata()) {
    ocomdata_ = new ::relaytest::ComData(*from.ocomdata_);
  } else {
    ocomdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:relaytest.Item)
}

void Item::SharedCtor() {
  ::memset(&oinfo_, 0, reinterpret_cast<char*>(&ocomdata_) -
    reinterpret_cast<char*>(&oinfo_) + sizeof(ocomdata_));
  _cached_size_ = 0;
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:relaytest.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != internal_default_instance()) {
    delete oinfo_;
  }
  if (this != internal_default_instance()) {
    delete odata_;
  }
  if (this != internal_default_instance()) {
    delete ocomdata_;
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[3].descriptor;
}

const Item& Item::default_instance() {
  protobuf_Relaytest_2eproto::InitDefaults();
  return *internal_default_instance();
}

Item* Item::New(::google::protobuf::Arena* arena) const {
  Item* n = new Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:relaytest.Item)
  if (GetArenaNoVirtual() == NULL && oinfo_ != NULL) {
    delete oinfo_;
  }
  oinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && odata_ != NULL) {
    delete odata_;
  }
  odata_ = NULL;
  if (GetArenaNoVirtual() == NULL && ocomdata_ != NULL) {
    delete ocomdata_;
  }
  ocomdata_ = NULL;
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:relaytest.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .relaytest.ChannelInfo oinfo = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .relaytest.ChannelData odata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .relaytest.ComData ocomData = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ocomdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:relaytest.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:relaytest.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:relaytest.Item)
  // .relaytest.ChannelInfo oinfo = 1;
  if (this->has_oinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->oinfo_, output);
  }

  // .relaytest.ChannelData odata = 2;
  if (this->has_odata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->odata_, output);
  }

  // .relaytest.ComData ocomData = 3;
  if (this->has_ocomdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ocomdata_, output);
  }

  // @@protoc_insertion_point(serialize_end:relaytest.Item)
}

::google::protobuf::uint8* Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:relaytest.Item)
  // .relaytest.ChannelInfo oinfo = 1;
  if (this->has_oinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->oinfo_, false, target);
  }

  // .relaytest.ChannelData odata = 2;
  if (this->has_odata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->odata_, false, target);
  }

  // .relaytest.ComData ocomData = 3;
  if (this->has_ocomdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ocomdata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:relaytest.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relaytest.Item)
  size_t total_size = 0;

  // .relaytest.ChannelInfo oinfo = 1;
  if (this->has_oinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oinfo_);
  }

  // .relaytest.ChannelData odata = 2;
  if (this->has_odata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->odata_);
  }

  // .relaytest.ComData ocomData = 3;
  if (this->has_ocomdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ocomdata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relaytest.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relaytest.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relaytest.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relaytest.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_oinfo()) {
    mutable_oinfo()->::relaytest::ChannelInfo::MergeFrom(from.oinfo());
  }
  if (from.has_odata()) {
    mutable_odata()->::relaytest::ChannelData::MergeFrom(from.odata());
  }
  if (from.has_ocomdata()) {
    mutable_ocomdata()->::relaytest::ComData::MergeFrom(from.ocomdata());
  }
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relaytest.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relaytest.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::Swap(Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Item::InternalSwap(Item* other) {
  std::swap(oinfo_, other->oinfo_);
  std::swap(odata_, other->odata_);
  std::swap(ocomdata_, other->ocomdata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Item

// .relaytest.ChannelInfo oinfo = 1;
bool Item::has_oinfo() const {
  return this != internal_default_instance() && oinfo_ != NULL;
}
void Item::clear_oinfo() {
  if (GetArenaNoVirtual() == NULL && oinfo_ != NULL) delete oinfo_;
  oinfo_ = NULL;
}
const ::relaytest::ChannelInfo& Item::oinfo() const {
  // @@protoc_insertion_point(field_get:relaytest.Item.oinfo)
  return oinfo_ != NULL ? *oinfo_
                         : *::relaytest::ChannelInfo::internal_default_instance();
}
::relaytest::ChannelInfo* Item::mutable_oinfo() {
  
  if (oinfo_ == NULL) {
    oinfo_ = new ::relaytest::ChannelInfo;
  }
  // @@protoc_insertion_point(field_mutable:relaytest.Item.oinfo)
  return oinfo_;
}
::relaytest::ChannelInfo* Item::release_oinfo() {
  // @@protoc_insertion_point(field_release:relaytest.Item.oinfo)
  
  ::relaytest::ChannelInfo* temp = oinfo_;
  oinfo_ = NULL;
  return temp;
}
void Item::set_allocated_oinfo(::relaytest::ChannelInfo* oinfo) {
  delete oinfo_;
  oinfo_ = oinfo;
  if (oinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:relaytest.Item.oinfo)
}

// .relaytest.ChannelData odata = 2;
bool Item::has_odata() const {
  return this != internal_default_instance() && odata_ != NULL;
}
void Item::clear_odata() {
  if (GetArenaNoVirtual() == NULL && odata_ != NULL) delete odata_;
  odata_ = NULL;
}
const ::relaytest::ChannelData& Item::odata() const {
  // @@protoc_insertion_point(field_get:relaytest.Item.odata)
  return odata_ != NULL ? *odata_
                         : *::relaytest::ChannelData::internal_default_instance();
}
::relaytest::ChannelData* Item::mutable_odata() {
  
  if (odata_ == NULL) {
    odata_ = new ::relaytest::ChannelData;
  }
  // @@protoc_insertion_point(field_mutable:relaytest.Item.odata)
  return odata_;
}
::relaytest::ChannelData* Item::release_odata() {
  // @@protoc_insertion_point(field_release:relaytest.Item.odata)
  
  ::relaytest::ChannelData* temp = odata_;
  odata_ = NULL;
  return temp;
}
void Item::set_allocated_odata(::relaytest::ChannelData* odata) {
  delete odata_;
  odata_ = odata;
  if (odata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:relaytest.Item.odata)
}

// .relaytest.ComData ocomData = 3;
bool Item::has_ocomdata() const {
  return this != internal_default_instance() && ocomdata_ != NULL;
}
void Item::clear_ocomdata() {
  if (GetArenaNoVirtual() == NULL && ocomdata_ != NULL) delete ocomdata_;
  ocomdata_ = NULL;
}
const ::relaytest::ComData& Item::ocomdata() const {
  // @@protoc_insertion_point(field_get:relaytest.Item.ocomData)
  return ocomdata_ != NULL ? *ocomdata_
                         : *::relaytest::ComData::internal_default_instance();
}
::relaytest::ComData* Item::mutable_ocomdata() {
  
  if (ocomdata_ == NULL) {
    ocomdata_ = new ::relaytest::ComData;
  }
  // @@protoc_insertion_point(field_mutable:relaytest.Item.ocomData)
  return ocomdata_;
}
::relaytest::ComData* Item::release_ocomdata() {
  // @@protoc_insertion_point(field_release:relaytest.Item.ocomData)
  
  ::relaytest::ComData* temp = ocomdata_;
  ocomdata_ = NULL;
  return temp;
}
void Item::set_allocated_ocomdata(::relaytest::ComData* ocomdata) {
  delete ocomdata_;
  ocomdata_ = ocomdata;
  if (ocomdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:relaytest.Item.ocomData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelData::kVaFieldNumber;
const int ChannelData::kVbFieldNumber;
const int ChannelData::kVcFieldNumber;
const int ChannelData::kIaFieldNumber;
const int ChannelData::kIbFieldNumber;
const int ChannelData::kIcFieldNumber;
const int ChannelData::kVapFieldNumber;
const int ChannelData::kVbpFieldNumber;
const int ChannelData::kVcpFieldNumber;
const int ChannelData::kIapFieldNumber;
const int ChannelData::kIbpFieldNumber;
const int ChannelData::kIcpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelData::ChannelData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Relaytest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:relaytest.ChannelData)
}
ChannelData::ChannelData(const ChannelData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      va_(from.va_),
      vb_(from.vb_),
      vc_(from.vc_),
      ia_(from.ia_),
      ib_(from.ib_),
      ic_(from.ic_),
      vap_(from.vap_),
      vbp_(from.vbp_),
      vcp_(from.vcp_),
      iap_(from.iap_),
      ibp_(from.ibp_),
      icp_(from.icp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:relaytest.ChannelData)
}

void ChannelData::SharedCtor() {
  _cached_size_ = 0;
}

ChannelData::~ChannelData() {
  // @@protoc_insertion_point(destructor:relaytest.ChannelData)
  SharedDtor();
}

void ChannelData::SharedDtor() {
}

void ChannelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelData::descriptor() {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[4].descriptor;
}

const ChannelData& ChannelData::default_instance() {
  protobuf_Relaytest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelData* ChannelData::New(::google::protobuf::Arena* arena) const {
  ChannelData* n = new ChannelData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:relaytest.ChannelData)
  va_.Clear();
  vb_.Clear();
  vc_.Clear();
  ia_.Clear();
  ib_.Clear();
  ic_.Clear();
  vap_.Clear();
  vbp_.Clear();
  vcp_.Clear();
  iap_.Clear();
  ibp_.Clear();
  icp_.Clear();
}

bool ChannelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:relaytest.ChannelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float Va = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_va())));
        } else if (tag == 13u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_va())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Vb = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vb())));
        } else if (tag == 21u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_vb())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Vc = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vc())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_vc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Ia = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ia())));
        } else if (tag == 37u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_ia())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Ib = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ib())));
        } else if (tag == 45u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_ib())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Ic = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ic())));
        } else if (tag == 53u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_ic())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Vap = 7;
      case 7: {
        if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vap())));
        } else if (tag == 61u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_vap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Vbp = 8;
      case 8: {
        if (tag == 66u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vbp())));
        } else if (tag == 69u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_vbp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Vcp = 9;
      case 9: {
        if (tag == 74u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vcp())));
        } else if (tag == 77u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_vcp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Iap = 10;
      case 10: {
        if (tag == 82u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_iap())));
        } else if (tag == 85u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_iap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Ibp = 11;
      case 11: {
        if (tag == 90u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ibp())));
        } else if (tag == 93u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_ibp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Icp = 12;
      case 12: {
        if (tag == 98u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_icp())));
        } else if (tag == 101u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_icp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:relaytest.ChannelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:relaytest.ChannelData)
  return false;
#undef DO_
}

void ChannelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:relaytest.ChannelData)
  // repeated float Va = 1;
  if (this->va_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_va_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->va().data(), this->va_size(), output);
  }

  // repeated float Vb = 2;
  if (this->vb_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vb_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vb().data(), this->vb_size(), output);
  }

  // repeated float Vc = 3;
  if (this->vc_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vc_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vc().data(), this->vc_size(), output);
  }

  // repeated float Ia = 4;
  if (this->ia_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ia_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ia().data(), this->ia_size(), output);
  }

  // repeated float Ib = 5;
  if (this->ib_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ib_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ib().data(), this->ib_size(), output);
  }

  // repeated float Ic = 6;
  if (this->ic_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ic_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ic().data(), this->ic_size(), output);
  }

  // repeated float Vap = 7;
  if (this->vap_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vap_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vap().data(), this->vap_size(), output);
  }

  // repeated float Vbp = 8;
  if (this->vbp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vbp_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vbp().data(), this->vbp_size(), output);
  }

  // repeated float Vcp = 9;
  if (this->vcp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vcp_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vcp().data(), this->vcp_size(), output);
  }

  // repeated float Iap = 10;
  if (this->iap_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_iap_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->iap().data(), this->iap_size(), output);
  }

  // repeated float Ibp = 11;
  if (this->ibp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ibp_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ibp().data(), this->ibp_size(), output);
  }

  // repeated float Icp = 12;
  if (this->icp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_icp_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->icp().data(), this->icp_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:relaytest.ChannelData)
}

::google::protobuf::uint8* ChannelData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:relaytest.ChannelData)
  // repeated float Va = 1;
  if (this->va_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _va_cached_byte_size_, target);
  }
  for (int i = 0; i < this->va_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->va(i), target);
  }

  // repeated float Vb = 2;
  if (this->vb_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vb_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vb(i), target);
  }

  // repeated float Vc = 3;
  if (this->vc_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vc_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vc(i), target);
  }

  // repeated float Ia = 4;
  if (this->ia_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ia_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ia_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ia(i), target);
  }

  // repeated float Ib = 5;
  if (this->ib_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ib_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ib_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ib(i), target);
  }

  // repeated float Ic = 6;
  if (this->ic_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ic_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ic(i), target);
  }

  // repeated float Vap = 7;
  if (this->vap_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vap_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vap(i), target);
  }

  // repeated float Vbp = 8;
  if (this->vbp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vbp_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vbp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vbp(i), target);
  }

  // repeated float Vcp = 9;
  if (this->vcp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vcp_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vcp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vcp(i), target);
  }

  // repeated float Iap = 10;
  if (this->iap_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _iap_cached_byte_size_, target);
  }
  for (int i = 0; i < this->iap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->iap(i), target);
  }

  // repeated float Ibp = 11;
  if (this->ibp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ibp_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ibp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ibp(i), target);
  }

  // repeated float Icp = 12;
  if (this->icp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _icp_cached_byte_size_, target);
  }
  for (int i = 0; i < this->icp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->icp(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:relaytest.ChannelData)
  return target;
}

size_t ChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:relaytest.ChannelData)
  size_t total_size = 0;

  // repeated float Va = 1;
  {
    unsigned int count = this->va_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _va_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Vb = 2;
  {
    unsigned int count = this->vb_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vb_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Vc = 3;
  {
    unsigned int count = this->vc_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vc_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Ia = 4;
  {
    unsigned int count = this->ia_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ia_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Ib = 5;
  {
    unsigned int count = this->ib_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ib_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Ic = 6;
  {
    unsigned int count = this->ic_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ic_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Vap = 7;
  {
    unsigned int count = this->vap_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vap_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Vbp = 8;
  {
    unsigned int count = this->vbp_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vbp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Vcp = 9;
  {
    unsigned int count = this->vcp_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vcp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Iap = 10;
  {
    unsigned int count = this->iap_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _iap_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Ibp = 11;
  {
    unsigned int count = this->ibp_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ibp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float Icp = 12;
  {
    unsigned int count = this->icp_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _icp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:relaytest.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:relaytest.ChannelData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:relaytest.ChannelData)
    MergeFrom(*source);
  }
}

void ChannelData::MergeFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:relaytest.ChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  va_.MergeFrom(from.va_);
  vb_.MergeFrom(from.vb_);
  vc_.MergeFrom(from.vc_);
  ia_.MergeFrom(from.ia_);
  ib_.MergeFrom(from.ib_);
  ic_.MergeFrom(from.ic_);
  vap_.MergeFrom(from.vap_);
  vbp_.MergeFrom(from.vbp_);
  vcp_.MergeFrom(from.vcp_);
  iap_.MergeFrom(from.iap_);
  ibp_.MergeFrom(from.ibp_);
  icp_.MergeFrom(from.icp_);
}

void ChannelData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:relaytest.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelData::CopyFrom(const ChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:relaytest.ChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelData::IsInitialized() const {
  return true;
}

void ChannelData::Swap(ChannelData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelData::InternalSwap(ChannelData* other) {
  va_.UnsafeArenaSwap(&other->va_);
  vb_.UnsafeArenaSwap(&other->vb_);
  vc_.UnsafeArenaSwap(&other->vc_);
  ia_.UnsafeArenaSwap(&other->ia_);
  ib_.UnsafeArenaSwap(&other->ib_);
  ic_.UnsafeArenaSwap(&other->ic_);
  vap_.UnsafeArenaSwap(&other->vap_);
  vbp_.UnsafeArenaSwap(&other->vbp_);
  vcp_.UnsafeArenaSwap(&other->vcp_);
  iap_.UnsafeArenaSwap(&other->iap_);
  ibp_.UnsafeArenaSwap(&other->ibp_);
  icp_.UnsafeArenaSwap(&other->icp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelData::GetMetadata() const {
  protobuf_Relaytest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Relaytest_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelData

// repeated float Va = 1;
int ChannelData::va_size() const {
  return va_.size();
}
void ChannelData::clear_va() {
  va_.Clear();
}
float ChannelData::va(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Va)
  return va_.Get(index);
}
void ChannelData::set_va(int index, float value) {
  va_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Va)
}
void ChannelData::add_va(float value) {
  va_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Va)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::va() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Va)
  return va_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_va() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Va)
  return &va_;
}

// repeated float Vb = 2;
int ChannelData::vb_size() const {
  return vb_.size();
}
void ChannelData::clear_vb() {
  vb_.Clear();
}
float ChannelData::vb(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vb)
  return vb_.Get(index);
}
void ChannelData::set_vb(int index, float value) {
  vb_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vb)
}
void ChannelData::add_vb(float value) {
  vb_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vb)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::vb() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vb)
  return vb_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vb() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vb)
  return &vb_;
}

// repeated float Vc = 3;
int ChannelData::vc_size() const {
  return vc_.size();
}
void ChannelData::clear_vc() {
  vc_.Clear();
}
float ChannelData::vc(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vc)
  return vc_.Get(index);
}
void ChannelData::set_vc(int index, float value) {
  vc_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vc)
}
void ChannelData::add_vc(float value) {
  vc_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vc)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::vc() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vc)
  return vc_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vc() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vc)
  return &vc_;
}

// repeated float Ia = 4;
int ChannelData::ia_size() const {
  return ia_.size();
}
void ChannelData::clear_ia() {
  ia_.Clear();
}
float ChannelData::ia(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ia)
  return ia_.Get(index);
}
void ChannelData::set_ia(int index, float value) {
  ia_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ia)
}
void ChannelData::add_ia(float value) {
  ia_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ia)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::ia() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ia)
  return ia_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ia() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ia)
  return &ia_;
}

// repeated float Ib = 5;
int ChannelData::ib_size() const {
  return ib_.size();
}
void ChannelData::clear_ib() {
  ib_.Clear();
}
float ChannelData::ib(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ib)
  return ib_.Get(index);
}
void ChannelData::set_ib(int index, float value) {
  ib_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ib)
}
void ChannelData::add_ib(float value) {
  ib_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ib)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::ib() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ib)
  return ib_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ib() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ib)
  return &ib_;
}

// repeated float Ic = 6;
int ChannelData::ic_size() const {
  return ic_.size();
}
void ChannelData::clear_ic() {
  ic_.Clear();
}
float ChannelData::ic(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ic)
  return ic_.Get(index);
}
void ChannelData::set_ic(int index, float value) {
  ic_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ic)
}
void ChannelData::add_ic(float value) {
  ic_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ic)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::ic() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ic)
  return ic_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ic() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ic)
  return &ic_;
}

// repeated float Vap = 7;
int ChannelData::vap_size() const {
  return vap_.size();
}
void ChannelData::clear_vap() {
  vap_.Clear();
}
float ChannelData::vap(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vap)
  return vap_.Get(index);
}
void ChannelData::set_vap(int index, float value) {
  vap_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vap)
}
void ChannelData::add_vap(float value) {
  vap_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vap)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::vap() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vap)
  return vap_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vap() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vap)
  return &vap_;
}

// repeated float Vbp = 8;
int ChannelData::vbp_size() const {
  return vbp_.size();
}
void ChannelData::clear_vbp() {
  vbp_.Clear();
}
float ChannelData::vbp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vbp)
  return vbp_.Get(index);
}
void ChannelData::set_vbp(int index, float value) {
  vbp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vbp)
}
void ChannelData::add_vbp(float value) {
  vbp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vbp)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::vbp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vbp)
  return vbp_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vbp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vbp)
  return &vbp_;
}

// repeated float Vcp = 9;
int ChannelData::vcp_size() const {
  return vcp_.size();
}
void ChannelData::clear_vcp() {
  vcp_.Clear();
}
float ChannelData::vcp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vcp)
  return vcp_.Get(index);
}
void ChannelData::set_vcp(int index, float value) {
  vcp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vcp)
}
void ChannelData::add_vcp(float value) {
  vcp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vcp)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::vcp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vcp)
  return vcp_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vcp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vcp)
  return &vcp_;
}

// repeated float Iap = 10;
int ChannelData::iap_size() const {
  return iap_.size();
}
void ChannelData::clear_iap() {
  iap_.Clear();
}
float ChannelData::iap(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Iap)
  return iap_.Get(index);
}
void ChannelData::set_iap(int index, float value) {
  iap_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Iap)
}
void ChannelData::add_iap(float value) {
  iap_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Iap)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::iap() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Iap)
  return iap_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_iap() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Iap)
  return &iap_;
}

// repeated float Ibp = 11;
int ChannelData::ibp_size() const {
  return ibp_.size();
}
void ChannelData::clear_ibp() {
  ibp_.Clear();
}
float ChannelData::ibp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ibp)
  return ibp_.Get(index);
}
void ChannelData::set_ibp(int index, float value) {
  ibp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ibp)
}
void ChannelData::add_ibp(float value) {
  ibp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ibp)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::ibp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ibp)
  return ibp_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ibp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ibp)
  return &ibp_;
}

// repeated float Icp = 12;
int ChannelData::icp_size() const {
  return icp_.size();
}
void ChannelData::clear_icp() {
  icp_.Clear();
}
float ChannelData::icp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Icp)
  return icp_.Get(index);
}
void ChannelData::set_icp(int index, float value) {
  icp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Icp)
}
void ChannelData::add_icp(float value) {
  icp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Icp)
}
const ::google::protobuf::RepeatedField< float >&
ChannelData::icp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Icp)
  return icp_;
}
::google::protobuf::RepeatedField< float >*
ChannelData::mutable_icp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Icp)
  return &icp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace relaytest

// @@protoc_insertion_point(global_scope)
