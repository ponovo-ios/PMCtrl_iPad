// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "structdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace structdata {
class channelparaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channelpara> {
} _channelpara_default_instance_;
class channelsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channels> {
} _channels_default_instance_;
class dataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<data> {
} _data_default_instance_;

namespace protobuf_structdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelpara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelpara, famptitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelpara, fphase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channelpara, ffre_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, channelvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channels, ncount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(data, channel_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(channelpara)},
  { 7, -1, sizeof(channels)},
  { 13, -1, sizeof(data)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_channelpara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_data_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "structdata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _channelpara_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _channels_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _data_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _channelpara_default_instance_.DefaultConstruct();
  _channels_default_instance_.DefaultConstruct();
  _data_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020structdata.proto\022\nstructdata\"\?\n\013channe"
      "lpara\022\022\n\nfamptitude\030\001 \001(\002\022\016\n\006fphase\030\002 \001("
      "\002\022\014\n\004ffre\030\003 \001(\002\"I\n\010channels\022-\n\014channelva"
      "lue\030\001 \003(\0132\027.structdata.channelpara\022\016\n\006nC"
      "ount\030\002 \001(\r\"-\n\004data\022%\n\007channel\030\001 \003(\0132\024.st"
      "ructdata.channelsb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "structdata.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_structdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channelpara::kFamptitudeFieldNumber;
const int channelpara::kFphaseFieldNumber;
const int channelpara::kFfreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channelpara::channelpara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_structdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:structdata.channelpara)
}
channelpara::channelpara(const channelpara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&famptitude_, &from.famptitude_,
    reinterpret_cast<char*>(&ffre_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(ffre_));
  // @@protoc_insertion_point(copy_constructor:structdata.channelpara)
}

void channelpara::SharedCtor() {
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&ffre_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(ffre_));
  _cached_size_ = 0;
}

channelpara::~channelpara() {
  // @@protoc_insertion_point(destructor:structdata.channelpara)
  SharedDtor();
}

void channelpara::SharedDtor() {
}

void channelpara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channelpara::descriptor() {
  protobuf_structdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structdata_2eproto::file_level_metadata[0].descriptor;
}

const channelpara& channelpara::default_instance() {
  protobuf_structdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

channelpara* channelpara::New(::google::protobuf::Arena* arena) const {
  channelpara* n = new channelpara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channelpara::Clear() {
// @@protoc_insertion_point(message_clear_start:structdata.channelpara)
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&ffre_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(ffre_));
}

bool channelpara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:structdata.channelpara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float famptitude = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &famptitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fphase = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ffre = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ffre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:structdata.channelpara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:structdata.channelpara)
  return false;
#undef DO_
}

void channelpara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:structdata.channelpara)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->famptitude(), output);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fphase(), output);
  }

  // float ffre = 3;
  if (this->ffre() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ffre(), output);
  }

  // @@protoc_insertion_point(serialize_end:structdata.channelpara)
}

::google::protobuf::uint8* channelpara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:structdata.channelpara)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->famptitude(), target);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fphase(), target);
  }

  // float ffre = 3;
  if (this->ffre() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ffre(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:structdata.channelpara)
  return target;
}

size_t channelpara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structdata.channelpara)
  size_t total_size = 0;

  // float famptitude = 1;
  if (this->famptitude() != 0) {
    total_size += 1 + 4;
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    total_size += 1 + 4;
  }

  // float ffre = 3;
  if (this->ffre() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channelpara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structdata.channelpara)
  GOOGLE_DCHECK_NE(&from, this);
  const channelpara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channelpara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structdata.channelpara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structdata.channelpara)
    MergeFrom(*source);
  }
}

void channelpara::MergeFrom(const channelpara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structdata.channelpara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.famptitude() != 0) {
    set_famptitude(from.famptitude());
  }
  if (from.fphase() != 0) {
    set_fphase(from.fphase());
  }
  if (from.ffre() != 0) {
    set_ffre(from.ffre());
  }
}

void channelpara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structdata.channelpara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channelpara::CopyFrom(const channelpara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structdata.channelpara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channelpara::IsInitialized() const {
  return true;
}

void channelpara::Swap(channelpara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channelpara::InternalSwap(channelpara* other) {
  std::swap(famptitude_, other->famptitude_);
  std::swap(fphase_, other->fphase_);
  std::swap(ffre_, other->ffre_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channelpara::GetMetadata() const {
  protobuf_structdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structdata_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channelpara

// float famptitude = 1;
void channelpara::clear_famptitude() {
  famptitude_ = 0;
}
float channelpara::famptitude() const {
  // @@protoc_insertion_point(field_get:structdata.channelpara.famptitude)
  return famptitude_;
}
void channelpara::set_famptitude(float value) {
  
  famptitude_ = value;
  // @@protoc_insertion_point(field_set:structdata.channelpara.famptitude)
}

// float fphase = 2;
void channelpara::clear_fphase() {
  fphase_ = 0;
}
float channelpara::fphase() const {
  // @@protoc_insertion_point(field_get:structdata.channelpara.fphase)
  return fphase_;
}
void channelpara::set_fphase(float value) {
  
  fphase_ = value;
  // @@protoc_insertion_point(field_set:structdata.channelpara.fphase)
}

// float ffre = 3;
void channelpara::clear_ffre() {
  ffre_ = 0;
}
float channelpara::ffre() const {
  // @@protoc_insertion_point(field_get:structdata.channelpara.ffre)
  return ffre_;
}
void channelpara::set_ffre(float value) {
  
  ffre_ = value;
  // @@protoc_insertion_point(field_set:structdata.channelpara.ffre)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channels::kChannelvalueFieldNumber;
const int channels::kNCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channels::channels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_structdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:structdata.channels)
}
channels::channels(const channels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channelvalue_(from.channelvalue_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ncount_ = from.ncount_;
  // @@protoc_insertion_point(copy_constructor:structdata.channels)
}

void channels::SharedCtor() {
  ncount_ = 0u;
  _cached_size_ = 0;
}

channels::~channels() {
  // @@protoc_insertion_point(destructor:structdata.channels)
  SharedDtor();
}

void channels::SharedDtor() {
}

void channels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channels::descriptor() {
  protobuf_structdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structdata_2eproto::file_level_metadata[1].descriptor;
}

const channels& channels::default_instance() {
  protobuf_structdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

channels* channels::New(::google::protobuf::Arena* arena) const {
  channels* n = new channels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channels::Clear() {
// @@protoc_insertion_point(message_clear_start:structdata.channels)
  channelvalue_.Clear();
  ncount_ = 0u;
}

bool channels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:structdata.channels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .structdata.channelpara channelvalue = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channelvalue()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 nCount = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:structdata.channels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:structdata.channels)
  return false;
#undef DO_
}

void channels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:structdata.channels)
  // repeated .structdata.channelpara channelvalue = 1;
  for (unsigned int i = 0, n = this->channelvalue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channelvalue(i), output);
  }

  // uint32 nCount = 2;
  if (this->ncount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ncount(), output);
  }

  // @@protoc_insertion_point(serialize_end:structdata.channels)
}

::google::protobuf::uint8* channels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:structdata.channels)
  // repeated .structdata.channelpara channelvalue = 1;
  for (unsigned int i = 0, n = this->channelvalue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->channelvalue(i), false, target);
  }

  // uint32 nCount = 2;
  if (this->ncount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ncount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:structdata.channels)
  return target;
}

size_t channels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structdata.channels)
  size_t total_size = 0;

  // repeated .structdata.channelpara channelvalue = 1;
  {
    unsigned int count = this->channelvalue_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channelvalue(i));
    }
  }

  // uint32 nCount = 2;
  if (this->ncount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structdata.channels)
  GOOGLE_DCHECK_NE(&from, this);
  const channels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structdata.channels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structdata.channels)
    MergeFrom(*source);
  }
}

void channels::MergeFrom(const channels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structdata.channels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelvalue_.MergeFrom(from.channelvalue_);
  if (from.ncount() != 0) {
    set_ncount(from.ncount());
  }
}

void channels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structdata.channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channels::CopyFrom(const channels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structdata.channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channels::IsInitialized() const {
  return true;
}

void channels::Swap(channels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channels::InternalSwap(channels* other) {
  channelvalue_.UnsafeArenaSwap(&other->channelvalue_);
  std::swap(ncount_, other->ncount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channels::GetMetadata() const {
  protobuf_structdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structdata_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channels

// repeated .structdata.channelpara channelvalue = 1;
int channels::channelvalue_size() const {
  return channelvalue_.size();
}
void channels::clear_channelvalue() {
  channelvalue_.Clear();
}
const ::structdata::channelpara& channels::channelvalue(int index) const {
  // @@protoc_insertion_point(field_get:structdata.channels.channelvalue)
  return channelvalue_.Get(index);
}
::structdata::channelpara* channels::mutable_channelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:structdata.channels.channelvalue)
  return channelvalue_.Mutable(index);
}
::structdata::channelpara* channels::add_channelvalue() {
  // @@protoc_insertion_point(field_add:structdata.channels.channelvalue)
  return channelvalue_.Add();
}
::google::protobuf::RepeatedPtrField< ::structdata::channelpara >*
channels::mutable_channelvalue() {
  // @@protoc_insertion_point(field_mutable_list:structdata.channels.channelvalue)
  return &channelvalue_;
}
const ::google::protobuf::RepeatedPtrField< ::structdata::channelpara >&
channels::channelvalue() const {
  // @@protoc_insertion_point(field_list:structdata.channels.channelvalue)
  return channelvalue_;
}

// uint32 nCount = 2;
void channels::clear_ncount() {
  ncount_ = 0u;
}
::google::protobuf::uint32 channels::ncount() const {
  // @@protoc_insertion_point(field_get:structdata.channels.nCount)
  return ncount_;
}
void channels::set_ncount(::google::protobuf::uint32 value) {
  
  ncount_ = value;
  // @@protoc_insertion_point(field_set:structdata.channels.nCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int data::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

data::data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_structdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:structdata.data)
}
data::data(const data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_(from.channel_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:structdata.data)
}

void data::SharedCtor() {
  _cached_size_ = 0;
}

data::~data() {
  // @@protoc_insertion_point(destructor:structdata.data)
  SharedDtor();
}

void data::SharedDtor() {
}

void data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* data::descriptor() {
  protobuf_structdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structdata_2eproto::file_level_metadata[2].descriptor;
}

const data& data::default_instance() {
  protobuf_structdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

data* data::New(::google::protobuf::Arena* arena) const {
  data* n = new data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void data::Clear() {
// @@protoc_insertion_point(message_clear_start:structdata.data)
  channel_.Clear();
}

bool data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:structdata.data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .structdata.channels channel = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channel()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:structdata.data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:structdata.data)
  return false;
#undef DO_
}

void data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:structdata.data)
  // repeated .structdata.channels channel = 1;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel(i), output);
  }

  // @@protoc_insertion_point(serialize_end:structdata.data)
}

::google::protobuf::uint8* data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:structdata.data)
  // repeated .structdata.channels channel = 1;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->channel(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:structdata.data)
  return target;
}

size_t data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structdata.data)
  size_t total_size = 0;

  // repeated .structdata.channels channel = 1;
  {
    unsigned int count = this->channel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structdata.data)
  GOOGLE_DCHECK_NE(&from, this);
  const data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structdata.data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structdata.data)
    MergeFrom(*source);
  }
}

void data::MergeFrom(const data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structdata.data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.MergeFrom(from.channel_);
}

void data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structdata.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data::CopyFrom(const data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structdata.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data::IsInitialized() const {
  return true;
}

void data::Swap(data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void data::InternalSwap(data* other) {
  channel_.UnsafeArenaSwap(&other->channel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata data::GetMetadata() const {
  protobuf_structdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structdata_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// data

// repeated .structdata.channels channel = 1;
int data::channel_size() const {
  return channel_.size();
}
void data::clear_channel() {
  channel_.Clear();
}
const ::structdata::channels& data::channel(int index) const {
  // @@protoc_insertion_point(field_get:structdata.data.channel)
  return channel_.Get(index);
}
::structdata::channels* data::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:structdata.data.channel)
  return channel_.Mutable(index);
}
::structdata::channels* data::add_channel() {
  // @@protoc_insertion_point(field_add:structdata.data.channel)
  return channel_.Add();
}
::google::protobuf::RepeatedPtrField< ::structdata::channels >*
data::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:structdata.data.channel)
  return &channel_;
}
const ::google::protobuf::RepeatedPtrField< ::structdata::channels >&
data::channel() const {
  // @@protoc_insertion_point(field_list:structdata.data.channel)
  return channel_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace structdata

// @@protoc_insertion_point(global_scope)
