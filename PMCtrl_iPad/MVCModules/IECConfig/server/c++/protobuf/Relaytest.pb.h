// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Relaytest.proto

#ifndef PROTOBUF_Relaytest_2eproto__INCLUDED
#define PROTOBUF_Relaytest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace relaytest {
class ChannelData;
class ChannelDataDefaultTypeInternal;
extern ChannelDataDefaultTypeInternal _ChannelData_default_instance_;
class ChannelInfo;
class ChannelInfoDefaultTypeInternal;
extern ChannelInfoDefaultTypeInternal _ChannelInfo_default_instance_;
class ComData;
class ComDataDefaultTypeInternal;
extern ComDataDefaultTypeInternal _ComData_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class Items;
class ItemsDefaultTypeInternal;
extern ItemsDefaultTypeInternal _Items_default_instance_;
}  // namespace relaytest

namespace relaytest {

namespace protobuf_Relaytest_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Relaytest_2eproto

enum Version {
  version91 = 0,
  version99 = 1,
  other = 2,
  Version_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Version_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Version_IsValid(int value);
const Version Version_MIN = version91;
const Version Version_MAX = other;
const int Version_ARRAYSIZE = Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Version_descriptor();
inline const ::std::string& Version_Name(Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Version_descriptor(), value);
}
inline bool Version_Parse(
    const ::std::string& name, Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Version>(
    Version_descriptor(), name, value);
}
enum Unit {
  A = 0,
  kA = 1,
  V = 2,
  kV = 4,
  Unit_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Unit_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Unit_IsValid(int value);
const Unit Unit_MIN = A;
const Unit Unit_MAX = kV;
const int Unit_ARRAYSIZE = Unit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Unit_descriptor();
inline const ::std::string& Unit_Name(Unit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Unit_descriptor(), value);
}
inline bool Unit_Parse(
    const ::std::string& name, Unit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Unit>(
    Unit_descriptor(), name, value);
}
// ===================================================================

class ChannelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:relaytest.ChannelInfo) */ {
 public:
  ChannelInfo();
  virtual ~ChannelInfo();

  ChannelInfo(const ChannelInfo& from);

  inline ChannelInfo& operator=(const ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelInfo& default_instance();

  static inline const ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ChannelInfo*>(
               &_ChannelInfo_default_instance_);
  }

  void Swap(ChannelInfo* other);

  // implements Message ----------------------------------------------

  inline ChannelInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelInfo& from);
  void MergeFrom(const ChannelInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // string nPhase = 3;
  void clear_nphase();
  static const int kNPhaseFieldNumber = 3;
  const ::std::string& nphase() const;
  void set_nphase(const ::std::string& value);
  #if LANG_CXX11
  void set_nphase(::std::string&& value);
  #endif
  void set_nphase(const char* value);
  void set_nphase(const char* value, size_t size);
  ::std::string* mutable_nphase();
  ::std::string* release_nphase();
  void set_allocated_nphase(::std::string* nphase);

  // string PS = 14;
  void clear_ps();
  static const int kPSFieldNumber = 14;
  const ::std::string& ps() const;
  void set_ps(const ::std::string& value);
  #if LANG_CXX11
  void set_ps(::std::string&& value);
  #endif
  void set_ps(const char* value);
  void set_ps(const char* value, size_t size);
  ::std::string* mutable_ps();
  ::std::string* release_ps();
  void set_allocated_ps(::std::string* ps);

  // uint32 nIndex = 1;
  void clear_nindex();
  static const int kNIndexFieldNumber = 1;
  ::google::protobuf::uint32 nindex() const;
  void set_nindex(::google::protobuf::uint32 value);

  // uint32 nCCbm = 4;
  void clear_nccbm();
  static const int kNCCbmFieldNumber = 4;
  ::google::protobuf::uint32 nccbm() const;
  void set_nccbm(::google::protobuf::uint32 value);

  // .relaytest.Unit nUnit = 5;
  void clear_nunit();
  static const int kNUnitFieldNumber = 5;
  ::relaytest::Unit nunit() const;
  void set_nunit(::relaytest::Unit value);

  // float fCoefA = 6;
  void clear_fcoefa();
  static const int kFCoefAFieldNumber = 6;
  float fcoefa() const;
  void set_fcoefa(float value);

  // float fCoefB = 7;
  void clear_fcoefb();
  static const int kFCoefBFieldNumber = 7;
  float fcoefb() const;
  void set_fcoefb(float value);

  // float fSkew = 8;
  void clear_fskew();
  static const int kFSkewFieldNumber = 8;
  float fskew() const;
  void set_fskew(float value);

  // float fTime = 9;
  void clear_ftime();
  static const int kFTimeFieldNumber = 9;
  float ftime() const;
  void set_ftime(float value);

  // float fMin = 10;
  void clear_fmin();
  static const int kFMinFieldNumber = 10;
  float fmin() const;
  void set_fmin(float value);

  // float fMax = 11;
  void clear_fmax();
  static const int kFMaxFieldNumber = 11;
  float fmax() const;
  void set_fmax(float value);

  // float fPrimary = 12;
  void clear_fprimary();
  static const int kFPrimaryFieldNumber = 12;
  float fprimary() const;
  void set_fprimary(float value);

  // float fSecondary = 13;
  void clear_fsecondary();
  static const int kFSecondaryFieldNumber = 13;
  float fsecondary() const;
  void set_fsecondary(float value);

  // @@protoc_insertion_point(class_scope:relaytest.ChannelInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr nphase_;
  ::google::protobuf::internal::ArenaStringPtr ps_;
  ::google::protobuf::uint32 nindex_;
  ::google::protobuf::uint32 nccbm_;
  int nunit_;
  float fcoefa_;
  float fcoefb_;
  float fskew_;
  float ftime_;
  float fmin_;
  float fmax_;
  float fprimary_;
  float fsecondary_;
  mutable int _cached_size_;
  friend struct  protobuf_Relaytest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Items : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:relaytest.Items) */ {
 public:
  Items();
  virtual ~Items();

  Items(const Items& from);

  inline Items& operator=(const Items& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Items& default_instance();

  static inline const Items* internal_default_instance() {
    return reinterpret_cast<const Items*>(
               &_Items_default_instance_);
  }

  void Swap(Items* other);

  // implements Message ----------------------------------------------

  inline Items* New() const PROTOBUF_FINAL { return New(NULL); }

  Items* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Items& from);
  void MergeFrom(const Items& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Items* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .relaytest.Item oItems = 1;
  int oitems_size() const;
  void clear_oitems();
  static const int kOItemsFieldNumber = 1;
  const ::relaytest::Item& oitems(int index) const;
  ::relaytest::Item* mutable_oitems(int index);
  ::relaytest::Item* add_oitems();
  ::google::protobuf::RepeatedPtrField< ::relaytest::Item >*
      mutable_oitems();
  const ::google::protobuf::RepeatedPtrField< ::relaytest::Item >&
      oitems() const;

  // @@protoc_insertion_point(class_scope:relaytest.Items)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::relaytest::Item > oitems_;
  mutable int _cached_size_;
  friend struct  protobuf_Relaytest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:relaytest.ComData) */ {
 public:
  ComData();
  virtual ~ComData();

  ComData(const ComData& from);

  inline ComData& operator=(const ComData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComData& default_instance();

  static inline const ComData* internal_default_instance() {
    return reinterpret_cast<const ComData*>(
               &_ComData_default_instance_);
  }

  void Swap(ComData* other);

  // implements Message ----------------------------------------------

  inline ComData* New() const PROTOBUF_FINAL { return New(NULL); }

  ComData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComData& from);
  void MergeFrom(const ComData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tripType = 1;
  void clear_triptype();
  static const int kTripTypeFieldNumber = 1;
  ::google::protobuf::uint32 triptype() const;
  void set_triptype(::google::protobuf::uint32 value);

  // uint32 switchLogic = 2;
  void clear_switchlogic();
  static const int kSwitchLogicFieldNumber = 2;
  ::google::protobuf::uint32 switchlogic() const;
  void set_switchlogic(::google::protobuf::uint32 value);

  // uint32 validChannel = 3;
  void clear_validchannel();
  static const int kValidChannelFieldNumber = 3;
  ::google::protobuf::uint32 validchannel() const;
  void set_validchannel(::google::protobuf::uint32 value);

  // uint32 mDelay = 4;
  void clear_mdelay();
  static const int kMDelayFieldNumber = 4;
  ::google::protobuf::uint32 mdelay() const;
  void set_mdelay(::google::protobuf::uint32 value);

  // uint32 gpsSec = 5;
  void clear_gpssec();
  static const int kGpsSecFieldNumber = 5;
  ::google::protobuf::uint32 gpssec() const;
  void set_gpssec(::google::protobuf::uint32 value);

  // uint32 gpsnSec = 6;
  void clear_gpsnsec();
  static const int kGpsnSecFieldNumber = 6;
  ::google::protobuf::uint32 gpsnsec() const;
  void set_gpsnsec(::google::protobuf::uint32 value);

  // uint32 faultmSec = 7;
  void clear_faultmsec();
  static const int kFaultmSecFieldNumber = 7;
  ::google::protobuf::uint32 faultmsec() const;
  void set_faultmsec(::google::protobuf::uint32 value);

  // uint32 ReplayChannel = 8;
  void clear_replaychannel();
  static const int kReplayChannelFieldNumber = 8;
  ::google::protobuf::uint32 replaychannel() const;
  void set_replaychannel(::google::protobuf::uint32 value);

  // uint32 ReplayChannel2 = 9;
  void clear_replaychannel2();
  static const int kReplayChannel2FieldNumber = 9;
  ::google::protobuf::uint32 replaychannel2() const;
  void set_replaychannel2(::google::protobuf::uint32 value);

  // uint32 freq = 10;
  void clear_freq();
  static const int kFreqFieldNumber = 10;
  ::google::protobuf::uint32 freq() const;
  void set_freq(::google::protobuf::uint32 value);

  // uint32 loopFlag = 11;
  void clear_loopflag();
  static const int kLoopFlagFieldNumber = 11;
  ::google::protobuf::uint32 loopflag() const;
  void set_loopflag(::google::protobuf::uint32 value);

  // uint32 faultStartPoint = 12;
  void clear_faultstartpoint();
  static const int kFaultStartPointFieldNumber = 12;
  ::google::protobuf::uint32 faultstartpoint() const;
  void set_faultstartpoint(::google::protobuf::uint32 value);

  // float fre = 13;
  void clear_fre();
  static const int kFreFieldNumber = 13;
  float fre() const;
  void set_fre(float value);

  // uint32 nSamp = 14;
  void clear_nsamp();
  static const int kNSampFieldNumber = 14;
  ::google::protobuf::uint32 nsamp() const;
  void set_nsamp(::google::protobuf::uint32 value);

  // uint32 nEndSamp = 15;
  void clear_nendsamp();
  static const int kNEndSampFieldNumber = 15;
  ::google::protobuf::uint32 nendsamp() const;
  void set_nendsamp(::google::protobuf::uint32 value);

  // uint32 nIsloop = 16;
  void clear_nisloop();
  static const int kNIsloopFieldNumber = 16;
  ::google::protobuf::uint32 nisloop() const;
  void set_nisloop(::google::protobuf::uint32 value);

  // uint32 nCycleNum = 17;
  void clear_ncyclenum();
  static const int kNCycleNumFieldNumber = 17;
  ::google::protobuf::uint32 ncyclenum() const;
  void set_ncyclenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:relaytest.ComData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 triptype_;
  ::google::protobuf::uint32 switchlogic_;
  ::google::protobuf::uint32 validchannel_;
  ::google::protobuf::uint32 mdelay_;
  ::google::protobuf::uint32 gpssec_;
  ::google::protobuf::uint32 gpsnsec_;
  ::google::protobuf::uint32 faultmsec_;
  ::google::protobuf::uint32 replaychannel_;
  ::google::protobuf::uint32 replaychannel2_;
  ::google::protobuf::uint32 freq_;
  ::google::protobuf::uint32 loopflag_;
  ::google::protobuf::uint32 faultstartpoint_;
  float fre_;
  ::google::protobuf::uint32 nsamp_;
  ::google::protobuf::uint32 nendsamp_;
  ::google::protobuf::uint32 nisloop_;
  ::google::protobuf::uint32 ncyclenum_;
  mutable int _cached_size_;
  friend struct  protobuf_Relaytest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:relaytest.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  inline Item* New() const PROTOBUF_FINAL { return New(NULL); }

  Item* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .relaytest.ChannelInfo oinfo = 1;
  bool has_oinfo() const;
  void clear_oinfo();
  static const int kOinfoFieldNumber = 1;
  const ::relaytest::ChannelInfo& oinfo() const;
  ::relaytest::ChannelInfo* mutable_oinfo();
  ::relaytest::ChannelInfo* release_oinfo();
  void set_allocated_oinfo(::relaytest::ChannelInfo* oinfo);

  // .relaytest.ChannelData odata = 2;
  bool has_odata() const;
  void clear_odata();
  static const int kOdataFieldNumber = 2;
  const ::relaytest::ChannelData& odata() const;
  ::relaytest::ChannelData* mutable_odata();
  ::relaytest::ChannelData* release_odata();
  void set_allocated_odata(::relaytest::ChannelData* odata);

  // .relaytest.ComData ocomData = 3;
  bool has_ocomdata() const;
  void clear_ocomdata();
  static const int kOcomDataFieldNumber = 3;
  const ::relaytest::ComData& ocomdata() const;
  ::relaytest::ComData* mutable_ocomdata();
  ::relaytest::ComData* release_ocomdata();
  void set_allocated_ocomdata(::relaytest::ComData* ocomdata);

  // @@protoc_insertion_point(class_scope:relaytest.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::relaytest::ChannelInfo* oinfo_;
  ::relaytest::ChannelData* odata_;
  ::relaytest::ComData* ocomdata_;
  mutable int _cached_size_;
  friend struct  protobuf_Relaytest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:relaytest.ChannelData) */ {
 public:
  ChannelData();
  virtual ~ChannelData();

  ChannelData(const ChannelData& from);

  inline ChannelData& operator=(const ChannelData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelData& default_instance();

  static inline const ChannelData* internal_default_instance() {
    return reinterpret_cast<const ChannelData*>(
               &_ChannelData_default_instance_);
  }

  void Swap(ChannelData* other);

  // implements Message ----------------------------------------------

  inline ChannelData* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelData& from);
  void MergeFrom(const ChannelData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float Va = 1;
  int va_size() const;
  void clear_va();
  static const int kVaFieldNumber = 1;
  float va(int index) const;
  void set_va(int index, float value);
  void add_va(float value);
  const ::google::protobuf::RepeatedField< float >&
      va() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_va();

  // repeated float Vb = 2;
  int vb_size() const;
  void clear_vb();
  static const int kVbFieldNumber = 2;
  float vb(int index) const;
  void set_vb(int index, float value);
  void add_vb(float value);
  const ::google::protobuf::RepeatedField< float >&
      vb() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vb();

  // repeated float Vc = 3;
  int vc_size() const;
  void clear_vc();
  static const int kVcFieldNumber = 3;
  float vc(int index) const;
  void set_vc(int index, float value);
  void add_vc(float value);
  const ::google::protobuf::RepeatedField< float >&
      vc() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vc();

  // repeated float Ia = 4;
  int ia_size() const;
  void clear_ia();
  static const int kIaFieldNumber = 4;
  float ia(int index) const;
  void set_ia(int index, float value);
  void add_ia(float value);
  const ::google::protobuf::RepeatedField< float >&
      ia() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ia();

  // repeated float Ib = 5;
  int ib_size() const;
  void clear_ib();
  static const int kIbFieldNumber = 5;
  float ib(int index) const;
  void set_ib(int index, float value);
  void add_ib(float value);
  const ::google::protobuf::RepeatedField< float >&
      ib() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ib();

  // repeated float Ic = 6;
  int ic_size() const;
  void clear_ic();
  static const int kIcFieldNumber = 6;
  float ic(int index) const;
  void set_ic(int index, float value);
  void add_ic(float value);
  const ::google::protobuf::RepeatedField< float >&
      ic() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ic();

  // repeated float Vap = 7;
  int vap_size() const;
  void clear_vap();
  static const int kVapFieldNumber = 7;
  float vap(int index) const;
  void set_vap(int index, float value);
  void add_vap(float value);
  const ::google::protobuf::RepeatedField< float >&
      vap() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vap();

  // repeated float Vbp = 8;
  int vbp_size() const;
  void clear_vbp();
  static const int kVbpFieldNumber = 8;
  float vbp(int index) const;
  void set_vbp(int index, float value);
  void add_vbp(float value);
  const ::google::protobuf::RepeatedField< float >&
      vbp() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vbp();

  // repeated float Vcp = 9;
  int vcp_size() const;
  void clear_vcp();
  static const int kVcpFieldNumber = 9;
  float vcp(int index) const;
  void set_vcp(int index, float value);
  void add_vcp(float value);
  const ::google::protobuf::RepeatedField< float >&
      vcp() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vcp();

  // repeated float Iap = 10;
  int iap_size() const;
  void clear_iap();
  static const int kIapFieldNumber = 10;
  float iap(int index) const;
  void set_iap(int index, float value);
  void add_iap(float value);
  const ::google::protobuf::RepeatedField< float >&
      iap() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_iap();

  // repeated float Ibp = 11;
  int ibp_size() const;
  void clear_ibp();
  static const int kIbpFieldNumber = 11;
  float ibp(int index) const;
  void set_ibp(int index, float value);
  void add_ibp(float value);
  const ::google::protobuf::RepeatedField< float >&
      ibp() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ibp();

  // repeated float Icp = 12;
  int icp_size() const;
  void clear_icp();
  static const int kIcpFieldNumber = 12;
  float icp(int index) const;
  void set_icp(int index, float value);
  void add_icp(float value);
  const ::google::protobuf::RepeatedField< float >&
      icp() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_icp();

  // @@protoc_insertion_point(class_scope:relaytest.ChannelData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > va_;
  mutable int _va_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > vb_;
  mutable int _vb_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > vc_;
  mutable int _vc_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ia_;
  mutable int _ia_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ib_;
  mutable int _ib_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ic_;
  mutable int _ic_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > vap_;
  mutable int _vap_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > vbp_;
  mutable int _vbp_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > vcp_;
  mutable int _vcp_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > iap_;
  mutable int _iap_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > ibp_;
  mutable int _ibp_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > icp_;
  mutable int _icp_cached_byte_size_;
  mutable int _cached_size_;
  friend struct  protobuf_Relaytest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelInfo

// uint32 nIndex = 1;
inline void ChannelInfo::clear_nindex() {
  nindex_ = 0u;
}
inline ::google::protobuf::uint32 ChannelInfo::nindex() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nIndex)
  return nindex_;
}
inline void ChannelInfo::set_nindex(::google::protobuf::uint32 value) {
  
  nindex_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nIndex)
}

// string strName = 2;
inline void ChannelInfo::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelInfo::strname() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.strName)
  return strname_.GetNoArena();
}
inline void ChannelInfo::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.strName)
}
#if LANG_CXX11
inline void ChannelInfo::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relaytest.ChannelInfo.strName)
}
#endif
inline void ChannelInfo::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relaytest.ChannelInfo.strName)
}
inline void ChannelInfo::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relaytest.ChannelInfo.strName)
}
inline ::std::string* ChannelInfo::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:relaytest.ChannelInfo.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelInfo::release_strname() {
  // @@protoc_insertion_point(field_release:relaytest.ChannelInfo.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelInfo::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:relaytest.ChannelInfo.strName)
}

// string nPhase = 3;
inline void ChannelInfo::clear_nphase() {
  nphase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelInfo::nphase() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nPhase)
  return nphase_.GetNoArena();
}
inline void ChannelInfo::set_nphase(const ::std::string& value) {
  
  nphase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nPhase)
}
#if LANG_CXX11
inline void ChannelInfo::set_nphase(::std::string&& value) {
  
  nphase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relaytest.ChannelInfo.nPhase)
}
#endif
inline void ChannelInfo::set_nphase(const char* value) {
  
  nphase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relaytest.ChannelInfo.nPhase)
}
inline void ChannelInfo::set_nphase(const char* value, size_t size) {
  
  nphase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relaytest.ChannelInfo.nPhase)
}
inline ::std::string* ChannelInfo::mutable_nphase() {
  
  // @@protoc_insertion_point(field_mutable:relaytest.ChannelInfo.nPhase)
  return nphase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelInfo::release_nphase() {
  // @@protoc_insertion_point(field_release:relaytest.ChannelInfo.nPhase)
  
  return nphase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelInfo::set_allocated_nphase(::std::string* nphase) {
  if (nphase != NULL) {
    
  } else {
    
  }
  nphase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nphase);
  // @@protoc_insertion_point(field_set_allocated:relaytest.ChannelInfo.nPhase)
}

// uint32 nCCbm = 4;
inline void ChannelInfo::clear_nccbm() {
  nccbm_ = 0u;
}
inline ::google::protobuf::uint32 ChannelInfo::nccbm() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nCCbm)
  return nccbm_;
}
inline void ChannelInfo::set_nccbm(::google::protobuf::uint32 value) {
  
  nccbm_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nCCbm)
}

// .relaytest.Unit nUnit = 5;
inline void ChannelInfo::clear_nunit() {
  nunit_ = 0;
}
inline ::relaytest::Unit ChannelInfo::nunit() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.nUnit)
  return static_cast< ::relaytest::Unit >(nunit_);
}
inline void ChannelInfo::set_nunit(::relaytest::Unit value) {
  
  nunit_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.nUnit)
}

// float fCoefA = 6;
inline void ChannelInfo::clear_fcoefa() {
  fcoefa_ = 0;
}
inline float ChannelInfo::fcoefa() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fCoefA)
  return fcoefa_;
}
inline void ChannelInfo::set_fcoefa(float value) {
  
  fcoefa_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fCoefA)
}

// float fCoefB = 7;
inline void ChannelInfo::clear_fcoefb() {
  fcoefb_ = 0;
}
inline float ChannelInfo::fcoefb() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fCoefB)
  return fcoefb_;
}
inline void ChannelInfo::set_fcoefb(float value) {
  
  fcoefb_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fCoefB)
}

// float fSkew = 8;
inline void ChannelInfo::clear_fskew() {
  fskew_ = 0;
}
inline float ChannelInfo::fskew() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fSkew)
  return fskew_;
}
inline void ChannelInfo::set_fskew(float value) {
  
  fskew_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fSkew)
}

// float fTime = 9;
inline void ChannelInfo::clear_ftime() {
  ftime_ = 0;
}
inline float ChannelInfo::ftime() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fTime)
  return ftime_;
}
inline void ChannelInfo::set_ftime(float value) {
  
  ftime_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fTime)
}

// float fMin = 10;
inline void ChannelInfo::clear_fmin() {
  fmin_ = 0;
}
inline float ChannelInfo::fmin() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fMin)
  return fmin_;
}
inline void ChannelInfo::set_fmin(float value) {
  
  fmin_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fMin)
}

// float fMax = 11;
inline void ChannelInfo::clear_fmax() {
  fmax_ = 0;
}
inline float ChannelInfo::fmax() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fMax)
  return fmax_;
}
inline void ChannelInfo::set_fmax(float value) {
  
  fmax_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fMax)
}

// float fPrimary = 12;
inline void ChannelInfo::clear_fprimary() {
  fprimary_ = 0;
}
inline float ChannelInfo::fprimary() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fPrimary)
  return fprimary_;
}
inline void ChannelInfo::set_fprimary(float value) {
  
  fprimary_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fPrimary)
}

// float fSecondary = 13;
inline void ChannelInfo::clear_fsecondary() {
  fsecondary_ = 0;
}
inline float ChannelInfo::fsecondary() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.fSecondary)
  return fsecondary_;
}
inline void ChannelInfo::set_fsecondary(float value) {
  
  fsecondary_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.fSecondary)
}

// string PS = 14;
inline void ChannelInfo::clear_ps() {
  ps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelInfo::ps() const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelInfo.PS)
  return ps_.GetNoArena();
}
inline void ChannelInfo::set_ps(const ::std::string& value) {
  
  ps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelInfo.PS)
}
#if LANG_CXX11
inline void ChannelInfo::set_ps(::std::string&& value) {
  
  ps_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:relaytest.ChannelInfo.PS)
}
#endif
inline void ChannelInfo::set_ps(const char* value) {
  
  ps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:relaytest.ChannelInfo.PS)
}
inline void ChannelInfo::set_ps(const char* value, size_t size) {
  
  ps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:relaytest.ChannelInfo.PS)
}
inline ::std::string* ChannelInfo::mutable_ps() {
  
  // @@protoc_insertion_point(field_mutable:relaytest.ChannelInfo.PS)
  return ps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelInfo::release_ps() {
  // @@protoc_insertion_point(field_release:relaytest.ChannelInfo.PS)
  
  return ps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelInfo::set_allocated_ps(::std::string* ps) {
  if (ps != NULL) {
    
  } else {
    
  }
  ps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ps);
  // @@protoc_insertion_point(field_set_allocated:relaytest.ChannelInfo.PS)
}

// -------------------------------------------------------------------

// Items

// repeated .relaytest.Item oItems = 1;
inline int Items::oitems_size() const {
  return oitems_.size();
}
inline void Items::clear_oitems() {
  oitems_.Clear();
}
inline const ::relaytest::Item& Items::oitems(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.Items.oItems)
  return oitems_.Get(index);
}
inline ::relaytest::Item* Items::mutable_oitems(int index) {
  // @@protoc_insertion_point(field_mutable:relaytest.Items.oItems)
  return oitems_.Mutable(index);
}
inline ::relaytest::Item* Items::add_oitems() {
  // @@protoc_insertion_point(field_add:relaytest.Items.oItems)
  return oitems_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::relaytest::Item >*
Items::mutable_oitems() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.Items.oItems)
  return &oitems_;
}
inline const ::google::protobuf::RepeatedPtrField< ::relaytest::Item >&
Items::oitems() const {
  // @@protoc_insertion_point(field_list:relaytest.Items.oItems)
  return oitems_;
}

// -------------------------------------------------------------------

// ComData

// uint32 tripType = 1;
inline void ComData::clear_triptype() {
  triptype_ = 0u;
}
inline ::google::protobuf::uint32 ComData::triptype() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.tripType)
  return triptype_;
}
inline void ComData::set_triptype(::google::protobuf::uint32 value) {
  
  triptype_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.tripType)
}

// uint32 switchLogic = 2;
inline void ComData::clear_switchlogic() {
  switchlogic_ = 0u;
}
inline ::google::protobuf::uint32 ComData::switchlogic() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.switchLogic)
  return switchlogic_;
}
inline void ComData::set_switchlogic(::google::protobuf::uint32 value) {
  
  switchlogic_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.switchLogic)
}

// uint32 validChannel = 3;
inline void ComData::clear_validchannel() {
  validchannel_ = 0u;
}
inline ::google::protobuf::uint32 ComData::validchannel() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.validChannel)
  return validchannel_;
}
inline void ComData::set_validchannel(::google::protobuf::uint32 value) {
  
  validchannel_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.validChannel)
}

// uint32 mDelay = 4;
inline void ComData::clear_mdelay() {
  mdelay_ = 0u;
}
inline ::google::protobuf::uint32 ComData::mdelay() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.mDelay)
  return mdelay_;
}
inline void ComData::set_mdelay(::google::protobuf::uint32 value) {
  
  mdelay_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.mDelay)
}

// uint32 gpsSec = 5;
inline void ComData::clear_gpssec() {
  gpssec_ = 0u;
}
inline ::google::protobuf::uint32 ComData::gpssec() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.gpsSec)
  return gpssec_;
}
inline void ComData::set_gpssec(::google::protobuf::uint32 value) {
  
  gpssec_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.gpsSec)
}

// uint32 gpsnSec = 6;
inline void ComData::clear_gpsnsec() {
  gpsnsec_ = 0u;
}
inline ::google::protobuf::uint32 ComData::gpsnsec() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.gpsnSec)
  return gpsnsec_;
}
inline void ComData::set_gpsnsec(::google::protobuf::uint32 value) {
  
  gpsnsec_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.gpsnSec)
}

// uint32 faultmSec = 7;
inline void ComData::clear_faultmsec() {
  faultmsec_ = 0u;
}
inline ::google::protobuf::uint32 ComData::faultmsec() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.faultmSec)
  return faultmsec_;
}
inline void ComData::set_faultmsec(::google::protobuf::uint32 value) {
  
  faultmsec_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.faultmSec)
}

// uint32 ReplayChannel = 8;
inline void ComData::clear_replaychannel() {
  replaychannel_ = 0u;
}
inline ::google::protobuf::uint32 ComData::replaychannel() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.ReplayChannel)
  return replaychannel_;
}
inline void ComData::set_replaychannel(::google::protobuf::uint32 value) {
  
  replaychannel_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.ReplayChannel)
}

// uint32 ReplayChannel2 = 9;
inline void ComData::clear_replaychannel2() {
  replaychannel2_ = 0u;
}
inline ::google::protobuf::uint32 ComData::replaychannel2() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.ReplayChannel2)
  return replaychannel2_;
}
inline void ComData::set_replaychannel2(::google::protobuf::uint32 value) {
  
  replaychannel2_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.ReplayChannel2)
}

// uint32 freq = 10;
inline void ComData::clear_freq() {
  freq_ = 0u;
}
inline ::google::protobuf::uint32 ComData::freq() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.freq)
  return freq_;
}
inline void ComData::set_freq(::google::protobuf::uint32 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.freq)
}

// uint32 loopFlag = 11;
inline void ComData::clear_loopflag() {
  loopflag_ = 0u;
}
inline ::google::protobuf::uint32 ComData::loopflag() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.loopFlag)
  return loopflag_;
}
inline void ComData::set_loopflag(::google::protobuf::uint32 value) {
  
  loopflag_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.loopFlag)
}

// uint32 faultStartPoint = 12;
inline void ComData::clear_faultstartpoint() {
  faultstartpoint_ = 0u;
}
inline ::google::protobuf::uint32 ComData::faultstartpoint() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.faultStartPoint)
  return faultstartpoint_;
}
inline void ComData::set_faultstartpoint(::google::protobuf::uint32 value) {
  
  faultstartpoint_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.faultStartPoint)
}

// float fre = 13;
inline void ComData::clear_fre() {
  fre_ = 0;
}
inline float ComData::fre() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.fre)
  return fre_;
}
inline void ComData::set_fre(float value) {
  
  fre_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.fre)
}

// uint32 nSamp = 14;
inline void ComData::clear_nsamp() {
  nsamp_ = 0u;
}
inline ::google::protobuf::uint32 ComData::nsamp() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nSamp)
  return nsamp_;
}
inline void ComData::set_nsamp(::google::protobuf::uint32 value) {
  
  nsamp_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nSamp)
}

// uint32 nEndSamp = 15;
inline void ComData::clear_nendsamp() {
  nendsamp_ = 0u;
}
inline ::google::protobuf::uint32 ComData::nendsamp() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nEndSamp)
  return nendsamp_;
}
inline void ComData::set_nendsamp(::google::protobuf::uint32 value) {
  
  nendsamp_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nEndSamp)
}

// uint32 nIsloop = 16;
inline void ComData::clear_nisloop() {
  nisloop_ = 0u;
}
inline ::google::protobuf::uint32 ComData::nisloop() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nIsloop)
  return nisloop_;
}
inline void ComData::set_nisloop(::google::protobuf::uint32 value) {
  
  nisloop_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nIsloop)
}

// uint32 nCycleNum = 17;
inline void ComData::clear_ncyclenum() {
  ncyclenum_ = 0u;
}
inline ::google::protobuf::uint32 ComData::ncyclenum() const {
  // @@protoc_insertion_point(field_get:relaytest.ComData.nCycleNum)
  return ncyclenum_;
}
inline void ComData::set_ncyclenum(::google::protobuf::uint32 value) {
  
  ncyclenum_ = value;
  // @@protoc_insertion_point(field_set:relaytest.ComData.nCycleNum)
}

// -------------------------------------------------------------------

// Item

// .relaytest.ChannelInfo oinfo = 1;
inline bool Item::has_oinfo() const {
  return this != internal_default_instance() && oinfo_ != NULL;
}
inline void Item::clear_oinfo() {
  if (GetArenaNoVirtual() == NULL && oinfo_ != NULL) delete oinfo_;
  oinfo_ = NULL;
}
inline const ::relaytest::ChannelInfo& Item::oinfo() const {
  // @@protoc_insertion_point(field_get:relaytest.Item.oinfo)
  return oinfo_ != NULL ? *oinfo_
                         : *::relaytest::ChannelInfo::internal_default_instance();
}
inline ::relaytest::ChannelInfo* Item::mutable_oinfo() {
  
  if (oinfo_ == NULL) {
    oinfo_ = new ::relaytest::ChannelInfo;
  }
  // @@protoc_insertion_point(field_mutable:relaytest.Item.oinfo)
  return oinfo_;
}
inline ::relaytest::ChannelInfo* Item::release_oinfo() {
  // @@protoc_insertion_point(field_release:relaytest.Item.oinfo)
  
  ::relaytest::ChannelInfo* temp = oinfo_;
  oinfo_ = NULL;
  return temp;
}
inline void Item::set_allocated_oinfo(::relaytest::ChannelInfo* oinfo) {
  delete oinfo_;
  oinfo_ = oinfo;
  if (oinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:relaytest.Item.oinfo)
}

// .relaytest.ChannelData odata = 2;
inline bool Item::has_odata() const {
  return this != internal_default_instance() && odata_ != NULL;
}
inline void Item::clear_odata() {
  if (GetArenaNoVirtual() == NULL && odata_ != NULL) delete odata_;
  odata_ = NULL;
}
inline const ::relaytest::ChannelData& Item::odata() const {
  // @@protoc_insertion_point(field_get:relaytest.Item.odata)
  return odata_ != NULL ? *odata_
                         : *::relaytest::ChannelData::internal_default_instance();
}
inline ::relaytest::ChannelData* Item::mutable_odata() {
  
  if (odata_ == NULL) {
    odata_ = new ::relaytest::ChannelData;
  }
  // @@protoc_insertion_point(field_mutable:relaytest.Item.odata)
  return odata_;
}
inline ::relaytest::ChannelData* Item::release_odata() {
  // @@protoc_insertion_point(field_release:relaytest.Item.odata)
  
  ::relaytest::ChannelData* temp = odata_;
  odata_ = NULL;
  return temp;
}
inline void Item::set_allocated_odata(::relaytest::ChannelData* odata) {
  delete odata_;
  odata_ = odata;
  if (odata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:relaytest.Item.odata)
}

// .relaytest.ComData ocomData = 3;
inline bool Item::has_ocomdata() const {
  return this != internal_default_instance() && ocomdata_ != NULL;
}
inline void Item::clear_ocomdata() {
  if (GetArenaNoVirtual() == NULL && ocomdata_ != NULL) delete ocomdata_;
  ocomdata_ = NULL;
}
inline const ::relaytest::ComData& Item::ocomdata() const {
  // @@protoc_insertion_point(field_get:relaytest.Item.ocomData)
  return ocomdata_ != NULL ? *ocomdata_
                         : *::relaytest::ComData::internal_default_instance();
}
inline ::relaytest::ComData* Item::mutable_ocomdata() {
  
  if (ocomdata_ == NULL) {
    ocomdata_ = new ::relaytest::ComData;
  }
  // @@protoc_insertion_point(field_mutable:relaytest.Item.ocomData)
  return ocomdata_;
}
inline ::relaytest::ComData* Item::release_ocomdata() {
  // @@protoc_insertion_point(field_release:relaytest.Item.ocomData)
  
  ::relaytest::ComData* temp = ocomdata_;
  ocomdata_ = NULL;
  return temp;
}
inline void Item::set_allocated_ocomdata(::relaytest::ComData* ocomdata) {
  delete ocomdata_;
  ocomdata_ = ocomdata;
  if (ocomdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:relaytest.Item.ocomData)
}

// -------------------------------------------------------------------

// ChannelData

// repeated float Va = 1;
inline int ChannelData::va_size() const {
  return va_.size();
}
inline void ChannelData::clear_va() {
  va_.Clear();
}
inline float ChannelData::va(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Va)
  return va_.Get(index);
}
inline void ChannelData::set_va(int index, float value) {
  va_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Va)
}
inline void ChannelData::add_va(float value) {
  va_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Va)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::va() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Va)
  return va_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_va() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Va)
  return &va_;
}

// repeated float Vb = 2;
inline int ChannelData::vb_size() const {
  return vb_.size();
}
inline void ChannelData::clear_vb() {
  vb_.Clear();
}
inline float ChannelData::vb(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vb)
  return vb_.Get(index);
}
inline void ChannelData::set_vb(int index, float value) {
  vb_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vb)
}
inline void ChannelData::add_vb(float value) {
  vb_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vb)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::vb() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vb)
  return vb_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vb() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vb)
  return &vb_;
}

// repeated float Vc = 3;
inline int ChannelData::vc_size() const {
  return vc_.size();
}
inline void ChannelData::clear_vc() {
  vc_.Clear();
}
inline float ChannelData::vc(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vc)
  return vc_.Get(index);
}
inline void ChannelData::set_vc(int index, float value) {
  vc_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vc)
}
inline void ChannelData::add_vc(float value) {
  vc_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vc)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::vc() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vc)
  return vc_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vc() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vc)
  return &vc_;
}

// repeated float Ia = 4;
inline int ChannelData::ia_size() const {
  return ia_.size();
}
inline void ChannelData::clear_ia() {
  ia_.Clear();
}
inline float ChannelData::ia(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ia)
  return ia_.Get(index);
}
inline void ChannelData::set_ia(int index, float value) {
  ia_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ia)
}
inline void ChannelData::add_ia(float value) {
  ia_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ia)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::ia() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ia)
  return ia_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ia() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ia)
  return &ia_;
}

// repeated float Ib = 5;
inline int ChannelData::ib_size() const {
  return ib_.size();
}
inline void ChannelData::clear_ib() {
  ib_.Clear();
}
inline float ChannelData::ib(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ib)
  return ib_.Get(index);
}
inline void ChannelData::set_ib(int index, float value) {
  ib_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ib)
}
inline void ChannelData::add_ib(float value) {
  ib_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ib)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::ib() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ib)
  return ib_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ib() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ib)
  return &ib_;
}

// repeated float Ic = 6;
inline int ChannelData::ic_size() const {
  return ic_.size();
}
inline void ChannelData::clear_ic() {
  ic_.Clear();
}
inline float ChannelData::ic(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ic)
  return ic_.Get(index);
}
inline void ChannelData::set_ic(int index, float value) {
  ic_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ic)
}
inline void ChannelData::add_ic(float value) {
  ic_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ic)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::ic() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ic)
  return ic_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ic() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ic)
  return &ic_;
}

// repeated float Vap = 7;
inline int ChannelData::vap_size() const {
  return vap_.size();
}
inline void ChannelData::clear_vap() {
  vap_.Clear();
}
inline float ChannelData::vap(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vap)
  return vap_.Get(index);
}
inline void ChannelData::set_vap(int index, float value) {
  vap_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vap)
}
inline void ChannelData::add_vap(float value) {
  vap_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vap)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::vap() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vap)
  return vap_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vap() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vap)
  return &vap_;
}

// repeated float Vbp = 8;
inline int ChannelData::vbp_size() const {
  return vbp_.size();
}
inline void ChannelData::clear_vbp() {
  vbp_.Clear();
}
inline float ChannelData::vbp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vbp)
  return vbp_.Get(index);
}
inline void ChannelData::set_vbp(int index, float value) {
  vbp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vbp)
}
inline void ChannelData::add_vbp(float value) {
  vbp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vbp)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::vbp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vbp)
  return vbp_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vbp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vbp)
  return &vbp_;
}

// repeated float Vcp = 9;
inline int ChannelData::vcp_size() const {
  return vcp_.size();
}
inline void ChannelData::clear_vcp() {
  vcp_.Clear();
}
inline float ChannelData::vcp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Vcp)
  return vcp_.Get(index);
}
inline void ChannelData::set_vcp(int index, float value) {
  vcp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Vcp)
}
inline void ChannelData::add_vcp(float value) {
  vcp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Vcp)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::vcp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Vcp)
  return vcp_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_vcp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Vcp)
  return &vcp_;
}

// repeated float Iap = 10;
inline int ChannelData::iap_size() const {
  return iap_.size();
}
inline void ChannelData::clear_iap() {
  iap_.Clear();
}
inline float ChannelData::iap(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Iap)
  return iap_.Get(index);
}
inline void ChannelData::set_iap(int index, float value) {
  iap_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Iap)
}
inline void ChannelData::add_iap(float value) {
  iap_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Iap)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::iap() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Iap)
  return iap_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_iap() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Iap)
  return &iap_;
}

// repeated float Ibp = 11;
inline int ChannelData::ibp_size() const {
  return ibp_.size();
}
inline void ChannelData::clear_ibp() {
  ibp_.Clear();
}
inline float ChannelData::ibp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Ibp)
  return ibp_.Get(index);
}
inline void ChannelData::set_ibp(int index, float value) {
  ibp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Ibp)
}
inline void ChannelData::add_ibp(float value) {
  ibp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Ibp)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::ibp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Ibp)
  return ibp_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_ibp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Ibp)
  return &ibp_;
}

// repeated float Icp = 12;
inline int ChannelData::icp_size() const {
  return icp_.size();
}
inline void ChannelData::clear_icp() {
  icp_.Clear();
}
inline float ChannelData::icp(int index) const {
  // @@protoc_insertion_point(field_get:relaytest.ChannelData.Icp)
  return icp_.Get(index);
}
inline void ChannelData::set_icp(int index, float value) {
  icp_.Set(index, value);
  // @@protoc_insertion_point(field_set:relaytest.ChannelData.Icp)
}
inline void ChannelData::add_icp(float value) {
  icp_.Add(value);
  // @@protoc_insertion_point(field_add:relaytest.ChannelData.Icp)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelData::icp() const {
  // @@protoc_insertion_point(field_list:relaytest.ChannelData.Icp)
  return icp_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelData::mutable_icp() {
  // @@protoc_insertion_point(field_mutable_list:relaytest.ChannelData.Icp)
  return &icp_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace relaytest

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::relaytest::Version> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::relaytest::Version>() {
  return ::relaytest::Version_descriptor();
}
template <> struct is_proto_enum< ::relaytest::Unit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::relaytest::Unit>() {
  return ::relaytest::Unit_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Relaytest_2eproto__INCLUDED
