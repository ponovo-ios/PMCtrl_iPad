// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CBOperate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CBOperate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CBOperate {
class chanelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<chanel> {
} _chanel_default_instance_;
class BasicResultItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BasicResultItem> {
} _BasicResultItem_default_instance_;
class TestItem_CBOperateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestItem_CBOperate> {
} _TestItem_CBOperate_default_instance_;
class TransFaltStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransFaltState> {
} _TransFaltState_default_instance_;
class TestItem_CBOperate_ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestItem_CBOperate_Result> {
} _TestItem_CBOperate_Result_default_instance_;
class TestItem_CBOperate_Switch_StateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestItem_CBOperate_Switch_State> {
} _TestItem_CBOperate_Switch_State_default_instance_;
class ItemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Items> {
} _Items_default_instance_;
class CommonParaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonPara> {
} _CommonPara_default_instance_;

namespace protobuf_CBOperate_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[17];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanel, famptitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanel, fphase_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, va_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, vb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, vc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, ia_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, ib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, ic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, iindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, errortype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fdl_zk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fzk_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fdl_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fdl_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, dirc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, nature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fmaxerrortime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fload_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, fload_ang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, itransswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, otransfaltstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate, goosechanged_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, errortype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, ftanstime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, fdl_zk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, fzk_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, fdl_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, fdl_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransFaltState, dirc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, iindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, fta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, ftb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, ftc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, fchz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, fhjs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, frta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, frtb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, frtc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Result, frtd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Switch_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_CBOperate_Switch_State, nibinstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, ocomm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, oswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, oitems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, outputtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, prefaulttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, postfaulttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, efaulttrigmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, eptcon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ectpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, econtrolmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, erclosemode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ftriptimeset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, freclosetimeset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, facctriptimeset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, emode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, fkoorre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, fphiorim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, etestmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, fzs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, fphis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ebcsimulation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ftriptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, fclosetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, erxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, evzdefine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, evzphdefine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, vzphdiff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, gpstime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, switchchanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, efaultincmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ffaltang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edcsim_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(chanel)},
  { 6, -1, sizeof(BasicResultItem)},
  { 16, -1, sizeof(TestItem_CBOperate)},
  { 36, -1, sizeof(TransFaltState)},
  { 47, -1, sizeof(TestItem_CBOperate_Result)},
  { 61, -1, sizeof(TestItem_CBOperate_Switch_State)},
  { 66, -1, sizeof(Items)},
  { 74, -1, sizeof(CommonPara)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_chanel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BasicResultItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestItem_CBOperate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransFaltState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestItem_CBOperate_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestItem_CBOperate_Switch_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Items_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonPara_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CBOperate.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _chanel_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BasicResultItem_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TestItem_CBOperate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TransFaltState_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TestItem_CBOperate_Result_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TestItem_CBOperate_Switch_State_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Items_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CommonPara_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::hqyGoose_Pub_Setting::protobuf_hqyGoosePublish_2eproto::InitDefaults();
  ::RelaySwitchOut::protobuf_RelaySwitchOut_2eproto::InitDefaults();
  _chanel_default_instance_.DefaultConstruct();
  _BasicResultItem_default_instance_.DefaultConstruct();
  _TestItem_CBOperate_default_instance_.DefaultConstruct();
  _TransFaltState_default_instance_.DefaultConstruct();
  _TestItem_CBOperate_Result_default_instance_.DefaultConstruct();
  _TestItem_CBOperate_Switch_State_default_instance_.DefaultConstruct();
  _Items_default_instance_.DefaultConstruct();
  _CommonPara_default_instance_.DefaultConstruct();
  _BasicResultItem_default_instance_.get_mutable()->va_ = const_cast< ::CBOperate::chanel*>(
      ::CBOperate::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->vb_ = const_cast< ::CBOperate::chanel*>(
      ::CBOperate::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->vc_ = const_cast< ::CBOperate::chanel*>(
      ::CBOperate::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->ia_ = const_cast< ::CBOperate::chanel*>(
      ::CBOperate::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->ib_ = const_cast< ::CBOperate::chanel*>(
      ::CBOperate::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->ic_ = const_cast< ::CBOperate::chanel*>(
      ::CBOperate::chanel::internal_default_instance());
  _TestItem_CBOperate_default_instance_.get_mutable()->otransfaltstate_ = const_cast< ::CBOperate::TransFaltState*>(
      ::CBOperate::TransFaltState::internal_default_instance());
  _TestItem_CBOperate_default_instance_.get_mutable()->goosechanged_ = const_cast< ::hqyGoose_Pub_Setting::Goose_Publish*>(
      ::hqyGoose_Pub_Setting::Goose_Publish::internal_default_instance());
  _Items_default_instance_.get_mutable()->ocomm_ = const_cast< ::CBOperate::CommonPara*>(
      ::CBOperate::CommonPara::internal_default_instance());
  _Items_default_instance_.get_mutable()->oswitch_ = const_cast< ::RelaySwitchOut::SwitchPara*>(
      ::RelaySwitchOut::SwitchPara::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017CBOperate.proto\022\tCBOperate\032\025hqyGoosePu"
      "blish.proto\032\024RelaySwitchOut.proto\",\n\006cha"
      "nel\022\022\n\nfamptitude\030\001 \001(\002\022\016\n\006fphase\030\002 \001(\002\""
      "\313\001\n\017BasicResultItem\022\035\n\002Va\030\001 \001(\0132\021.CBOper"
      "ate.chanel\022\035\n\002Vb\030\002 \001(\0132\021.CBOperate.chane"
      "l\022\035\n\002Vc\030\003 \001(\0132\021.CBOperate.chanel\022\035\n\002Ia\030\004"
      " \001(\0132\021.CBOperate.chanel\022\035\n\002Ib\030\005 \001(\0132\021.CB"
      "Operate.chanel\022\035\n\002Ic\030\006 \001(\0132\021.CBOperate.c"
      "hanel\"\265\003\n\022TestItem_CBOperate\022\016\n\006iIndex\030\001"
      " \001(\r\022(\n\terrortype\030\002 \001(\0162\025.CBOperate.Erro"
      "r_type\022\016\n\006fdl_zk\030\003 \001(\002\022\021\n\tfZK_Angle\030\004 \001("
      "\002\022\n\n\002fR\030\005 \001(\002\022\n\n\002fX\030\006 \001(\002\022\r\n\005fDL_I\030\007 \001(\002"
      "\022\r\n\005fDL_V\030\010 \001(\002\022#\n\004dirc\030\t \001(\0162\025.CBOperat"
      "e.Error_Dirc\022\'\n\006nature\030\n \001(\0162\027.CBOperate"
      ".Error_Nature\022\025\n\rfMaxErrorTime\030\013 \001(\002\022\017\n\007"
      "fLoad_I\030\014 \001(\002\022\021\n\tfLoad_Ang\030\r \001(\002\022\024\n\014iTra"
      "nsSwitch\030\016 \001(\r\0222\n\017oTransFaltState\030\017 \001(\0132"
      "\031.CBOperate.TransFaltState\0229\n\014GooseChang"
      "ed\030\020 \001(\0132#.hqyGoose_Pub_Setting.Goose_Pu"
      "blish\"\263\001\n\016TransFaltState\022(\n\terrortype\030\001 "
      "\001(\0162\025.CBOperate.Error_type\022\021\n\tfTansTime\030"
      "\002 \001(\002\022\016\n\006fdl_zk\030\003 \001(\002\022\021\n\tfZK_Angle\030\004 \001(\002"
      "\022\r\n\005fDL_I\030\007 \001(\002\022\r\n\005fDL_V\030\010 \001(\002\022#\n\004dirc\030\t"
      " \001(\0162\025.CBOperate.Error_Dirc\"\246\001\n\031TestItem"
      "_CBOperate_Result\022\016\n\006iIndex\030\001 \001(\r\022\013\n\003fta"
      "\030\002 \001(\002\022\013\n\003ftb\030\003 \001(\002\022\013\n\003ftc\030\004 \001(\002\022\014\n\004fchz"
      "\030\005 \001(\002\022\014\n\004fhjs\030\006 \001(\002\022\014\n\004frta\030\007 \001(\002\022\014\n\004fr"
      "tb\030\010 \001(\002\022\014\n\004frtc\030\t \001(\002\022\014\n\004frtd\030\n \001(\002\"5\n\037"
      "TestItem_CBOperate_Switch_State\022\022\n\nnibin"
      "state\030\001 \001(\r\"\264\001\n\005Items\022$\n\005oComm\030\001 \001(\0132\025.C"
      "BOperate.CommonPara\022+\n\007oSwitch\030\002 \001(\0132\032.R"
      "elaySwitchOut.SwitchPara\022-\n\006oItems\030\003 \003(\013"
      "2\035.CBOperate.TestItem_CBOperate\022)\n\noutpu"
      "tType\030\004 \001(\0162\025.CBOperate.OutPutType\"\355\006\n\nC"
      "ommonPara\022\013\n\003EDV\030\001 \001(\002\022\013\n\003EDI\030\002 \001(\002\022\014\n\004E"
      "DHZ\030\003 \001(\002\022\024\n\014PreFaultTime\030\004 \001(\002\022\025\n\rPostF"
      "aultTime\030\005 \001(\002\0221\n\016eFaultTrigMode\030\006 \001(\0162\031"
      ".CBOperate.FaultTrigeMode\022 \n\006ePTCON\030\007 \001("
      "\0162\020.CBOperate.PTCON\022$\n\010eCTPOINT\030\010 \001(\0162\022."
      "CBOperate.CTPOINT\022,\n\014eControlMode\030\t \001(\0162"
      "\026.CBOperate.ControlMode\022*\n\013eRcloseMode\030\n"
      " \001(\0162\025.CBOperate.RcloseMode\022\024\n\014fTripTime"
      "Set\030\013 \001(\002\022\027\n\017fReCloseTimeSet\030\014 \001(\002\022\027\n\017fA"
      "ccTripTimeSet\030\r \001(\002\022 \n\005Emode\030\016 \001(\0162\021.CBO"
      "perate.KoMode\022\017\n\007fKoOrRe\030\017 \001(\002\022\020\n\010fPhiOr"
      "Im\030\020 \001(\002\022&\n\teTestMode\030\021 \001(\0162\023.CBOperate."
      "TESTMODE\022\013\n\003fZs\030\022 \001(\002\022\r\n\005fPhis\030\023 \001(\002\022.\n\r"
      "eBCSIMULATION\030\024 \001(\0162\027.CBOperate.BCSIMULA"
      "TION\022\021\n\tfTripTime\030\025 \001(\002\022\022\n\nfCloseTime\030\026 "
      "\001(\002\022\034\n\004eRXS\030\027 \001(\0162\016.CBOperate.RXS\022&\n\teVZ"
      "DEFINE\030\030 \001(\0162\023.CBOperate.VZDEFINE\022*\n\013eVZ"
      "PHDEFINE\030\031 \001(\0162\025.CBOperate.VZPHDEFINE\022\020\n"
      "\010VzPhdiff\030\032 \001(\002\022\017\n\007GpsTime\030\033 \001(\002\022\024\n\014Swit"
      "chChanel\030\034 \001(\r\022.\n\reFAULTINCMODE\030\035 \001(\0162\027."
      "CBOperate.FAULTINCMODE\022\020\n\010fFaltAng\030\036 \001(\002"
      "\022 \n\006eDCSIM\030\037 \001(\0162\020.CBOperate.DCSIM*\317\001\n\nE"
      "rror_type\022\016\n\nError_A_JD\020\000\022\016\n\nError_B_JD\020"
      "\001\022\016\n\nError_C_JD\020\002\022\017\n\013Error_AB_DL\020\003\022\017\n\013Er"
      "ror_BC_DL\020\004\022\017\n\013Error_CA_DL\020\005\022\021\n\rError_AB"
      "_JDDL\020\006\022\021\n\rError_BC_JDDL\020\007\022\021\n\rError_CA_J"
      "DDL\020\010\022\020\n\014Error_ABC_DL\020\t\022\023\n\017Error_SINGLE_"
      "ZK\020\n*\'\n\nError_Dirc\022\013\n\007reverse\020\000\022\014\n\010posit"
      "ive\020\001*H\n\nOutPutType\022\017\n\013analog_type\020\000\022\020\n\014"
      "digital_type\020\001\022\027\n\023analog_digital_type\020\002*"
      "*\n\014Error_Nature\022\013\n\007instant\020\000\022\r\n\tperpetua"
      "l\020\001*\"\n\006KoMode\022\006\n\002K0\020\000\022\010\n\004RERL\020\001\022\006\n\002Z0\020\002*"
      "3\n\016FaultTrigeMode\022\010\n\004TIME\020\000\022\007\n\003KEY\020\001\022\005\n\001"
      "H\020\002\022\007\n\003GPS\020\003*\032\n\005PTCON\022\007\n\003BUS\020\000\022\010\n\004LINE\020\001"
      "*(\n\007CTPOINT\022\r\n\tPOINT_BUS\020\000\022\016\n\nPOINT_LINE"
      "\020\001*<\n\nRcloseMode\022\r\n\tCLOSE_MIX\020\000\022\017\n\013CLOSE"
      "_THREE\020\001\022\016\n\nCLOSE_NONE\020\002*0\n\013ControlMode\022"
      "\017\n\013CONTROL_SIG\020\000\022\020\n\014CONTROL_TIME\020\001*\037\n\014BC"
      "SIMULATION\022\006\n\002NO\020\000\022\007\n\003YES\020\001*\024\n\003RXS\022\005\n\001Z\020"
      "\000\022\006\n\002RX\020\001*N\n\010VZDEFINE\022\010\n\004ZERO\020\000\022\n\n\006Z3X3V"
      "O\020\001\022\n\n\006F3X3VO\020\002\022\010\n\004Z3VO\020\003\022\010\n\004F3VO\020\004\022\014\n\010P"
      "HDEFINE\020\005*c\n\nVZPHDEFINE\022\014\n\010VA_PHASE\020\000\022\014\n"
      "\010VB_PHASE\020\001\022\014\n\010VC_PHASE\020\002\022\r\n\tVAB_PHASE\020\003"
      "\022\r\n\tVBC_PHASE\020\004\022\r\n\tVCA_PHASE\020\005*=\n\010TESTMO"
      "DE\022\017\n\013NCHANGE_CUR\020\000\022\017\n\013NCHANGE_VOL\020\001\022\017\n\013"
      "NCHANGE_RES\020\002*#\n\014FAULTINCMODE\022\010\n\004RAND\020\000\022"
      "\t\n\005CONST\020\001*\036\n\005DCSIM\022\007\n\003ADD\020\000\022\014\n\010ADD_NONE"
      "\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CBOperate.proto", &protobuf_RegisterTypes);
  ::hqyGoose_Pub_Setting::protobuf_hqyGoosePublish_2eproto::AddDescriptors();
  ::RelaySwitchOut::protobuf_RelaySwitchOut_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CBOperate_2eproto

const ::google::protobuf::EnumDescriptor* Error_type_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[0];
}
bool Error_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Error_Dirc_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[1];
}
bool Error_Dirc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OutPutType_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[2];
}
bool OutPutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Error_Nature_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[3];
}
bool Error_Nature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KoMode_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[4];
}
bool KoMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FaultTrigeMode_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[5];
}
bool FaultTrigeMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PTCON_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[6];
}
bool PTCON_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPOINT_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[7];
}
bool CTPOINT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RcloseMode_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[8];
}
bool RcloseMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlMode_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[9];
}
bool ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BCSIMULATION_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[10];
}
bool BCSIMULATION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RXS_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[11];
}
bool RXS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VZDEFINE_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[12];
}
bool VZDEFINE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VZPHDEFINE_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[13];
}
bool VZPHDEFINE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TESTMODE_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[14];
}
bool TESTMODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FAULTINCMODE_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[15];
}
bool FAULTINCMODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DCSIM_descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_enum_descriptors[16];
}
bool DCSIM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chanel::kFamptitudeFieldNumber;
const int chanel::kFphaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chanel::chanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.chanel)
}
chanel::chanel(const chanel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&famptitude_, &from.famptitude_,
    reinterpret_cast<char*>(&fphase_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(fphase_));
  // @@protoc_insertion_point(copy_constructor:CBOperate.chanel)
}

void chanel::SharedCtor() {
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&fphase_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(fphase_));
  _cached_size_ = 0;
}

chanel::~chanel() {
  // @@protoc_insertion_point(destructor:CBOperate.chanel)
  SharedDtor();
}

void chanel::SharedDtor() {
}

void chanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chanel::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[0].descriptor;
}

const chanel& chanel::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

chanel* chanel::New(::google::protobuf::Arena* arena) const {
  chanel* n = new chanel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chanel::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.chanel)
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&fphase_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(fphase_));
}

bool chanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.chanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float famptitude = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &famptitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fphase = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.chanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.chanel)
  return false;
#undef DO_
}

void chanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.chanel)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->famptitude(), output);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fphase(), output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.chanel)
}

::google::protobuf::uint8* chanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.chanel)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->famptitude(), target);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fphase(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.chanel)
  return target;
}

size_t chanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.chanel)
  size_t total_size = 0;

  // float famptitude = 1;
  if (this->famptitude() != 0) {
    total_size += 1 + 4;
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.chanel)
  GOOGLE_DCHECK_NE(&from, this);
  const chanel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const chanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.chanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.chanel)
    MergeFrom(*source);
  }
}

void chanel::MergeFrom(const chanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.chanel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.famptitude() != 0) {
    set_famptitude(from.famptitude());
  }
  if (from.fphase() != 0) {
    set_fphase(from.fphase());
  }
}

void chanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.chanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chanel::CopyFrom(const chanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.chanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chanel::IsInitialized() const {
  return true;
}

void chanel::Swap(chanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chanel::InternalSwap(chanel* other) {
  std::swap(famptitude_, other->famptitude_);
  std::swap(fphase_, other->fphase_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chanel::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// chanel

// float famptitude = 1;
void chanel::clear_famptitude() {
  famptitude_ = 0;
}
float chanel::famptitude() const {
  // @@protoc_insertion_point(field_get:CBOperate.chanel.famptitude)
  return famptitude_;
}
void chanel::set_famptitude(float value) {
  
  famptitude_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.chanel.famptitude)
}

// float fphase = 2;
void chanel::clear_fphase() {
  fphase_ = 0;
}
float chanel::fphase() const {
  // @@protoc_insertion_point(field_get:CBOperate.chanel.fphase)
  return fphase_;
}
void chanel::set_fphase(float value) {
  
  fphase_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.chanel.fphase)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicResultItem::kVaFieldNumber;
const int BasicResultItem::kVbFieldNumber;
const int BasicResultItem::kVcFieldNumber;
const int BasicResultItem::kIaFieldNumber;
const int BasicResultItem::kIbFieldNumber;
const int BasicResultItem::kIcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicResultItem::BasicResultItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.BasicResultItem)
}
BasicResultItem::BasicResultItem(const BasicResultItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_va()) {
    va_ = new ::CBOperate::chanel(*from.va_);
  } else {
    va_ = NULL;
  }
  if (from.has_vb()) {
    vb_ = new ::CBOperate::chanel(*from.vb_);
  } else {
    vb_ = NULL;
  }
  if (from.has_vc()) {
    vc_ = new ::CBOperate::chanel(*from.vc_);
  } else {
    vc_ = NULL;
  }
  if (from.has_ia()) {
    ia_ = new ::CBOperate::chanel(*from.ia_);
  } else {
    ia_ = NULL;
  }
  if (from.has_ib()) {
    ib_ = new ::CBOperate::chanel(*from.ib_);
  } else {
    ib_ = NULL;
  }
  if (from.has_ic()) {
    ic_ = new ::CBOperate::chanel(*from.ic_);
  } else {
    ic_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CBOperate.BasicResultItem)
}

void BasicResultItem::SharedCtor() {
  ::memset(&va_, 0, reinterpret_cast<char*>(&ic_) -
    reinterpret_cast<char*>(&va_) + sizeof(ic_));
  _cached_size_ = 0;
}

BasicResultItem::~BasicResultItem() {
  // @@protoc_insertion_point(destructor:CBOperate.BasicResultItem)
  SharedDtor();
}

void BasicResultItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete va_;
  }
  if (this != internal_default_instance()) {
    delete vb_;
  }
  if (this != internal_default_instance()) {
    delete vc_;
  }
  if (this != internal_default_instance()) {
    delete ia_;
  }
  if (this != internal_default_instance()) {
    delete ib_;
  }
  if (this != internal_default_instance()) {
    delete ic_;
  }
}

void BasicResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicResultItem::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[1].descriptor;
}

const BasicResultItem& BasicResultItem::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasicResultItem* BasicResultItem::New(::google::protobuf::Arena* arena) const {
  BasicResultItem* n = new BasicResultItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicResultItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.BasicResultItem)
  if (GetArenaNoVirtual() == NULL && va_ != NULL) {
    delete va_;
  }
  va_ = NULL;
  if (GetArenaNoVirtual() == NULL && vb_ != NULL) {
    delete vb_;
  }
  vb_ = NULL;
  if (GetArenaNoVirtual() == NULL && vc_ != NULL) {
    delete vc_;
  }
  vc_ = NULL;
  if (GetArenaNoVirtual() == NULL && ia_ != NULL) {
    delete ia_;
  }
  ia_ = NULL;
  if (GetArenaNoVirtual() == NULL && ib_ != NULL) {
    delete ib_;
  }
  ib_ = NULL;
  if (GetArenaNoVirtual() == NULL && ic_ != NULL) {
    delete ic_;
  }
  ic_ = NULL;
}

bool BasicResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.BasicResultItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CBOperate.chanel Va = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_va()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.chanel Vb = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.chanel Vc = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.chanel Ia = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ia()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.chanel Ib = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.chanel Ic = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.BasicResultItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.BasicResultItem)
  return false;
#undef DO_
}

void BasicResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.BasicResultItem)
  // .CBOperate.chanel Va = 1;
  if (this->has_va()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->va_, output);
  }

  // .CBOperate.chanel Vb = 2;
  if (this->has_vb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vb_, output);
  }

  // .CBOperate.chanel Vc = 3;
  if (this->has_vc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vc_, output);
  }

  // .CBOperate.chanel Ia = 4;
  if (this->has_ia()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ia_, output);
  }

  // .CBOperate.chanel Ib = 5;
  if (this->has_ib()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ib_, output);
  }

  // .CBOperate.chanel Ic = 6;
  if (this->has_ic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ic_, output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.BasicResultItem)
}

::google::protobuf::uint8* BasicResultItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.BasicResultItem)
  // .CBOperate.chanel Va = 1;
  if (this->has_va()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->va_, false, target);
  }

  // .CBOperate.chanel Vb = 2;
  if (this->has_vb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vb_, false, target);
  }

  // .CBOperate.chanel Vc = 3;
  if (this->has_vc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vc_, false, target);
  }

  // .CBOperate.chanel Ia = 4;
  if (this->has_ia()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ia_, false, target);
  }

  // .CBOperate.chanel Ib = 5;
  if (this->has_ib()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ib_, false, target);
  }

  // .CBOperate.chanel Ic = 6;
  if (this->has_ic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ic_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.BasicResultItem)
  return target;
}

size_t BasicResultItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.BasicResultItem)
  size_t total_size = 0;

  // .CBOperate.chanel Va = 1;
  if (this->has_va()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->va_);
  }

  // .CBOperate.chanel Vb = 2;
  if (this->has_vb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vb_);
  }

  // .CBOperate.chanel Vc = 3;
  if (this->has_vc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vc_);
  }

  // .CBOperate.chanel Ia = 4;
  if (this->has_ia()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ia_);
  }

  // .CBOperate.chanel Ib = 5;
  if (this->has_ib()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ib_);
  }

  // .CBOperate.chanel Ic = 6;
  if (this->has_ic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ic_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicResultItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.BasicResultItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicResultItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicResultItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.BasicResultItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.BasicResultItem)
    MergeFrom(*source);
  }
}

void BasicResultItem::MergeFrom(const BasicResultItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.BasicResultItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_va()) {
    mutable_va()->::CBOperate::chanel::MergeFrom(from.va());
  }
  if (from.has_vb()) {
    mutable_vb()->::CBOperate::chanel::MergeFrom(from.vb());
  }
  if (from.has_vc()) {
    mutable_vc()->::CBOperate::chanel::MergeFrom(from.vc());
  }
  if (from.has_ia()) {
    mutable_ia()->::CBOperate::chanel::MergeFrom(from.ia());
  }
  if (from.has_ib()) {
    mutable_ib()->::CBOperate::chanel::MergeFrom(from.ib());
  }
  if (from.has_ic()) {
    mutable_ic()->::CBOperate::chanel::MergeFrom(from.ic());
  }
}

void BasicResultItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.BasicResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicResultItem::CopyFrom(const BasicResultItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.BasicResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicResultItem::IsInitialized() const {
  return true;
}

void BasicResultItem::Swap(BasicResultItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicResultItem::InternalSwap(BasicResultItem* other) {
  std::swap(va_, other->va_);
  std::swap(vb_, other->vb_);
  std::swap(vc_, other->vc_);
  std::swap(ia_, other->ia_);
  std::swap(ib_, other->ib_);
  std::swap(ic_, other->ic_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasicResultItem::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasicResultItem

// .CBOperate.chanel Va = 1;
bool BasicResultItem::has_va() const {
  return this != internal_default_instance() && va_ != NULL;
}
void BasicResultItem::clear_va() {
  if (GetArenaNoVirtual() == NULL && va_ != NULL) delete va_;
  va_ = NULL;
}
const ::CBOperate::chanel& BasicResultItem::va() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Va)
  return va_ != NULL ? *va_
                         : *::CBOperate::chanel::internal_default_instance();
}
::CBOperate::chanel* BasicResultItem::mutable_va() {
  
  if (va_ == NULL) {
    va_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Va)
  return va_;
}
::CBOperate::chanel* BasicResultItem::release_va() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Va)
  
  ::CBOperate::chanel* temp = va_;
  va_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_va(::CBOperate::chanel* va) {
  delete va_;
  va_ = va;
  if (va) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Va)
}

// .CBOperate.chanel Vb = 2;
bool BasicResultItem::has_vb() const {
  return this != internal_default_instance() && vb_ != NULL;
}
void BasicResultItem::clear_vb() {
  if (GetArenaNoVirtual() == NULL && vb_ != NULL) delete vb_;
  vb_ = NULL;
}
const ::CBOperate::chanel& BasicResultItem::vb() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Vb)
  return vb_ != NULL ? *vb_
                         : *::CBOperate::chanel::internal_default_instance();
}
::CBOperate::chanel* BasicResultItem::mutable_vb() {
  
  if (vb_ == NULL) {
    vb_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Vb)
  return vb_;
}
::CBOperate::chanel* BasicResultItem::release_vb() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Vb)
  
  ::CBOperate::chanel* temp = vb_;
  vb_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_vb(::CBOperate::chanel* vb) {
  delete vb_;
  vb_ = vb;
  if (vb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Vb)
}

// .CBOperate.chanel Vc = 3;
bool BasicResultItem::has_vc() const {
  return this != internal_default_instance() && vc_ != NULL;
}
void BasicResultItem::clear_vc() {
  if (GetArenaNoVirtual() == NULL && vc_ != NULL) delete vc_;
  vc_ = NULL;
}
const ::CBOperate::chanel& BasicResultItem::vc() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Vc)
  return vc_ != NULL ? *vc_
                         : *::CBOperate::chanel::internal_default_instance();
}
::CBOperate::chanel* BasicResultItem::mutable_vc() {
  
  if (vc_ == NULL) {
    vc_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Vc)
  return vc_;
}
::CBOperate::chanel* BasicResultItem::release_vc() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Vc)
  
  ::CBOperate::chanel* temp = vc_;
  vc_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_vc(::CBOperate::chanel* vc) {
  delete vc_;
  vc_ = vc;
  if (vc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Vc)
}

// .CBOperate.chanel Ia = 4;
bool BasicResultItem::has_ia() const {
  return this != internal_default_instance() && ia_ != NULL;
}
void BasicResultItem::clear_ia() {
  if (GetArenaNoVirtual() == NULL && ia_ != NULL) delete ia_;
  ia_ = NULL;
}
const ::CBOperate::chanel& BasicResultItem::ia() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Ia)
  return ia_ != NULL ? *ia_
                         : *::CBOperate::chanel::internal_default_instance();
}
::CBOperate::chanel* BasicResultItem::mutable_ia() {
  
  if (ia_ == NULL) {
    ia_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Ia)
  return ia_;
}
::CBOperate::chanel* BasicResultItem::release_ia() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Ia)
  
  ::CBOperate::chanel* temp = ia_;
  ia_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_ia(::CBOperate::chanel* ia) {
  delete ia_;
  ia_ = ia;
  if (ia) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Ia)
}

// .CBOperate.chanel Ib = 5;
bool BasicResultItem::has_ib() const {
  return this != internal_default_instance() && ib_ != NULL;
}
void BasicResultItem::clear_ib() {
  if (GetArenaNoVirtual() == NULL && ib_ != NULL) delete ib_;
  ib_ = NULL;
}
const ::CBOperate::chanel& BasicResultItem::ib() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Ib)
  return ib_ != NULL ? *ib_
                         : *::CBOperate::chanel::internal_default_instance();
}
::CBOperate::chanel* BasicResultItem::mutable_ib() {
  
  if (ib_ == NULL) {
    ib_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Ib)
  return ib_;
}
::CBOperate::chanel* BasicResultItem::release_ib() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Ib)
  
  ::CBOperate::chanel* temp = ib_;
  ib_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_ib(::CBOperate::chanel* ib) {
  delete ib_;
  ib_ = ib;
  if (ib) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Ib)
}

// .CBOperate.chanel Ic = 6;
bool BasicResultItem::has_ic() const {
  return this != internal_default_instance() && ic_ != NULL;
}
void BasicResultItem::clear_ic() {
  if (GetArenaNoVirtual() == NULL && ic_ != NULL) delete ic_;
  ic_ = NULL;
}
const ::CBOperate::chanel& BasicResultItem::ic() const {
  // @@protoc_insertion_point(field_get:CBOperate.BasicResultItem.Ic)
  return ic_ != NULL ? *ic_
                         : *::CBOperate::chanel::internal_default_instance();
}
::CBOperate::chanel* BasicResultItem::mutable_ic() {
  
  if (ic_ == NULL) {
    ic_ = new ::CBOperate::chanel;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.BasicResultItem.Ic)
  return ic_;
}
::CBOperate::chanel* BasicResultItem::release_ic() {
  // @@protoc_insertion_point(field_release:CBOperate.BasicResultItem.Ic)
  
  ::CBOperate::chanel* temp = ic_;
  ic_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_ic(::CBOperate::chanel* ic) {
  delete ic_;
  ic_ = ic;
  if (ic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.BasicResultItem.Ic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestItem_CBOperate::kIIndexFieldNumber;
const int TestItem_CBOperate::kErrortypeFieldNumber;
const int TestItem_CBOperate::kFdlZkFieldNumber;
const int TestItem_CBOperate::kFZKAngleFieldNumber;
const int TestItem_CBOperate::kFRFieldNumber;
const int TestItem_CBOperate::kFXFieldNumber;
const int TestItem_CBOperate::kFDLIFieldNumber;
const int TestItem_CBOperate::kFDLVFieldNumber;
const int TestItem_CBOperate::kDircFieldNumber;
const int TestItem_CBOperate::kNatureFieldNumber;
const int TestItem_CBOperate::kFMaxErrorTimeFieldNumber;
const int TestItem_CBOperate::kFLoadIFieldNumber;
const int TestItem_CBOperate::kFLoadAngFieldNumber;
const int TestItem_CBOperate::kITransSwitchFieldNumber;
const int TestItem_CBOperate::kOTransFaltStateFieldNumber;
const int TestItem_CBOperate::kGooseChangedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestItem_CBOperate::TestItem_CBOperate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.TestItem_CBOperate)
}
TestItem_CBOperate::TestItem_CBOperate(const TestItem_CBOperate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_otransfaltstate()) {
    otransfaltstate_ = new ::CBOperate::TransFaltState(*from.otransfaltstate_);
  } else {
    otransfaltstate_ = NULL;
  }
  if (from.has_goosechanged()) {
    goosechanged_ = new ::hqyGoose_Pub_Setting::Goose_Publish(*from.goosechanged_);
  } else {
    goosechanged_ = NULL;
  }
  ::memcpy(&iindex_, &from.iindex_,
    reinterpret_cast<char*>(&itransswitch_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(itransswitch_));
  // @@protoc_insertion_point(copy_constructor:CBOperate.TestItem_CBOperate)
}

void TestItem_CBOperate::SharedCtor() {
  ::memset(&otransfaltstate_, 0, reinterpret_cast<char*>(&itransswitch_) -
    reinterpret_cast<char*>(&otransfaltstate_) + sizeof(itransswitch_));
  _cached_size_ = 0;
}

TestItem_CBOperate::~TestItem_CBOperate() {
  // @@protoc_insertion_point(destructor:CBOperate.TestItem_CBOperate)
  SharedDtor();
}

void TestItem_CBOperate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete otransfaltstate_;
  }
  if (this != internal_default_instance()) {
    delete goosechanged_;
  }
}

void TestItem_CBOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestItem_CBOperate::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[2].descriptor;
}

const TestItem_CBOperate& TestItem_CBOperate::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestItem_CBOperate* TestItem_CBOperate::New(::google::protobuf::Arena* arena) const {
  TestItem_CBOperate* n = new TestItem_CBOperate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestItem_CBOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.TestItem_CBOperate)
  if (GetArenaNoVirtual() == NULL && otransfaltstate_ != NULL) {
    delete otransfaltstate_;
  }
  otransfaltstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && goosechanged_ != NULL) {
    delete goosechanged_;
  }
  goosechanged_ = NULL;
  ::memset(&iindex_, 0, reinterpret_cast<char*>(&itransswitch_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(itransswitch_));
}

bool TestItem_CBOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.TestItem_CBOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 iIndex = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.Error_type errortype = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errortype(static_cast< ::CBOperate::Error_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fdl_zk = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_zk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fZK_Angle = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fzk_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fR = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fX = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fDL_I = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fDL_V = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.Error_Dirc dirc = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dirc(static_cast< ::CBOperate::Error_Dirc >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.Error_Nature nature = 10;
      case 10: {
        if (tag == 80u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nature(static_cast< ::CBOperate::Error_Nature >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMaxErrorTime = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmaxerrortime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fLoad_I = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fload_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fLoad_Ang = 13;
      case 13: {
        if (tag == 109u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fload_ang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 iTransSwitch = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itransswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.TransFaltState oTransFaltState = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otransfaltstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hqyGoose_Pub_Setting.Goose_Publish GooseChanged = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goosechanged()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.TestItem_CBOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.TestItem_CBOperate)
  return false;
#undef DO_
}

void TestItem_CBOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.TestItem_CBOperate)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iindex(), output);
  }

  // .CBOperate.Error_type errortype = 2;
  if (this->errortype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errortype(), output);
  }

  // float fdl_zk = 3;
  if (this->fdl_zk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fdl_zk(), output);
  }

  // float fZK_Angle = 4;
  if (this->fzk_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fzk_angle(), output);
  }

  // float fR = 5;
  if (this->fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fr(), output);
  }

  // float fX = 6;
  if (this->fx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fx(), output);
  }

  // float fDL_I = 7;
  if (this->fdl_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fdl_i(), output);
  }

  // float fDL_V = 8;
  if (this->fdl_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fdl_v(), output);
  }

  // .CBOperate.Error_Dirc dirc = 9;
  if (this->dirc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->dirc(), output);
  }

  // .CBOperate.Error_Nature nature = 10;
  if (this->nature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->nature(), output);
  }

  // float fMaxErrorTime = 11;
  if (this->fmaxerrortime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->fmaxerrortime(), output);
  }

  // float fLoad_I = 12;
  if (this->fload_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fload_i(), output);
  }

  // float fLoad_Ang = 13;
  if (this->fload_ang() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fload_ang(), output);
  }

  // uint32 iTransSwitch = 14;
  if (this->itransswitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->itransswitch(), output);
  }

  // .CBOperate.TransFaltState oTransFaltState = 15;
  if (this->has_otransfaltstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->otransfaltstate_, output);
  }

  // .hqyGoose_Pub_Setting.Goose_Publish GooseChanged = 16;
  if (this->has_goosechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->goosechanged_, output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.TestItem_CBOperate)
}

::google::protobuf::uint8* TestItem_CBOperate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.TestItem_CBOperate)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iindex(), target);
  }

  // .CBOperate.Error_type errortype = 2;
  if (this->errortype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errortype(), target);
  }

  // float fdl_zk = 3;
  if (this->fdl_zk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fdl_zk(), target);
  }

  // float fZK_Angle = 4;
  if (this->fzk_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fzk_angle(), target);
  }

  // float fR = 5;
  if (this->fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fr(), target);
  }

  // float fX = 6;
  if (this->fx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fx(), target);
  }

  // float fDL_I = 7;
  if (this->fdl_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fdl_i(), target);
  }

  // float fDL_V = 8;
  if (this->fdl_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fdl_v(), target);
  }

  // .CBOperate.Error_Dirc dirc = 9;
  if (this->dirc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->dirc(), target);
  }

  // .CBOperate.Error_Nature nature = 10;
  if (this->nature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->nature(), target);
  }

  // float fMaxErrorTime = 11;
  if (this->fmaxerrortime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->fmaxerrortime(), target);
  }

  // float fLoad_I = 12;
  if (this->fload_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->fload_i(), target);
  }

  // float fLoad_Ang = 13;
  if (this->fload_ang() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fload_ang(), target);
  }

  // uint32 iTransSwitch = 14;
  if (this->itransswitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->itransswitch(), target);
  }

  // .CBOperate.TransFaltState oTransFaltState = 15;
  if (this->has_otransfaltstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->otransfaltstate_, false, target);
  }

  // .hqyGoose_Pub_Setting.Goose_Publish GooseChanged = 16;
  if (this->has_goosechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->goosechanged_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.TestItem_CBOperate)
  return target;
}

size_t TestItem_CBOperate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.TestItem_CBOperate)
  size_t total_size = 0;

  // .CBOperate.TransFaltState oTransFaltState = 15;
  if (this->has_otransfaltstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->otransfaltstate_);
  }

  // .hqyGoose_Pub_Setting.Goose_Publish GooseChanged = 16;
  if (this->has_goosechanged()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->goosechanged_);
  }

  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iindex());
  }

  // .CBOperate.Error_type errortype = 2;
  if (this->errortype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errortype());
  }

  // float fdl_zk = 3;
  if (this->fdl_zk() != 0) {
    total_size += 1 + 4;
  }

  // float fZK_Angle = 4;
  if (this->fzk_angle() != 0) {
    total_size += 1 + 4;
  }

  // float fR = 5;
  if (this->fr() != 0) {
    total_size += 1 + 4;
  }

  // float fX = 6;
  if (this->fx() != 0) {
    total_size += 1 + 4;
  }

  // float fDL_I = 7;
  if (this->fdl_i() != 0) {
    total_size += 1 + 4;
  }

  // float fDL_V = 8;
  if (this->fdl_v() != 0) {
    total_size += 1 + 4;
  }

  // .CBOperate.Error_Dirc dirc = 9;
  if (this->dirc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dirc());
  }

  // .CBOperate.Error_Nature nature = 10;
  if (this->nature() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nature());
  }

  // float fMaxErrorTime = 11;
  if (this->fmaxerrortime() != 0) {
    total_size += 1 + 4;
  }

  // float fLoad_I = 12;
  if (this->fload_i() != 0) {
    total_size += 1 + 4;
  }

  // float fLoad_Ang = 13;
  if (this->fload_ang() != 0) {
    total_size += 1 + 4;
  }

  // uint32 iTransSwitch = 14;
  if (this->itransswitch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itransswitch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestItem_CBOperate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.TestItem_CBOperate)
  GOOGLE_DCHECK_NE(&from, this);
  const TestItem_CBOperate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestItem_CBOperate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.TestItem_CBOperate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.TestItem_CBOperate)
    MergeFrom(*source);
  }
}

void TestItem_CBOperate::MergeFrom(const TestItem_CBOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.TestItem_CBOperate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_otransfaltstate()) {
    mutable_otransfaltstate()->::CBOperate::TransFaltState::MergeFrom(from.otransfaltstate());
  }
  if (from.has_goosechanged()) {
    mutable_goosechanged()->::hqyGoose_Pub_Setting::Goose_Publish::MergeFrom(from.goosechanged());
  }
  if (from.iindex() != 0) {
    set_iindex(from.iindex());
  }
  if (from.errortype() != 0) {
    set_errortype(from.errortype());
  }
  if (from.fdl_zk() != 0) {
    set_fdl_zk(from.fdl_zk());
  }
  if (from.fzk_angle() != 0) {
    set_fzk_angle(from.fzk_angle());
  }
  if (from.fr() != 0) {
    set_fr(from.fr());
  }
  if (from.fx() != 0) {
    set_fx(from.fx());
  }
  if (from.fdl_i() != 0) {
    set_fdl_i(from.fdl_i());
  }
  if (from.fdl_v() != 0) {
    set_fdl_v(from.fdl_v());
  }
  if (from.dirc() != 0) {
    set_dirc(from.dirc());
  }
  if (from.nature() != 0) {
    set_nature(from.nature());
  }
  if (from.fmaxerrortime() != 0) {
    set_fmaxerrortime(from.fmaxerrortime());
  }
  if (from.fload_i() != 0) {
    set_fload_i(from.fload_i());
  }
  if (from.fload_ang() != 0) {
    set_fload_ang(from.fload_ang());
  }
  if (from.itransswitch() != 0) {
    set_itransswitch(from.itransswitch());
  }
}

void TestItem_CBOperate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.TestItem_CBOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestItem_CBOperate::CopyFrom(const TestItem_CBOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.TestItem_CBOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestItem_CBOperate::IsInitialized() const {
  return true;
}

void TestItem_CBOperate::Swap(TestItem_CBOperate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestItem_CBOperate::InternalSwap(TestItem_CBOperate* other) {
  std::swap(otransfaltstate_, other->otransfaltstate_);
  std::swap(goosechanged_, other->goosechanged_);
  std::swap(iindex_, other->iindex_);
  std::swap(errortype_, other->errortype_);
  std::swap(fdl_zk_, other->fdl_zk_);
  std::swap(fzk_angle_, other->fzk_angle_);
  std::swap(fr_, other->fr_);
  std::swap(fx_, other->fx_);
  std::swap(fdl_i_, other->fdl_i_);
  std::swap(fdl_v_, other->fdl_v_);
  std::swap(dirc_, other->dirc_);
  std::swap(nature_, other->nature_);
  std::swap(fmaxerrortime_, other->fmaxerrortime_);
  std::swap(fload_i_, other->fload_i_);
  std::swap(fload_ang_, other->fload_ang_);
  std::swap(itransswitch_, other->itransswitch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestItem_CBOperate::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestItem_CBOperate

// uint32 iIndex = 1;
void TestItem_CBOperate::clear_iindex() {
  iindex_ = 0u;
}
::google::protobuf::uint32 TestItem_CBOperate::iindex() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.iIndex)
  return iindex_;
}
void TestItem_CBOperate::set_iindex(::google::protobuf::uint32 value) {
  
  iindex_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.iIndex)
}

// .CBOperate.Error_type errortype = 2;
void TestItem_CBOperate::clear_errortype() {
  errortype_ = 0;
}
::CBOperate::Error_type TestItem_CBOperate::errortype() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.errortype)
  return static_cast< ::CBOperate::Error_type >(errortype_);
}
void TestItem_CBOperate::set_errortype(::CBOperate::Error_type value) {
  
  errortype_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.errortype)
}

// float fdl_zk = 3;
void TestItem_CBOperate::clear_fdl_zk() {
  fdl_zk_ = 0;
}
float TestItem_CBOperate::fdl_zk() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fdl_zk)
  return fdl_zk_;
}
void TestItem_CBOperate::set_fdl_zk(float value) {
  
  fdl_zk_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fdl_zk)
}

// float fZK_Angle = 4;
void TestItem_CBOperate::clear_fzk_angle() {
  fzk_angle_ = 0;
}
float TestItem_CBOperate::fzk_angle() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fZK_Angle)
  return fzk_angle_;
}
void TestItem_CBOperate::set_fzk_angle(float value) {
  
  fzk_angle_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fZK_Angle)
}

// float fR = 5;
void TestItem_CBOperate::clear_fr() {
  fr_ = 0;
}
float TestItem_CBOperate::fr() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fR)
  return fr_;
}
void TestItem_CBOperate::set_fr(float value) {
  
  fr_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fR)
}

// float fX = 6;
void TestItem_CBOperate::clear_fx() {
  fx_ = 0;
}
float TestItem_CBOperate::fx() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fX)
  return fx_;
}
void TestItem_CBOperate::set_fx(float value) {
  
  fx_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fX)
}

// float fDL_I = 7;
void TestItem_CBOperate::clear_fdl_i() {
  fdl_i_ = 0;
}
float TestItem_CBOperate::fdl_i() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fDL_I)
  return fdl_i_;
}
void TestItem_CBOperate::set_fdl_i(float value) {
  
  fdl_i_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fDL_I)
}

// float fDL_V = 8;
void TestItem_CBOperate::clear_fdl_v() {
  fdl_v_ = 0;
}
float TestItem_CBOperate::fdl_v() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fDL_V)
  return fdl_v_;
}
void TestItem_CBOperate::set_fdl_v(float value) {
  
  fdl_v_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fDL_V)
}

// .CBOperate.Error_Dirc dirc = 9;
void TestItem_CBOperate::clear_dirc() {
  dirc_ = 0;
}
::CBOperate::Error_Dirc TestItem_CBOperate::dirc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.dirc)
  return static_cast< ::CBOperate::Error_Dirc >(dirc_);
}
void TestItem_CBOperate::set_dirc(::CBOperate::Error_Dirc value) {
  
  dirc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.dirc)
}

// .CBOperate.Error_Nature nature = 10;
void TestItem_CBOperate::clear_nature() {
  nature_ = 0;
}
::CBOperate::Error_Nature TestItem_CBOperate::nature() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.nature)
  return static_cast< ::CBOperate::Error_Nature >(nature_);
}
void TestItem_CBOperate::set_nature(::CBOperate::Error_Nature value) {
  
  nature_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.nature)
}

// float fMaxErrorTime = 11;
void TestItem_CBOperate::clear_fmaxerrortime() {
  fmaxerrortime_ = 0;
}
float TestItem_CBOperate::fmaxerrortime() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fMaxErrorTime)
  return fmaxerrortime_;
}
void TestItem_CBOperate::set_fmaxerrortime(float value) {
  
  fmaxerrortime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fMaxErrorTime)
}

// float fLoad_I = 12;
void TestItem_CBOperate::clear_fload_i() {
  fload_i_ = 0;
}
float TestItem_CBOperate::fload_i() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fLoad_I)
  return fload_i_;
}
void TestItem_CBOperate::set_fload_i(float value) {
  
  fload_i_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fLoad_I)
}

// float fLoad_Ang = 13;
void TestItem_CBOperate::clear_fload_ang() {
  fload_ang_ = 0;
}
float TestItem_CBOperate::fload_ang() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.fLoad_Ang)
  return fload_ang_;
}
void TestItem_CBOperate::set_fload_ang(float value) {
  
  fload_ang_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.fLoad_Ang)
}

// uint32 iTransSwitch = 14;
void TestItem_CBOperate::clear_itransswitch() {
  itransswitch_ = 0u;
}
::google::protobuf::uint32 TestItem_CBOperate::itransswitch() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.iTransSwitch)
  return itransswitch_;
}
void TestItem_CBOperate::set_itransswitch(::google::protobuf::uint32 value) {
  
  itransswitch_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate.iTransSwitch)
}

// .CBOperate.TransFaltState oTransFaltState = 15;
bool TestItem_CBOperate::has_otransfaltstate() const {
  return this != internal_default_instance() && otransfaltstate_ != NULL;
}
void TestItem_CBOperate::clear_otransfaltstate() {
  if (GetArenaNoVirtual() == NULL && otransfaltstate_ != NULL) delete otransfaltstate_;
  otransfaltstate_ = NULL;
}
const ::CBOperate::TransFaltState& TestItem_CBOperate::otransfaltstate() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.oTransFaltState)
  return otransfaltstate_ != NULL ? *otransfaltstate_
                         : *::CBOperate::TransFaltState::internal_default_instance();
}
::CBOperate::TransFaltState* TestItem_CBOperate::mutable_otransfaltstate() {
  
  if (otransfaltstate_ == NULL) {
    otransfaltstate_ = new ::CBOperate::TransFaltState;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.TestItem_CBOperate.oTransFaltState)
  return otransfaltstate_;
}
::CBOperate::TransFaltState* TestItem_CBOperate::release_otransfaltstate() {
  // @@protoc_insertion_point(field_release:CBOperate.TestItem_CBOperate.oTransFaltState)
  
  ::CBOperate::TransFaltState* temp = otransfaltstate_;
  otransfaltstate_ = NULL;
  return temp;
}
void TestItem_CBOperate::set_allocated_otransfaltstate(::CBOperate::TransFaltState* otransfaltstate) {
  delete otransfaltstate_;
  otransfaltstate_ = otransfaltstate;
  if (otransfaltstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.TestItem_CBOperate.oTransFaltState)
}

// .hqyGoose_Pub_Setting.Goose_Publish GooseChanged = 16;
bool TestItem_CBOperate::has_goosechanged() const {
  return this != internal_default_instance() && goosechanged_ != NULL;
}
void TestItem_CBOperate::clear_goosechanged() {
  if (GetArenaNoVirtual() == NULL && goosechanged_ != NULL) delete goosechanged_;
  goosechanged_ = NULL;
}
const ::hqyGoose_Pub_Setting::Goose_Publish& TestItem_CBOperate::goosechanged() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate.GooseChanged)
  return goosechanged_ != NULL ? *goosechanged_
                         : *::hqyGoose_Pub_Setting::Goose_Publish::internal_default_instance();
}
::hqyGoose_Pub_Setting::Goose_Publish* TestItem_CBOperate::mutable_goosechanged() {
  
  if (goosechanged_ == NULL) {
    goosechanged_ = new ::hqyGoose_Pub_Setting::Goose_Publish;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.TestItem_CBOperate.GooseChanged)
  return goosechanged_;
}
::hqyGoose_Pub_Setting::Goose_Publish* TestItem_CBOperate::release_goosechanged() {
  // @@protoc_insertion_point(field_release:CBOperate.TestItem_CBOperate.GooseChanged)
  
  ::hqyGoose_Pub_Setting::Goose_Publish* temp = goosechanged_;
  goosechanged_ = NULL;
  return temp;
}
void TestItem_CBOperate::set_allocated_goosechanged(::hqyGoose_Pub_Setting::Goose_Publish* goosechanged) {
  delete goosechanged_;
  goosechanged_ = goosechanged;
  if (goosechanged) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.TestItem_CBOperate.GooseChanged)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransFaltState::kErrortypeFieldNumber;
const int TransFaltState::kFTansTimeFieldNumber;
const int TransFaltState::kFdlZkFieldNumber;
const int TransFaltState::kFZKAngleFieldNumber;
const int TransFaltState::kFDLIFieldNumber;
const int TransFaltState::kFDLVFieldNumber;
const int TransFaltState::kDircFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransFaltState::TransFaltState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.TransFaltState)
}
TransFaltState::TransFaltState(const TransFaltState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&errortype_, &from.errortype_,
    reinterpret_cast<char*>(&dirc_) -
    reinterpret_cast<char*>(&errortype_) + sizeof(dirc_));
  // @@protoc_insertion_point(copy_constructor:CBOperate.TransFaltState)
}

void TransFaltState::SharedCtor() {
  ::memset(&errortype_, 0, reinterpret_cast<char*>(&dirc_) -
    reinterpret_cast<char*>(&errortype_) + sizeof(dirc_));
  _cached_size_ = 0;
}

TransFaltState::~TransFaltState() {
  // @@protoc_insertion_point(destructor:CBOperate.TransFaltState)
  SharedDtor();
}

void TransFaltState::SharedDtor() {
}

void TransFaltState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransFaltState::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[3].descriptor;
}

const TransFaltState& TransFaltState::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransFaltState* TransFaltState::New(::google::protobuf::Arena* arena) const {
  TransFaltState* n = new TransFaltState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransFaltState::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.TransFaltState)
  ::memset(&errortype_, 0, reinterpret_cast<char*>(&dirc_) -
    reinterpret_cast<char*>(&errortype_) + sizeof(dirc_));
}

bool TransFaltState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.TransFaltState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CBOperate.Error_type errortype = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errortype(static_cast< ::CBOperate::Error_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTansTime = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftanstime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fdl_zk = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_zk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fZK_Angle = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fzk_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fDL_I = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fDL_V = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.Error_Dirc dirc = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dirc(static_cast< ::CBOperate::Error_Dirc >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.TransFaltState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.TransFaltState)
  return false;
#undef DO_
}

void TransFaltState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.TransFaltState)
  // .CBOperate.Error_type errortype = 1;
  if (this->errortype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errortype(), output);
  }

  // float fTansTime = 2;
  if (this->ftanstime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ftanstime(), output);
  }

  // float fdl_zk = 3;
  if (this->fdl_zk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fdl_zk(), output);
  }

  // float fZK_Angle = 4;
  if (this->fzk_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fzk_angle(), output);
  }

  // float fDL_I = 7;
  if (this->fdl_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fdl_i(), output);
  }

  // float fDL_V = 8;
  if (this->fdl_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fdl_v(), output);
  }

  // .CBOperate.Error_Dirc dirc = 9;
  if (this->dirc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->dirc(), output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.TransFaltState)
}

::google::protobuf::uint8* TransFaltState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.TransFaltState)
  // .CBOperate.Error_type errortype = 1;
  if (this->errortype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errortype(), target);
  }

  // float fTansTime = 2;
  if (this->ftanstime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ftanstime(), target);
  }

  // float fdl_zk = 3;
  if (this->fdl_zk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fdl_zk(), target);
  }

  // float fZK_Angle = 4;
  if (this->fzk_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fzk_angle(), target);
  }

  // float fDL_I = 7;
  if (this->fdl_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fdl_i(), target);
  }

  // float fDL_V = 8;
  if (this->fdl_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fdl_v(), target);
  }

  // .CBOperate.Error_Dirc dirc = 9;
  if (this->dirc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->dirc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.TransFaltState)
  return target;
}

size_t TransFaltState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.TransFaltState)
  size_t total_size = 0;

  // .CBOperate.Error_type errortype = 1;
  if (this->errortype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errortype());
  }

  // float fTansTime = 2;
  if (this->ftanstime() != 0) {
    total_size += 1 + 4;
  }

  // float fdl_zk = 3;
  if (this->fdl_zk() != 0) {
    total_size += 1 + 4;
  }

  // float fZK_Angle = 4;
  if (this->fzk_angle() != 0) {
    total_size += 1 + 4;
  }

  // float fDL_I = 7;
  if (this->fdl_i() != 0) {
    total_size += 1 + 4;
  }

  // float fDL_V = 8;
  if (this->fdl_v() != 0) {
    total_size += 1 + 4;
  }

  // .CBOperate.Error_Dirc dirc = 9;
  if (this->dirc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dirc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransFaltState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.TransFaltState)
  GOOGLE_DCHECK_NE(&from, this);
  const TransFaltState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransFaltState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.TransFaltState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.TransFaltState)
    MergeFrom(*source);
  }
}

void TransFaltState::MergeFrom(const TransFaltState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.TransFaltState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.errortype() != 0) {
    set_errortype(from.errortype());
  }
  if (from.ftanstime() != 0) {
    set_ftanstime(from.ftanstime());
  }
  if (from.fdl_zk() != 0) {
    set_fdl_zk(from.fdl_zk());
  }
  if (from.fzk_angle() != 0) {
    set_fzk_angle(from.fzk_angle());
  }
  if (from.fdl_i() != 0) {
    set_fdl_i(from.fdl_i());
  }
  if (from.fdl_v() != 0) {
    set_fdl_v(from.fdl_v());
  }
  if (from.dirc() != 0) {
    set_dirc(from.dirc());
  }
}

void TransFaltState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.TransFaltState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransFaltState::CopyFrom(const TransFaltState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.TransFaltState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransFaltState::IsInitialized() const {
  return true;
}

void TransFaltState::Swap(TransFaltState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransFaltState::InternalSwap(TransFaltState* other) {
  std::swap(errortype_, other->errortype_);
  std::swap(ftanstime_, other->ftanstime_);
  std::swap(fdl_zk_, other->fdl_zk_);
  std::swap(fzk_angle_, other->fzk_angle_);
  std::swap(fdl_i_, other->fdl_i_);
  std::swap(fdl_v_, other->fdl_v_);
  std::swap(dirc_, other->dirc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransFaltState::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransFaltState

// .CBOperate.Error_type errortype = 1;
void TransFaltState::clear_errortype() {
  errortype_ = 0;
}
::CBOperate::Error_type TransFaltState::errortype() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.errortype)
  return static_cast< ::CBOperate::Error_type >(errortype_);
}
void TransFaltState::set_errortype(::CBOperate::Error_type value) {
  
  errortype_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.errortype)
}

// float fTansTime = 2;
void TransFaltState::clear_ftanstime() {
  ftanstime_ = 0;
}
float TransFaltState::ftanstime() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fTansTime)
  return ftanstime_;
}
void TransFaltState::set_ftanstime(float value) {
  
  ftanstime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fTansTime)
}

// float fdl_zk = 3;
void TransFaltState::clear_fdl_zk() {
  fdl_zk_ = 0;
}
float TransFaltState::fdl_zk() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fdl_zk)
  return fdl_zk_;
}
void TransFaltState::set_fdl_zk(float value) {
  
  fdl_zk_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fdl_zk)
}

// float fZK_Angle = 4;
void TransFaltState::clear_fzk_angle() {
  fzk_angle_ = 0;
}
float TransFaltState::fzk_angle() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fZK_Angle)
  return fzk_angle_;
}
void TransFaltState::set_fzk_angle(float value) {
  
  fzk_angle_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fZK_Angle)
}

// float fDL_I = 7;
void TransFaltState::clear_fdl_i() {
  fdl_i_ = 0;
}
float TransFaltState::fdl_i() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fDL_I)
  return fdl_i_;
}
void TransFaltState::set_fdl_i(float value) {
  
  fdl_i_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fDL_I)
}

// float fDL_V = 8;
void TransFaltState::clear_fdl_v() {
  fdl_v_ = 0;
}
float TransFaltState::fdl_v() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.fDL_V)
  return fdl_v_;
}
void TransFaltState::set_fdl_v(float value) {
  
  fdl_v_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.fDL_V)
}

// .CBOperate.Error_Dirc dirc = 9;
void TransFaltState::clear_dirc() {
  dirc_ = 0;
}
::CBOperate::Error_Dirc TransFaltState::dirc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TransFaltState.dirc)
  return static_cast< ::CBOperate::Error_Dirc >(dirc_);
}
void TransFaltState::set_dirc(::CBOperate::Error_Dirc value) {
  
  dirc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TransFaltState.dirc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestItem_CBOperate_Result::kIIndexFieldNumber;
const int TestItem_CBOperate_Result::kFtaFieldNumber;
const int TestItem_CBOperate_Result::kFtbFieldNumber;
const int TestItem_CBOperate_Result::kFtcFieldNumber;
const int TestItem_CBOperate_Result::kFchzFieldNumber;
const int TestItem_CBOperate_Result::kFhjsFieldNumber;
const int TestItem_CBOperate_Result::kFrtaFieldNumber;
const int TestItem_CBOperate_Result::kFrtbFieldNumber;
const int TestItem_CBOperate_Result::kFrtcFieldNumber;
const int TestItem_CBOperate_Result::kFrtdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestItem_CBOperate_Result::TestItem_CBOperate_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.TestItem_CBOperate_Result)
}
TestItem_CBOperate_Result::TestItem_CBOperate_Result(const TestItem_CBOperate_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iindex_, &from.iindex_,
    reinterpret_cast<char*>(&frtd_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(frtd_));
  // @@protoc_insertion_point(copy_constructor:CBOperate.TestItem_CBOperate_Result)
}

void TestItem_CBOperate_Result::SharedCtor() {
  ::memset(&iindex_, 0, reinterpret_cast<char*>(&frtd_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(frtd_));
  _cached_size_ = 0;
}

TestItem_CBOperate_Result::~TestItem_CBOperate_Result() {
  // @@protoc_insertion_point(destructor:CBOperate.TestItem_CBOperate_Result)
  SharedDtor();
}

void TestItem_CBOperate_Result::SharedDtor() {
}

void TestItem_CBOperate_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestItem_CBOperate_Result::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[4].descriptor;
}

const TestItem_CBOperate_Result& TestItem_CBOperate_Result::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestItem_CBOperate_Result* TestItem_CBOperate_Result::New(::google::protobuf::Arena* arena) const {
  TestItem_CBOperate_Result* n = new TestItem_CBOperate_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestItem_CBOperate_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.TestItem_CBOperate_Result)
  ::memset(&iindex_, 0, reinterpret_cast<char*>(&frtd_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(frtd_));
}

bool TestItem_CBOperate_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.TestItem_CBOperate_Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 iIndex = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fta = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ftb = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ftc = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fchz = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fchz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fhjs = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fhjs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frta = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frtb = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frtb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frtc = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frtc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frtd = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frtd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.TestItem_CBOperate_Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.TestItem_CBOperate_Result)
  return false;
#undef DO_
}

void TestItem_CBOperate_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.TestItem_CBOperate_Result)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iindex(), output);
  }

  // float fta = 2;
  if (this->fta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fta(), output);
  }

  // float ftb = 3;
  if (this->ftb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ftb(), output);
  }

  // float ftc = 4;
  if (this->ftc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ftc(), output);
  }

  // float fchz = 5;
  if (this->fchz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fchz(), output);
  }

  // float fhjs = 6;
  if (this->fhjs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fhjs(), output);
  }

  // float frta = 7;
  if (this->frta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->frta(), output);
  }

  // float frtb = 8;
  if (this->frtb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->frtb(), output);
  }

  // float frtc = 9;
  if (this->frtc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->frtc(), output);
  }

  // float frtd = 10;
  if (this->frtd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->frtd(), output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.TestItem_CBOperate_Result)
}

::google::protobuf::uint8* TestItem_CBOperate_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.TestItem_CBOperate_Result)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iindex(), target);
  }

  // float fta = 2;
  if (this->fta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fta(), target);
  }

  // float ftb = 3;
  if (this->ftb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ftb(), target);
  }

  // float ftc = 4;
  if (this->ftc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ftc(), target);
  }

  // float fchz = 5;
  if (this->fchz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fchz(), target);
  }

  // float fhjs = 6;
  if (this->fhjs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fhjs(), target);
  }

  // float frta = 7;
  if (this->frta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->frta(), target);
  }

  // float frtb = 8;
  if (this->frtb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->frtb(), target);
  }

  // float frtc = 9;
  if (this->frtc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->frtc(), target);
  }

  // float frtd = 10;
  if (this->frtd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->frtd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.TestItem_CBOperate_Result)
  return target;
}

size_t TestItem_CBOperate_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.TestItem_CBOperate_Result)
  size_t total_size = 0;

  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iindex());
  }

  // float fta = 2;
  if (this->fta() != 0) {
    total_size += 1 + 4;
  }

  // float ftb = 3;
  if (this->ftb() != 0) {
    total_size += 1 + 4;
  }

  // float ftc = 4;
  if (this->ftc() != 0) {
    total_size += 1 + 4;
  }

  // float fchz = 5;
  if (this->fchz() != 0) {
    total_size += 1 + 4;
  }

  // float fhjs = 6;
  if (this->fhjs() != 0) {
    total_size += 1 + 4;
  }

  // float frta = 7;
  if (this->frta() != 0) {
    total_size += 1 + 4;
  }

  // float frtb = 8;
  if (this->frtb() != 0) {
    total_size += 1 + 4;
  }

  // float frtc = 9;
  if (this->frtc() != 0) {
    total_size += 1 + 4;
  }

  // float frtd = 10;
  if (this->frtd() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestItem_CBOperate_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.TestItem_CBOperate_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const TestItem_CBOperate_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestItem_CBOperate_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.TestItem_CBOperate_Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.TestItem_CBOperate_Result)
    MergeFrom(*source);
  }
}

void TestItem_CBOperate_Result::MergeFrom(const TestItem_CBOperate_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.TestItem_CBOperate_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.iindex() != 0) {
    set_iindex(from.iindex());
  }
  if (from.fta() != 0) {
    set_fta(from.fta());
  }
  if (from.ftb() != 0) {
    set_ftb(from.ftb());
  }
  if (from.ftc() != 0) {
    set_ftc(from.ftc());
  }
  if (from.fchz() != 0) {
    set_fchz(from.fchz());
  }
  if (from.fhjs() != 0) {
    set_fhjs(from.fhjs());
  }
  if (from.frta() != 0) {
    set_frta(from.frta());
  }
  if (from.frtb() != 0) {
    set_frtb(from.frtb());
  }
  if (from.frtc() != 0) {
    set_frtc(from.frtc());
  }
  if (from.frtd() != 0) {
    set_frtd(from.frtd());
  }
}

void TestItem_CBOperate_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.TestItem_CBOperate_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestItem_CBOperate_Result::CopyFrom(const TestItem_CBOperate_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.TestItem_CBOperate_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestItem_CBOperate_Result::IsInitialized() const {
  return true;
}

void TestItem_CBOperate_Result::Swap(TestItem_CBOperate_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestItem_CBOperate_Result::InternalSwap(TestItem_CBOperate_Result* other) {
  std::swap(iindex_, other->iindex_);
  std::swap(fta_, other->fta_);
  std::swap(ftb_, other->ftb_);
  std::swap(ftc_, other->ftc_);
  std::swap(fchz_, other->fchz_);
  std::swap(fhjs_, other->fhjs_);
  std::swap(frta_, other->frta_);
  std::swap(frtb_, other->frtb_);
  std::swap(frtc_, other->frtc_);
  std::swap(frtd_, other->frtd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestItem_CBOperate_Result::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestItem_CBOperate_Result

// uint32 iIndex = 1;
void TestItem_CBOperate_Result::clear_iindex() {
  iindex_ = 0u;
}
::google::protobuf::uint32 TestItem_CBOperate_Result::iindex() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.iIndex)
  return iindex_;
}
void TestItem_CBOperate_Result::set_iindex(::google::protobuf::uint32 value) {
  
  iindex_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.iIndex)
}

// float fta = 2;
void TestItem_CBOperate_Result::clear_fta() {
  fta_ = 0;
}
float TestItem_CBOperate_Result::fta() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.fta)
  return fta_;
}
void TestItem_CBOperate_Result::set_fta(float value) {
  
  fta_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.fta)
}

// float ftb = 3;
void TestItem_CBOperate_Result::clear_ftb() {
  ftb_ = 0;
}
float TestItem_CBOperate_Result::ftb() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.ftb)
  return ftb_;
}
void TestItem_CBOperate_Result::set_ftb(float value) {
  
  ftb_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.ftb)
}

// float ftc = 4;
void TestItem_CBOperate_Result::clear_ftc() {
  ftc_ = 0;
}
float TestItem_CBOperate_Result::ftc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.ftc)
  return ftc_;
}
void TestItem_CBOperate_Result::set_ftc(float value) {
  
  ftc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.ftc)
}

// float fchz = 5;
void TestItem_CBOperate_Result::clear_fchz() {
  fchz_ = 0;
}
float TestItem_CBOperate_Result::fchz() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.fchz)
  return fchz_;
}
void TestItem_CBOperate_Result::set_fchz(float value) {
  
  fchz_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.fchz)
}

// float fhjs = 6;
void TestItem_CBOperate_Result::clear_fhjs() {
  fhjs_ = 0;
}
float TestItem_CBOperate_Result::fhjs() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.fhjs)
  return fhjs_;
}
void TestItem_CBOperate_Result::set_fhjs(float value) {
  
  fhjs_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.fhjs)
}

// float frta = 7;
void TestItem_CBOperate_Result::clear_frta() {
  frta_ = 0;
}
float TestItem_CBOperate_Result::frta() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frta)
  return frta_;
}
void TestItem_CBOperate_Result::set_frta(float value) {
  
  frta_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frta)
}

// float frtb = 8;
void TestItem_CBOperate_Result::clear_frtb() {
  frtb_ = 0;
}
float TestItem_CBOperate_Result::frtb() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frtb)
  return frtb_;
}
void TestItem_CBOperate_Result::set_frtb(float value) {
  
  frtb_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frtb)
}

// float frtc = 9;
void TestItem_CBOperate_Result::clear_frtc() {
  frtc_ = 0;
}
float TestItem_CBOperate_Result::frtc() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frtc)
  return frtc_;
}
void TestItem_CBOperate_Result::set_frtc(float value) {
  
  frtc_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frtc)
}

// float frtd = 10;
void TestItem_CBOperate_Result::clear_frtd() {
  frtd_ = 0;
}
float TestItem_CBOperate_Result::frtd() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Result.frtd)
  return frtd_;
}
void TestItem_CBOperate_Result::set_frtd(float value) {
  
  frtd_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Result.frtd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestItem_CBOperate_Switch_State::kNibinstateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestItem_CBOperate_Switch_State::TestItem_CBOperate_Switch_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.TestItem_CBOperate_Switch_State)
}
TestItem_CBOperate_Switch_State::TestItem_CBOperate_Switch_State(const TestItem_CBOperate_Switch_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nibinstate_ = from.nibinstate_;
  // @@protoc_insertion_point(copy_constructor:CBOperate.TestItem_CBOperate_Switch_State)
}

void TestItem_CBOperate_Switch_State::SharedCtor() {
  nibinstate_ = 0u;
  _cached_size_ = 0;
}

TestItem_CBOperate_Switch_State::~TestItem_CBOperate_Switch_State() {
  // @@protoc_insertion_point(destructor:CBOperate.TestItem_CBOperate_Switch_State)
  SharedDtor();
}

void TestItem_CBOperate_Switch_State::SharedDtor() {
}

void TestItem_CBOperate_Switch_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestItem_CBOperate_Switch_State::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[5].descriptor;
}

const TestItem_CBOperate_Switch_State& TestItem_CBOperate_Switch_State::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestItem_CBOperate_Switch_State* TestItem_CBOperate_Switch_State::New(::google::protobuf::Arena* arena) const {
  TestItem_CBOperate_Switch_State* n = new TestItem_CBOperate_Switch_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestItem_CBOperate_Switch_State::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.TestItem_CBOperate_Switch_State)
  nibinstate_ = 0u;
}

bool TestItem_CBOperate_Switch_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.TestItem_CBOperate_Switch_State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 nibinstate = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nibinstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.TestItem_CBOperate_Switch_State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.TestItem_CBOperate_Switch_State)
  return false;
#undef DO_
}

void TestItem_CBOperate_Switch_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.TestItem_CBOperate_Switch_State)
  // uint32 nibinstate = 1;
  if (this->nibinstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nibinstate(), output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.TestItem_CBOperate_Switch_State)
}

::google::protobuf::uint8* TestItem_CBOperate_Switch_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.TestItem_CBOperate_Switch_State)
  // uint32 nibinstate = 1;
  if (this->nibinstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nibinstate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.TestItem_CBOperate_Switch_State)
  return target;
}

size_t TestItem_CBOperate_Switch_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.TestItem_CBOperate_Switch_State)
  size_t total_size = 0;

  // uint32 nibinstate = 1;
  if (this->nibinstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nibinstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestItem_CBOperate_Switch_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.TestItem_CBOperate_Switch_State)
  GOOGLE_DCHECK_NE(&from, this);
  const TestItem_CBOperate_Switch_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestItem_CBOperate_Switch_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.TestItem_CBOperate_Switch_State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.TestItem_CBOperate_Switch_State)
    MergeFrom(*source);
  }
}

void TestItem_CBOperate_Switch_State::MergeFrom(const TestItem_CBOperate_Switch_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.TestItem_CBOperate_Switch_State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nibinstate() != 0) {
    set_nibinstate(from.nibinstate());
  }
}

void TestItem_CBOperate_Switch_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.TestItem_CBOperate_Switch_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestItem_CBOperate_Switch_State::CopyFrom(const TestItem_CBOperate_Switch_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.TestItem_CBOperate_Switch_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestItem_CBOperate_Switch_State::IsInitialized() const {
  return true;
}

void TestItem_CBOperate_Switch_State::Swap(TestItem_CBOperate_Switch_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestItem_CBOperate_Switch_State::InternalSwap(TestItem_CBOperate_Switch_State* other) {
  std::swap(nibinstate_, other->nibinstate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestItem_CBOperate_Switch_State::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestItem_CBOperate_Switch_State

// uint32 nibinstate = 1;
void TestItem_CBOperate_Switch_State::clear_nibinstate() {
  nibinstate_ = 0u;
}
::google::protobuf::uint32 TestItem_CBOperate_Switch_State::nibinstate() const {
  // @@protoc_insertion_point(field_get:CBOperate.TestItem_CBOperate_Switch_State.nibinstate)
  return nibinstate_;
}
void TestItem_CBOperate_Switch_State::set_nibinstate(::google::protobuf::uint32 value) {
  
  nibinstate_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.TestItem_CBOperate_Switch_State.nibinstate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Items::kOCommFieldNumber;
const int Items::kOSwitchFieldNumber;
const int Items::kOItemsFieldNumber;
const int Items::kOutputTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Items::Items()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.Items)
}
Items::Items(const Items& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      oitems_(from.oitems_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ocomm()) {
    ocomm_ = new ::CBOperate::CommonPara(*from.ocomm_);
  } else {
    ocomm_ = NULL;
  }
  if (from.has_oswitch()) {
    oswitch_ = new ::RelaySwitchOut::SwitchPara(*from.oswitch_);
  } else {
    oswitch_ = NULL;
  }
  outputtype_ = from.outputtype_;
  // @@protoc_insertion_point(copy_constructor:CBOperate.Items)
}

void Items::SharedCtor() {
  ::memset(&ocomm_, 0, reinterpret_cast<char*>(&outputtype_) -
    reinterpret_cast<char*>(&ocomm_) + sizeof(outputtype_));
  _cached_size_ = 0;
}

Items::~Items() {
  // @@protoc_insertion_point(destructor:CBOperate.Items)
  SharedDtor();
}

void Items::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ocomm_;
  }
  if (this != internal_default_instance()) {
    delete oswitch_;
  }
}

void Items::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Items::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[6].descriptor;
}

const Items& Items::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Items* Items::New(::google::protobuf::Arena* arena) const {
  Items* n = new Items;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Items::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.Items)
  oitems_.Clear();
  if (GetArenaNoVirtual() == NULL && ocomm_ != NULL) {
    delete ocomm_;
  }
  ocomm_ = NULL;
  if (GetArenaNoVirtual() == NULL && oswitch_ != NULL) {
    delete oswitch_;
  }
  oswitch_ = NULL;
  outputtype_ = 0;
}

bool Items::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.Items)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CBOperate.CommonPara oComm = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ocomm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RelaySwitchOut.SwitchPara oSwitch = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oswitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CBOperate.TestItem_CBOperate oItems = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_oitems()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .CBOperate.OutPutType outputType = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_outputtype(static_cast< ::CBOperate::OutPutType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.Items)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.Items)
  return false;
#undef DO_
}

void Items::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.Items)
  // .CBOperate.CommonPara oComm = 1;
  if (this->has_ocomm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ocomm_, output);
  }

  // .RelaySwitchOut.SwitchPara oSwitch = 2;
  if (this->has_oswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->oswitch_, output);
  }

  // repeated .CBOperate.TestItem_CBOperate oItems = 3;
  for (unsigned int i = 0, n = this->oitems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oitems(i), output);
  }

  // .CBOperate.OutPutType outputType = 4;
  if (this->outputtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->outputtype(), output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.Items)
}

::google::protobuf::uint8* Items::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.Items)
  // .CBOperate.CommonPara oComm = 1;
  if (this->has_ocomm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ocomm_, false, target);
  }

  // .RelaySwitchOut.SwitchPara oSwitch = 2;
  if (this->has_oswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->oswitch_, false, target);
  }

  // repeated .CBOperate.TestItem_CBOperate oItems = 3;
  for (unsigned int i = 0, n = this->oitems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->oitems(i), false, target);
  }

  // .CBOperate.OutPutType outputType = 4;
  if (this->outputtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->outputtype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.Items)
  return target;
}

size_t Items::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.Items)
  size_t total_size = 0;

  // repeated .CBOperate.TestItem_CBOperate oItems = 3;
  {
    unsigned int count = this->oitems_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oitems(i));
    }
  }

  // .CBOperate.CommonPara oComm = 1;
  if (this->has_ocomm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ocomm_);
  }

  // .RelaySwitchOut.SwitchPara oSwitch = 2;
  if (this->has_oswitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oswitch_);
  }

  // .CBOperate.OutPutType outputType = 4;
  if (this->outputtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->outputtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Items::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.Items)
  GOOGLE_DCHECK_NE(&from, this);
  const Items* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Items>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.Items)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.Items)
    MergeFrom(*source);
  }
}

void Items::MergeFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.Items)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oitems_.MergeFrom(from.oitems_);
  if (from.has_ocomm()) {
    mutable_ocomm()->::CBOperate::CommonPara::MergeFrom(from.ocomm());
  }
  if (from.has_oswitch()) {
    mutable_oswitch()->::RelaySwitchOut::SwitchPara::MergeFrom(from.oswitch());
  }
  if (from.outputtype() != 0) {
    set_outputtype(from.outputtype());
  }
}

void Items::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Items::CopyFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Items::IsInitialized() const {
  return true;
}

void Items::Swap(Items* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Items::InternalSwap(Items* other) {
  oitems_.UnsafeArenaSwap(&other->oitems_);
  std::swap(ocomm_, other->ocomm_);
  std::swap(oswitch_, other->oswitch_);
  std::swap(outputtype_, other->outputtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Items::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Items

// .CBOperate.CommonPara oComm = 1;
bool Items::has_ocomm() const {
  return this != internal_default_instance() && ocomm_ != NULL;
}
void Items::clear_ocomm() {
  if (GetArenaNoVirtual() == NULL && ocomm_ != NULL) delete ocomm_;
  ocomm_ = NULL;
}
const ::CBOperate::CommonPara& Items::ocomm() const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.oComm)
  return ocomm_ != NULL ? *ocomm_
                         : *::CBOperate::CommonPara::internal_default_instance();
}
::CBOperate::CommonPara* Items::mutable_ocomm() {
  
  if (ocomm_ == NULL) {
    ocomm_ = new ::CBOperate::CommonPara;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.Items.oComm)
  return ocomm_;
}
::CBOperate::CommonPara* Items::release_ocomm() {
  // @@protoc_insertion_point(field_release:CBOperate.Items.oComm)
  
  ::CBOperate::CommonPara* temp = ocomm_;
  ocomm_ = NULL;
  return temp;
}
void Items::set_allocated_ocomm(::CBOperate::CommonPara* ocomm) {
  delete ocomm_;
  ocomm_ = ocomm;
  if (ocomm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.Items.oComm)
}

// .RelaySwitchOut.SwitchPara oSwitch = 2;
bool Items::has_oswitch() const {
  return this != internal_default_instance() && oswitch_ != NULL;
}
void Items::clear_oswitch() {
  if (GetArenaNoVirtual() == NULL && oswitch_ != NULL) delete oswitch_;
  oswitch_ = NULL;
}
const ::RelaySwitchOut::SwitchPara& Items::oswitch() const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.oSwitch)
  return oswitch_ != NULL ? *oswitch_
                         : *::RelaySwitchOut::SwitchPara::internal_default_instance();
}
::RelaySwitchOut::SwitchPara* Items::mutable_oswitch() {
  
  if (oswitch_ == NULL) {
    oswitch_ = new ::RelaySwitchOut::SwitchPara;
  }
  // @@protoc_insertion_point(field_mutable:CBOperate.Items.oSwitch)
  return oswitch_;
}
::RelaySwitchOut::SwitchPara* Items::release_oswitch() {
  // @@protoc_insertion_point(field_release:CBOperate.Items.oSwitch)
  
  ::RelaySwitchOut::SwitchPara* temp = oswitch_;
  oswitch_ = NULL;
  return temp;
}
void Items::set_allocated_oswitch(::RelaySwitchOut::SwitchPara* oswitch) {
  delete oswitch_;
  oswitch_ = oswitch;
  if (oswitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CBOperate.Items.oSwitch)
}

// repeated .CBOperate.TestItem_CBOperate oItems = 3;
int Items::oitems_size() const {
  return oitems_.size();
}
void Items::clear_oitems() {
  oitems_.Clear();
}
const ::CBOperate::TestItem_CBOperate& Items::oitems(int index) const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.oItems)
  return oitems_.Get(index);
}
::CBOperate::TestItem_CBOperate* Items::mutable_oitems(int index) {
  // @@protoc_insertion_point(field_mutable:CBOperate.Items.oItems)
  return oitems_.Mutable(index);
}
::CBOperate::TestItem_CBOperate* Items::add_oitems() {
  // @@protoc_insertion_point(field_add:CBOperate.Items.oItems)
  return oitems_.Add();
}
::google::protobuf::RepeatedPtrField< ::CBOperate::TestItem_CBOperate >*
Items::mutable_oitems() {
  // @@protoc_insertion_point(field_mutable_list:CBOperate.Items.oItems)
  return &oitems_;
}
const ::google::protobuf::RepeatedPtrField< ::CBOperate::TestItem_CBOperate >&
Items::oitems() const {
  // @@protoc_insertion_point(field_list:CBOperate.Items.oItems)
  return oitems_;
}

// .CBOperate.OutPutType outputType = 4;
void Items::clear_outputtype() {
  outputtype_ = 0;
}
::CBOperate::OutPutType Items::outputtype() const {
  // @@protoc_insertion_point(field_get:CBOperate.Items.outputType)
  return static_cast< ::CBOperate::OutPutType >(outputtype_);
}
void Items::set_outputtype(::CBOperate::OutPutType value) {
  
  outputtype_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.Items.outputType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonPara::kEDVFieldNumber;
const int CommonPara::kEDIFieldNumber;
const int CommonPara::kEDHZFieldNumber;
const int CommonPara::kPreFaultTimeFieldNumber;
const int CommonPara::kPostFaultTimeFieldNumber;
const int CommonPara::kEFaultTrigModeFieldNumber;
const int CommonPara::kEPTCONFieldNumber;
const int CommonPara::kECTPOINTFieldNumber;
const int CommonPara::kEControlModeFieldNumber;
const int CommonPara::kERcloseModeFieldNumber;
const int CommonPara::kFTripTimeSetFieldNumber;
const int CommonPara::kFReCloseTimeSetFieldNumber;
const int CommonPara::kFAccTripTimeSetFieldNumber;
const int CommonPara::kEmodeFieldNumber;
const int CommonPara::kFKoOrReFieldNumber;
const int CommonPara::kFPhiOrImFieldNumber;
const int CommonPara::kETestModeFieldNumber;
const int CommonPara::kFZsFieldNumber;
const int CommonPara::kFPhisFieldNumber;
const int CommonPara::kEBCSIMULATIONFieldNumber;
const int CommonPara::kFTripTimeFieldNumber;
const int CommonPara::kFCloseTimeFieldNumber;
const int CommonPara::kERXSFieldNumber;
const int CommonPara::kEVZDEFINEFieldNumber;
const int CommonPara::kEVZPHDEFINEFieldNumber;
const int CommonPara::kVzPhdiffFieldNumber;
const int CommonPara::kGpsTimeFieldNumber;
const int CommonPara::kSwitchChanelFieldNumber;
const int CommonPara::kEFAULTINCMODEFieldNumber;
const int CommonPara::kFFaltAngFieldNumber;
const int CommonPara::kEDCSIMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonPara::CommonPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CBOperate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CBOperate.CommonPara)
}
CommonPara::CommonPara(const CommonPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&edv_, &from.edv_,
    reinterpret_cast<char*>(&edcsim_) -
    reinterpret_cast<char*>(&edv_) + sizeof(edcsim_));
  // @@protoc_insertion_point(copy_constructor:CBOperate.CommonPara)
}

void CommonPara::SharedCtor() {
  ::memset(&edv_, 0, reinterpret_cast<char*>(&edcsim_) -
    reinterpret_cast<char*>(&edv_) + sizeof(edcsim_));
  _cached_size_ = 0;
}

CommonPara::~CommonPara() {
  // @@protoc_insertion_point(destructor:CBOperate.CommonPara)
  SharedDtor();
}

void CommonPara::SharedDtor() {
}

void CommonPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonPara::descriptor() {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[7].descriptor;
}

const CommonPara& CommonPara::default_instance() {
  protobuf_CBOperate_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonPara* CommonPara::New(::google::protobuf::Arena* arena) const {
  CommonPara* n = new CommonPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonPara::Clear() {
// @@protoc_insertion_point(message_clear_start:CBOperate.CommonPara)
  ::memset(&edv_, 0, reinterpret_cast<char*>(&edcsim_) -
    reinterpret_cast<char*>(&edv_) + sizeof(edcsim_));
}

bool CommonPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CBOperate.CommonPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float EDV = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EDI = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EDHZ = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PreFaultTime = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prefaulttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PostFaultTime = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &postfaulttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.FaultTrigeMode eFaultTrigMode = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_efaulttrigmode(static_cast< ::CBOperate::FaultTrigeMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.PTCON ePTCON = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eptcon(static_cast< ::CBOperate::PTCON >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.CTPOINT eCTPOINT = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ectpoint(static_cast< ::CBOperate::CTPOINT >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.ControlMode eControlMode = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_econtrolmode(static_cast< ::CBOperate::ControlMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.RcloseMode eRcloseMode = 10;
      case 10: {
        if (tag == 80u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_erclosemode(static_cast< ::CBOperate::RcloseMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTripTimeSet = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftriptimeset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fReCloseTimeSet = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freclosetimeset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fAccTripTimeSet = 13;
      case 13: {
        if (tag == 109u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &facctriptimeset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.KoMode Emode = 14;
      case 14: {
        if (tag == 112u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emode(static_cast< ::CBOperate::KoMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fKoOrRe = 15;
      case 15: {
        if (tag == 125u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fkoorre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fPhiOrIm = 16;
      case 16: {
        if (tag == 133u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphiorim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.TESTMODE eTestMode = 17;
      case 17: {
        if (tag == 136u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_etestmode(static_cast< ::CBOperate::TESTMODE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fZs = 18;
      case 18: {
        if (tag == 149u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fzs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fPhis = 19;
      case 19: {
        if (tag == 157u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.BCSIMULATION eBCSIMULATION = 20;
      case 20: {
        if (tag == 160u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ebcsimulation(static_cast< ::CBOperate::BCSIMULATION >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTripTime = 21;
      case 21: {
        if (tag == 173u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftriptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fCloseTime = 22;
      case 22: {
        if (tag == 181u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fclosetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.RXS eRXS = 23;
      case 23: {
        if (tag == 184u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_erxs(static_cast< ::CBOperate::RXS >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.VZDEFINE eVZDEFINE = 24;
      case 24: {
        if (tag == 192u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_evzdefine(static_cast< ::CBOperate::VZDEFINE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.VZPHDEFINE eVZPHDEFINE = 25;
      case 25: {
        if (tag == 200u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_evzphdefine(static_cast< ::CBOperate::VZPHDEFINE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float VzPhdiff = 26;
      case 26: {
        if (tag == 213u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vzphdiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float GpsTime = 27;
      case 27: {
        if (tag == 221u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpstime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SwitchChanel = 28;
      case 28: {
        if (tag == 224u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchchanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.FAULTINCMODE eFAULTINCMODE = 29;
      case 29: {
        if (tag == 232u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_efaultincmode(static_cast< ::CBOperate::FAULTINCMODE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fFaltAng = 30;
      case 30: {
        if (tag == 245u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ffaltang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CBOperate.DCSIM eDCSIM = 31;
      case 31: {
        if (tag == 248u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_edcsim(static_cast< ::CBOperate::DCSIM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CBOperate.CommonPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CBOperate.CommonPara)
  return false;
#undef DO_
}

void CommonPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CBOperate.CommonPara)
  // float EDV = 1;
  if (this->edv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->edv(), output);
  }

  // float EDI = 2;
  if (this->edi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->edi(), output);
  }

  // float EDHZ = 3;
  if (this->edhz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->edhz(), output);
  }

  // float PreFaultTime = 4;
  if (this->prefaulttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->prefaulttime(), output);
  }

  // float PostFaultTime = 5;
  if (this->postfaulttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->postfaulttime(), output);
  }

  // .CBOperate.FaultTrigeMode eFaultTrigMode = 6;
  if (this->efaulttrigmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->efaulttrigmode(), output);
  }

  // .CBOperate.PTCON ePTCON = 7;
  if (this->eptcon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->eptcon(), output);
  }

  // .CBOperate.CTPOINT eCTPOINT = 8;
  if (this->ectpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ectpoint(), output);
  }

  // .CBOperate.ControlMode eControlMode = 9;
  if (this->econtrolmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->econtrolmode(), output);
  }

  // .CBOperate.RcloseMode eRcloseMode = 10;
  if (this->erclosemode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->erclosemode(), output);
  }

  // float fTripTimeSet = 11;
  if (this->ftriptimeset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ftriptimeset(), output);
  }

  // float fReCloseTimeSet = 12;
  if (this->freclosetimeset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->freclosetimeset(), output);
  }

  // float fAccTripTimeSet = 13;
  if (this->facctriptimeset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->facctriptimeset(), output);
  }

  // .CBOperate.KoMode Emode = 14;
  if (this->emode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->emode(), output);
  }

  // float fKoOrRe = 15;
  if (this->fkoorre() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->fkoorre(), output);
  }

  // float fPhiOrIm = 16;
  if (this->fphiorim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->fphiorim(), output);
  }

  // .CBOperate.TESTMODE eTestMode = 17;
  if (this->etestmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->etestmode(), output);
  }

  // float fZs = 18;
  if (this->fzs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->fzs(), output);
  }

  // float fPhis = 19;
  if (this->fphis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->fphis(), output);
  }

  // .CBOperate.BCSIMULATION eBCSIMULATION = 20;
  if (this->ebcsimulation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->ebcsimulation(), output);
  }

  // float fTripTime = 21;
  if (this->ftriptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->ftriptime(), output);
  }

  // float fCloseTime = 22;
  if (this->fclosetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->fclosetime(), output);
  }

  // .CBOperate.RXS eRXS = 23;
  if (this->erxs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->erxs(), output);
  }

  // .CBOperate.VZDEFINE eVZDEFINE = 24;
  if (this->evzdefine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->evzdefine(), output);
  }

  // .CBOperate.VZPHDEFINE eVZPHDEFINE = 25;
  if (this->evzphdefine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->evzphdefine(), output);
  }

  // float VzPhdiff = 26;
  if (this->vzphdiff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->vzphdiff(), output);
  }

  // float GpsTime = 27;
  if (this->gpstime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->gpstime(), output);
  }

  // uint32 SwitchChanel = 28;
  if (this->switchchanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->switchchanel(), output);
  }

  // .CBOperate.FAULTINCMODE eFAULTINCMODE = 29;
  if (this->efaultincmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->efaultincmode(), output);
  }

  // float fFaltAng = 30;
  if (this->ffaltang() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->ffaltang(), output);
  }

  // .CBOperate.DCSIM eDCSIM = 31;
  if (this->edcsim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->edcsim(), output);
  }

  // @@protoc_insertion_point(serialize_end:CBOperate.CommonPara)
}

::google::protobuf::uint8* CommonPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CBOperate.CommonPara)
  // float EDV = 1;
  if (this->edv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->edv(), target);
  }

  // float EDI = 2;
  if (this->edi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->edi(), target);
  }

  // float EDHZ = 3;
  if (this->edhz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->edhz(), target);
  }

  // float PreFaultTime = 4;
  if (this->prefaulttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->prefaulttime(), target);
  }

  // float PostFaultTime = 5;
  if (this->postfaulttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->postfaulttime(), target);
  }

  // .CBOperate.FaultTrigeMode eFaultTrigMode = 6;
  if (this->efaulttrigmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->efaulttrigmode(), target);
  }

  // .CBOperate.PTCON ePTCON = 7;
  if (this->eptcon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->eptcon(), target);
  }

  // .CBOperate.CTPOINT eCTPOINT = 8;
  if (this->ectpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ectpoint(), target);
  }

  // .CBOperate.ControlMode eControlMode = 9;
  if (this->econtrolmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->econtrolmode(), target);
  }

  // .CBOperate.RcloseMode eRcloseMode = 10;
  if (this->erclosemode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->erclosemode(), target);
  }

  // float fTripTimeSet = 11;
  if (this->ftriptimeset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ftriptimeset(), target);
  }

  // float fReCloseTimeSet = 12;
  if (this->freclosetimeset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->freclosetimeset(), target);
  }

  // float fAccTripTimeSet = 13;
  if (this->facctriptimeset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->facctriptimeset(), target);
  }

  // .CBOperate.KoMode Emode = 14;
  if (this->emode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->emode(), target);
  }

  // float fKoOrRe = 15;
  if (this->fkoorre() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->fkoorre(), target);
  }

  // float fPhiOrIm = 16;
  if (this->fphiorim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->fphiorim(), target);
  }

  // .CBOperate.TESTMODE eTestMode = 17;
  if (this->etestmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->etestmode(), target);
  }

  // float fZs = 18;
  if (this->fzs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->fzs(), target);
  }

  // float fPhis = 19;
  if (this->fphis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->fphis(), target);
  }

  // .CBOperate.BCSIMULATION eBCSIMULATION = 20;
  if (this->ebcsimulation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->ebcsimulation(), target);
  }

  // float fTripTime = 21;
  if (this->ftriptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->ftriptime(), target);
  }

  // float fCloseTime = 22;
  if (this->fclosetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->fclosetime(), target);
  }

  // .CBOperate.RXS eRXS = 23;
  if (this->erxs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->erxs(), target);
  }

  // .CBOperate.VZDEFINE eVZDEFINE = 24;
  if (this->evzdefine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->evzdefine(), target);
  }

  // .CBOperate.VZPHDEFINE eVZPHDEFINE = 25;
  if (this->evzphdefine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->evzphdefine(), target);
  }

  // float VzPhdiff = 26;
  if (this->vzphdiff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->vzphdiff(), target);
  }

  // float GpsTime = 27;
  if (this->gpstime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->gpstime(), target);
  }

  // uint32 SwitchChanel = 28;
  if (this->switchchanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->switchchanel(), target);
  }

  // .CBOperate.FAULTINCMODE eFAULTINCMODE = 29;
  if (this->efaultincmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->efaultincmode(), target);
  }

  // float fFaltAng = 30;
  if (this->ffaltang() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->ffaltang(), target);
  }

  // .CBOperate.DCSIM eDCSIM = 31;
  if (this->edcsim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->edcsim(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CBOperate.CommonPara)
  return target;
}

size_t CommonPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBOperate.CommonPara)
  size_t total_size = 0;

  // float EDV = 1;
  if (this->edv() != 0) {
    total_size += 1 + 4;
  }

  // float EDI = 2;
  if (this->edi() != 0) {
    total_size += 1 + 4;
  }

  // float EDHZ = 3;
  if (this->edhz() != 0) {
    total_size += 1 + 4;
  }

  // float PreFaultTime = 4;
  if (this->prefaulttime() != 0) {
    total_size += 1 + 4;
  }

  // float PostFaultTime = 5;
  if (this->postfaulttime() != 0) {
    total_size += 1 + 4;
  }

  // .CBOperate.FaultTrigeMode eFaultTrigMode = 6;
  if (this->efaulttrigmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->efaulttrigmode());
  }

  // .CBOperate.PTCON ePTCON = 7;
  if (this->eptcon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eptcon());
  }

  // .CBOperate.CTPOINT eCTPOINT = 8;
  if (this->ectpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ectpoint());
  }

  // .CBOperate.ControlMode eControlMode = 9;
  if (this->econtrolmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->econtrolmode());
  }

  // .CBOperate.RcloseMode eRcloseMode = 10;
  if (this->erclosemode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->erclosemode());
  }

  // float fTripTimeSet = 11;
  if (this->ftriptimeset() != 0) {
    total_size += 1 + 4;
  }

  // float fReCloseTimeSet = 12;
  if (this->freclosetimeset() != 0) {
    total_size += 1 + 4;
  }

  // float fAccTripTimeSet = 13;
  if (this->facctriptimeset() != 0) {
    total_size += 1 + 4;
  }

  // .CBOperate.KoMode Emode = 14;
  if (this->emode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emode());
  }

  // float fKoOrRe = 15;
  if (this->fkoorre() != 0) {
    total_size += 1 + 4;
  }

  // float fPhiOrIm = 16;
  if (this->fphiorim() != 0) {
    total_size += 2 + 4;
  }

  // .CBOperate.TESTMODE eTestMode = 17;
  if (this->etestmode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->etestmode());
  }

  // float fZs = 18;
  if (this->fzs() != 0) {
    total_size += 2 + 4;
  }

  // float fPhis = 19;
  if (this->fphis() != 0) {
    total_size += 2 + 4;
  }

  // .CBOperate.BCSIMULATION eBCSIMULATION = 20;
  if (this->ebcsimulation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ebcsimulation());
  }

  // float fTripTime = 21;
  if (this->ftriptime() != 0) {
    total_size += 2 + 4;
  }

  // float fCloseTime = 22;
  if (this->fclosetime() != 0) {
    total_size += 2 + 4;
  }

  // .CBOperate.RXS eRXS = 23;
  if (this->erxs() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->erxs());
  }

  // .CBOperate.VZDEFINE eVZDEFINE = 24;
  if (this->evzdefine() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evzdefine());
  }

  // .CBOperate.VZPHDEFINE eVZPHDEFINE = 25;
  if (this->evzphdefine() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evzphdefine());
  }

  // float VzPhdiff = 26;
  if (this->vzphdiff() != 0) {
    total_size += 2 + 4;
  }

  // float GpsTime = 27;
  if (this->gpstime() != 0) {
    total_size += 2 + 4;
  }

  // uint32 SwitchChanel = 28;
  if (this->switchchanel() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->switchchanel());
  }

  // .CBOperate.FAULTINCMODE eFAULTINCMODE = 29;
  if (this->efaultincmode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->efaultincmode());
  }

  // float fFaltAng = 30;
  if (this->ffaltang() != 0) {
    total_size += 2 + 4;
  }

  // .CBOperate.DCSIM eDCSIM = 31;
  if (this->edcsim() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->edcsim());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBOperate.CommonPara)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBOperate.CommonPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBOperate.CommonPara)
    MergeFrom(*source);
  }
}

void CommonPara::MergeFrom(const CommonPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBOperate.CommonPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.edv() != 0) {
    set_edv(from.edv());
  }
  if (from.edi() != 0) {
    set_edi(from.edi());
  }
  if (from.edhz() != 0) {
    set_edhz(from.edhz());
  }
  if (from.prefaulttime() != 0) {
    set_prefaulttime(from.prefaulttime());
  }
  if (from.postfaulttime() != 0) {
    set_postfaulttime(from.postfaulttime());
  }
  if (from.efaulttrigmode() != 0) {
    set_efaulttrigmode(from.efaulttrigmode());
  }
  if (from.eptcon() != 0) {
    set_eptcon(from.eptcon());
  }
  if (from.ectpoint() != 0) {
    set_ectpoint(from.ectpoint());
  }
  if (from.econtrolmode() != 0) {
    set_econtrolmode(from.econtrolmode());
  }
  if (from.erclosemode() != 0) {
    set_erclosemode(from.erclosemode());
  }
  if (from.ftriptimeset() != 0) {
    set_ftriptimeset(from.ftriptimeset());
  }
  if (from.freclosetimeset() != 0) {
    set_freclosetimeset(from.freclosetimeset());
  }
  if (from.facctriptimeset() != 0) {
    set_facctriptimeset(from.facctriptimeset());
  }
  if (from.emode() != 0) {
    set_emode(from.emode());
  }
  if (from.fkoorre() != 0) {
    set_fkoorre(from.fkoorre());
  }
  if (from.fphiorim() != 0) {
    set_fphiorim(from.fphiorim());
  }
  if (from.etestmode() != 0) {
    set_etestmode(from.etestmode());
  }
  if (from.fzs() != 0) {
    set_fzs(from.fzs());
  }
  if (from.fphis() != 0) {
    set_fphis(from.fphis());
  }
  if (from.ebcsimulation() != 0) {
    set_ebcsimulation(from.ebcsimulation());
  }
  if (from.ftriptime() != 0) {
    set_ftriptime(from.ftriptime());
  }
  if (from.fclosetime() != 0) {
    set_fclosetime(from.fclosetime());
  }
  if (from.erxs() != 0) {
    set_erxs(from.erxs());
  }
  if (from.evzdefine() != 0) {
    set_evzdefine(from.evzdefine());
  }
  if (from.evzphdefine() != 0) {
    set_evzphdefine(from.evzphdefine());
  }
  if (from.vzphdiff() != 0) {
    set_vzphdiff(from.vzphdiff());
  }
  if (from.gpstime() != 0) {
    set_gpstime(from.gpstime());
  }
  if (from.switchchanel() != 0) {
    set_switchchanel(from.switchchanel());
  }
  if (from.efaultincmode() != 0) {
    set_efaultincmode(from.efaultincmode());
  }
  if (from.ffaltang() != 0) {
    set_ffaltang(from.ffaltang());
  }
  if (from.edcsim() != 0) {
    set_edcsim(from.edcsim());
  }
}

void CommonPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBOperate.CommonPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonPara::CopyFrom(const CommonPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBOperate.CommonPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPara::IsInitialized() const {
  return true;
}

void CommonPara::Swap(CommonPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonPara::InternalSwap(CommonPara* other) {
  std::swap(edv_, other->edv_);
  std::swap(edi_, other->edi_);
  std::swap(edhz_, other->edhz_);
  std::swap(prefaulttime_, other->prefaulttime_);
  std::swap(postfaulttime_, other->postfaulttime_);
  std::swap(efaulttrigmode_, other->efaulttrigmode_);
  std::swap(eptcon_, other->eptcon_);
  std::swap(ectpoint_, other->ectpoint_);
  std::swap(econtrolmode_, other->econtrolmode_);
  std::swap(erclosemode_, other->erclosemode_);
  std::swap(ftriptimeset_, other->ftriptimeset_);
  std::swap(freclosetimeset_, other->freclosetimeset_);
  std::swap(facctriptimeset_, other->facctriptimeset_);
  std::swap(emode_, other->emode_);
  std::swap(fkoorre_, other->fkoorre_);
  std::swap(fphiorim_, other->fphiorim_);
  std::swap(etestmode_, other->etestmode_);
  std::swap(fzs_, other->fzs_);
  std::swap(fphis_, other->fphis_);
  std::swap(ebcsimulation_, other->ebcsimulation_);
  std::swap(ftriptime_, other->ftriptime_);
  std::swap(fclosetime_, other->fclosetime_);
  std::swap(erxs_, other->erxs_);
  std::swap(evzdefine_, other->evzdefine_);
  std::swap(evzphdefine_, other->evzphdefine_);
  std::swap(vzphdiff_, other->vzphdiff_);
  std::swap(gpstime_, other->gpstime_);
  std::swap(switchchanel_, other->switchchanel_);
  std::swap(efaultincmode_, other->efaultincmode_);
  std::swap(ffaltang_, other->ffaltang_);
  std::swap(edcsim_, other->edcsim_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonPara::GetMetadata() const {
  protobuf_CBOperate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CBOperate_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonPara

// float EDV = 1;
void CommonPara::clear_edv() {
  edv_ = 0;
}
float CommonPara::edv() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.EDV)
  return edv_;
}
void CommonPara::set_edv(float value) {
  
  edv_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.EDV)
}

// float EDI = 2;
void CommonPara::clear_edi() {
  edi_ = 0;
}
float CommonPara::edi() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.EDI)
  return edi_;
}
void CommonPara::set_edi(float value) {
  
  edi_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.EDI)
}

// float EDHZ = 3;
void CommonPara::clear_edhz() {
  edhz_ = 0;
}
float CommonPara::edhz() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.EDHZ)
  return edhz_;
}
void CommonPara::set_edhz(float value) {
  
  edhz_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.EDHZ)
}

// float PreFaultTime = 4;
void CommonPara::clear_prefaulttime() {
  prefaulttime_ = 0;
}
float CommonPara::prefaulttime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.PreFaultTime)
  return prefaulttime_;
}
void CommonPara::set_prefaulttime(float value) {
  
  prefaulttime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.PreFaultTime)
}

// float PostFaultTime = 5;
void CommonPara::clear_postfaulttime() {
  postfaulttime_ = 0;
}
float CommonPara::postfaulttime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.PostFaultTime)
  return postfaulttime_;
}
void CommonPara::set_postfaulttime(float value) {
  
  postfaulttime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.PostFaultTime)
}

// .CBOperate.FaultTrigeMode eFaultTrigMode = 6;
void CommonPara::clear_efaulttrigmode() {
  efaulttrigmode_ = 0;
}
::CBOperate::FaultTrigeMode CommonPara::efaulttrigmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eFaultTrigMode)
  return static_cast< ::CBOperate::FaultTrigeMode >(efaulttrigmode_);
}
void CommonPara::set_efaulttrigmode(::CBOperate::FaultTrigeMode value) {
  
  efaulttrigmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eFaultTrigMode)
}

// .CBOperate.PTCON ePTCON = 7;
void CommonPara::clear_eptcon() {
  eptcon_ = 0;
}
::CBOperate::PTCON CommonPara::eptcon() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.ePTCON)
  return static_cast< ::CBOperate::PTCON >(eptcon_);
}
void CommonPara::set_eptcon(::CBOperate::PTCON value) {
  
  eptcon_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.ePTCON)
}

// .CBOperate.CTPOINT eCTPOINT = 8;
void CommonPara::clear_ectpoint() {
  ectpoint_ = 0;
}
::CBOperate::CTPOINT CommonPara::ectpoint() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eCTPOINT)
  return static_cast< ::CBOperate::CTPOINT >(ectpoint_);
}
void CommonPara::set_ectpoint(::CBOperate::CTPOINT value) {
  
  ectpoint_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eCTPOINT)
}

// .CBOperate.ControlMode eControlMode = 9;
void CommonPara::clear_econtrolmode() {
  econtrolmode_ = 0;
}
::CBOperate::ControlMode CommonPara::econtrolmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eControlMode)
  return static_cast< ::CBOperate::ControlMode >(econtrolmode_);
}
void CommonPara::set_econtrolmode(::CBOperate::ControlMode value) {
  
  econtrolmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eControlMode)
}

// .CBOperate.RcloseMode eRcloseMode = 10;
void CommonPara::clear_erclosemode() {
  erclosemode_ = 0;
}
::CBOperate::RcloseMode CommonPara::erclosemode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eRcloseMode)
  return static_cast< ::CBOperate::RcloseMode >(erclosemode_);
}
void CommonPara::set_erclosemode(::CBOperate::RcloseMode value) {
  
  erclosemode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eRcloseMode)
}

// float fTripTimeSet = 11;
void CommonPara::clear_ftriptimeset() {
  ftriptimeset_ = 0;
}
float CommonPara::ftriptimeset() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fTripTimeSet)
  return ftriptimeset_;
}
void CommonPara::set_ftriptimeset(float value) {
  
  ftriptimeset_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fTripTimeSet)
}

// float fReCloseTimeSet = 12;
void CommonPara::clear_freclosetimeset() {
  freclosetimeset_ = 0;
}
float CommonPara::freclosetimeset() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fReCloseTimeSet)
  return freclosetimeset_;
}
void CommonPara::set_freclosetimeset(float value) {
  
  freclosetimeset_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fReCloseTimeSet)
}

// float fAccTripTimeSet = 13;
void CommonPara::clear_facctriptimeset() {
  facctriptimeset_ = 0;
}
float CommonPara::facctriptimeset() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fAccTripTimeSet)
  return facctriptimeset_;
}
void CommonPara::set_facctriptimeset(float value) {
  
  facctriptimeset_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fAccTripTimeSet)
}

// .CBOperate.KoMode Emode = 14;
void CommonPara::clear_emode() {
  emode_ = 0;
}
::CBOperate::KoMode CommonPara::emode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.Emode)
  return static_cast< ::CBOperate::KoMode >(emode_);
}
void CommonPara::set_emode(::CBOperate::KoMode value) {
  
  emode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.Emode)
}

// float fKoOrRe = 15;
void CommonPara::clear_fkoorre() {
  fkoorre_ = 0;
}
float CommonPara::fkoorre() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fKoOrRe)
  return fkoorre_;
}
void CommonPara::set_fkoorre(float value) {
  
  fkoorre_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fKoOrRe)
}

// float fPhiOrIm = 16;
void CommonPara::clear_fphiorim() {
  fphiorim_ = 0;
}
float CommonPara::fphiorim() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fPhiOrIm)
  return fphiorim_;
}
void CommonPara::set_fphiorim(float value) {
  
  fphiorim_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fPhiOrIm)
}

// .CBOperate.TESTMODE eTestMode = 17;
void CommonPara::clear_etestmode() {
  etestmode_ = 0;
}
::CBOperate::TESTMODE CommonPara::etestmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eTestMode)
  return static_cast< ::CBOperate::TESTMODE >(etestmode_);
}
void CommonPara::set_etestmode(::CBOperate::TESTMODE value) {
  
  etestmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eTestMode)
}

// float fZs = 18;
void CommonPara::clear_fzs() {
  fzs_ = 0;
}
float CommonPara::fzs() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fZs)
  return fzs_;
}
void CommonPara::set_fzs(float value) {
  
  fzs_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fZs)
}

// float fPhis = 19;
void CommonPara::clear_fphis() {
  fphis_ = 0;
}
float CommonPara::fphis() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fPhis)
  return fphis_;
}
void CommonPara::set_fphis(float value) {
  
  fphis_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fPhis)
}

// .CBOperate.BCSIMULATION eBCSIMULATION = 20;
void CommonPara::clear_ebcsimulation() {
  ebcsimulation_ = 0;
}
::CBOperate::BCSIMULATION CommonPara::ebcsimulation() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eBCSIMULATION)
  return static_cast< ::CBOperate::BCSIMULATION >(ebcsimulation_);
}
void CommonPara::set_ebcsimulation(::CBOperate::BCSIMULATION value) {
  
  ebcsimulation_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eBCSIMULATION)
}

// float fTripTime = 21;
void CommonPara::clear_ftriptime() {
  ftriptime_ = 0;
}
float CommonPara::ftriptime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fTripTime)
  return ftriptime_;
}
void CommonPara::set_ftriptime(float value) {
  
  ftriptime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fTripTime)
}

// float fCloseTime = 22;
void CommonPara::clear_fclosetime() {
  fclosetime_ = 0;
}
float CommonPara::fclosetime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fCloseTime)
  return fclosetime_;
}
void CommonPara::set_fclosetime(float value) {
  
  fclosetime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fCloseTime)
}

// .CBOperate.RXS eRXS = 23;
void CommonPara::clear_erxs() {
  erxs_ = 0;
}
::CBOperate::RXS CommonPara::erxs() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eRXS)
  return static_cast< ::CBOperate::RXS >(erxs_);
}
void CommonPara::set_erxs(::CBOperate::RXS value) {
  
  erxs_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eRXS)
}

// .CBOperate.VZDEFINE eVZDEFINE = 24;
void CommonPara::clear_evzdefine() {
  evzdefine_ = 0;
}
::CBOperate::VZDEFINE CommonPara::evzdefine() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eVZDEFINE)
  return static_cast< ::CBOperate::VZDEFINE >(evzdefine_);
}
void CommonPara::set_evzdefine(::CBOperate::VZDEFINE value) {
  
  evzdefine_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eVZDEFINE)
}

// .CBOperate.VZPHDEFINE eVZPHDEFINE = 25;
void CommonPara::clear_evzphdefine() {
  evzphdefine_ = 0;
}
::CBOperate::VZPHDEFINE CommonPara::evzphdefine() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eVZPHDEFINE)
  return static_cast< ::CBOperate::VZPHDEFINE >(evzphdefine_);
}
void CommonPara::set_evzphdefine(::CBOperate::VZPHDEFINE value) {
  
  evzphdefine_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eVZPHDEFINE)
}

// float VzPhdiff = 26;
void CommonPara::clear_vzphdiff() {
  vzphdiff_ = 0;
}
float CommonPara::vzphdiff() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.VzPhdiff)
  return vzphdiff_;
}
void CommonPara::set_vzphdiff(float value) {
  
  vzphdiff_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.VzPhdiff)
}

// float GpsTime = 27;
void CommonPara::clear_gpstime() {
  gpstime_ = 0;
}
float CommonPara::gpstime() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.GpsTime)
  return gpstime_;
}
void CommonPara::set_gpstime(float value) {
  
  gpstime_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.GpsTime)
}

// uint32 SwitchChanel = 28;
void CommonPara::clear_switchchanel() {
  switchchanel_ = 0u;
}
::google::protobuf::uint32 CommonPara::switchchanel() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.SwitchChanel)
  return switchchanel_;
}
void CommonPara::set_switchchanel(::google::protobuf::uint32 value) {
  
  switchchanel_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.SwitchChanel)
}

// .CBOperate.FAULTINCMODE eFAULTINCMODE = 29;
void CommonPara::clear_efaultincmode() {
  efaultincmode_ = 0;
}
::CBOperate::FAULTINCMODE CommonPara::efaultincmode() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eFAULTINCMODE)
  return static_cast< ::CBOperate::FAULTINCMODE >(efaultincmode_);
}
void CommonPara::set_efaultincmode(::CBOperate::FAULTINCMODE value) {
  
  efaultincmode_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eFAULTINCMODE)
}

// float fFaltAng = 30;
void CommonPara::clear_ffaltang() {
  ffaltang_ = 0;
}
float CommonPara::ffaltang() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.fFaltAng)
  return ffaltang_;
}
void CommonPara::set_ffaltang(float value) {
  
  ffaltang_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.fFaltAng)
}

// .CBOperate.DCSIM eDCSIM = 31;
void CommonPara::clear_edcsim() {
  edcsim_ = 0;
}
::CBOperate::DCSIM CommonPara::edcsim() const {
  // @@protoc_insertion_point(field_get:CBOperate.CommonPara.eDCSIM)
  return static_cast< ::CBOperate::DCSIM >(edcsim_);
}
void CommonPara::set_edcsim(::CBOperate::DCSIM value) {
  
  edcsim_ = value;
  // @@protoc_insertion_point(field_set:CBOperate.CommonPara.eDCSIM)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CBOperate

// @@protoc_insertion_point(global_scope)
