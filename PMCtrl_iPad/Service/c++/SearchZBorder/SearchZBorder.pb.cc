// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SearchZBorder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SearchZBorder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SearchZBorder {
class chanelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<chanel> {
} _chanel_default_instance_;
class BasicResultItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BasicResultItem> {
} _BasicResultItem_default_instance_;
class TestItem_SearchZBorderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestItem_SearchZBorder> {
} _TestItem_SearchZBorder_default_instance_;
class TestItem_SearchZBorder_ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TestItem_SearchZBorder_Result> {
} _TestItem_SearchZBorder_Result_default_instance_;
class ItemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Items> {
} _Items_default_instance_;
class CommonParaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonPara> {
} _CommonPara_default_instance_;
class TRIPMAPDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TRIPMAP> {
} _TRIPMAP_default_instance_;
class SwitchParaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SwitchPara> {
} _SwitchPara_default_instance_;

namespace protobuf_SearchZBorder_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanel, famptitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chanel, fphase_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, va_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, vb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, vc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, ia_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, ib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicResultItem, ic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, iindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, errortype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fend_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fend_zangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fhead_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fhead_zangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fz_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fdl_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fdl_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, fmaxerrortime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, floadcurrent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder, floadangle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, iindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, basic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, fz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, fzangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, ftime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, bend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestItem_SearchZBorder_Result, nibinstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, ocomm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, oswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, oitems_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, preparetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, prefaulttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, postfaulttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, eptcon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ectpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ebcsimulation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, triptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, closetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, efaultincmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, faultangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, edcsim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, etestmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, zs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, phis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, koa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, kob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, ekomode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, esearchtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, evzdefine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, evzphdefine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, vzphdiff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, koas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPara, kobs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIPMAP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIPMAP, ik_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIPMAP, tripabc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, itripbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, ikoutput_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, ioutmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, fturntime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPara, fholdtime_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(chanel)},
  { 6, -1, sizeof(BasicResultItem)},
  { 16, -1, sizeof(TestItem_SearchZBorder)},
  { 32, -1, sizeof(TestItem_SearchZBorder_Result)},
  { 43, -1, sizeof(Items)},
  { 50, -1, sizeof(CommonPara)},
  { 80, -1, sizeof(TRIPMAP)},
  { 86, -1, sizeof(SwitchPara)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_chanel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BasicResultItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestItem_SearchZBorder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TestItem_SearchZBorder_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Items_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonPara_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TRIPMAP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SwitchPara_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SearchZBorder.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _chanel_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BasicResultItem_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TestItem_SearchZBorder_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TestItem_SearchZBorder_Result_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Items_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CommonPara_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _TRIPMAP_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SwitchPara_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _chanel_default_instance_.DefaultConstruct();
  _BasicResultItem_default_instance_.DefaultConstruct();
  _TestItem_SearchZBorder_default_instance_.DefaultConstruct();
  _TestItem_SearchZBorder_Result_default_instance_.DefaultConstruct();
  _Items_default_instance_.DefaultConstruct();
  _CommonPara_default_instance_.DefaultConstruct();
  _TRIPMAP_default_instance_.DefaultConstruct();
  _SwitchPara_default_instance_.DefaultConstruct();
  _BasicResultItem_default_instance_.get_mutable()->va_ = const_cast< ::SearchZBorder::chanel*>(
      ::SearchZBorder::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->vb_ = const_cast< ::SearchZBorder::chanel*>(
      ::SearchZBorder::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->vc_ = const_cast< ::SearchZBorder::chanel*>(
      ::SearchZBorder::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->ia_ = const_cast< ::SearchZBorder::chanel*>(
      ::SearchZBorder::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->ib_ = const_cast< ::SearchZBorder::chanel*>(
      ::SearchZBorder::chanel::internal_default_instance());
  _BasicResultItem_default_instance_.get_mutable()->ic_ = const_cast< ::SearchZBorder::chanel*>(
      ::SearchZBorder::chanel::internal_default_instance());
  _TestItem_SearchZBorder_Result_default_instance_.get_mutable()->basic_ = const_cast< ::SearchZBorder::BasicResultItem*>(
      ::SearchZBorder::BasicResultItem::internal_default_instance());
  _Items_default_instance_.get_mutable()->ocomm_ = const_cast< ::SearchZBorder::CommonPara*>(
      ::SearchZBorder::CommonPara::internal_default_instance());
  _Items_default_instance_.get_mutable()->oswitch_ = const_cast< ::SearchZBorder::SwitchPara*>(
      ::SearchZBorder::SwitchPara::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023SearchZBorder.proto\022\rSearchZBorder\",\n\006"
      "chanel\022\022\n\nfamptitude\030\001 \001(\002\022\016\n\006fphase\030\002 \001"
      "(\002\"\343\001\n\017BasicResultItem\022!\n\002Va\030\001 \001(\0132\025.Sea"
      "rchZBorder.chanel\022!\n\002Vb\030\002 \001(\0132\025.SearchZB"
      "order.chanel\022!\n\002Vc\030\003 \001(\0132\025.SearchZBorder"
      ".chanel\022!\n\002Ia\030\004 \001(\0132\025.SearchZBorder.chan"
      "el\022!\n\002Ib\030\005 \001(\0132\025.SearchZBorder.chanel\022!\n"
      "\002Ic\030\006 \001(\0132\025.SearchZBorder.chanel\"\222\002\n\026Tes"
      "tItem_SearchZBorder\022\016\n\006iIndex\030\001 \001(\r\022,\n\te"
      "rrortype\030\002 \001(\0162\031.SearchZBorder.Error_typ"
      "e\022\016\n\006fEnd_Z\030\003 \001(\002\022\023\n\013fEnd_ZAngle\030\004 \001(\002\022\017"
      "\n\007fHead_Z\030\005 \001(\002\022\024\n\014fHead_ZAngle\030\006 \001(\002\022\017\n"
      "\007fZ_Step\030\007 \001(\002\022\r\n\005fDL_I\030\010 \001(\002\022\r\n\005fDL_V\030\t"
      " \001(\002\022\025\n\rfMaxErrorTime\030\n \001(\002\022\024\n\014fLoadCurr"
      "ent\030\013 \001(\002\022\022\n\nfLoadAngle\030\014 \001(\002\"\254\001\n\035TestIt"
      "em_SearchZBorder_Result\022\016\n\006iIndex\030\001 \001(\r\022"
      "-\n\005basic\030\002 \001(\0132\036.SearchZBorder.BasicResu"
      "ltItem\022\n\n\002fZ\030\003 \001(\002\022\017\n\007fZAngle\030\004 \001(\002\022\r\n\005f"
      "Time\030\005 \001(\002\022\014\n\004bEnd\030\006 \001(\010\022\022\n\nnibinstate\030\007"
      " \001(\r\"\224\001\n\005Items\022(\n\005oComm\030\001 \001(\0132\031.SearchZB"
      "order.CommonPara\022*\n\007oSwitch\030\002 \001(\0132\031.Sear"
      "chZBorder.SwitchPara\0225\n\006oItems\030\003 \003(\0132%.S"
      "earchZBorder.TestItem_SearchZBorder\"\320\005\n\n"
      "CommonPara\022\013\n\003EDV\030\001 \001(\002\022\013\n\003EDI\030\002 \001(\002\022\014\n\004"
      "EDHZ\030\003 \001(\002\022\023\n\013PrepareTime\030\004 \001(\002\022\024\n\014PreFa"
      "ultTime\030\005 \001(\002\022\025\n\rPostFaultTime\030\006 \001(\002\022$\n\006"
      "ePTCON\030\007 \001(\0162\024.SearchZBorder.PTCON\022(\n\010eC"
      "TPOINT\030\010 \001(\0162\026.SearchZBorder.CTPOINT\0222\n\r"
      "eBCSIMULATION\030\t \001(\0162\033.SearchZBorder.BCSI"
      "MULATION\022\020\n\010TripTime\030\n \001(\002\022\021\n\tCloseTime\030"
      "\013 \001(\002\0222\n\reFaultIncMode\030\014 \001(\0162\033.SearchZBo"
      "rder.FaultIncMode\022\022\n\nFaultAngle\030\r \001(\002\022$\n"
      "\006eDCSIM\030\016 \001(\0162\024.SearchZBorder.DCSIM\022*\n\te"
      "TestMode\030\017 \001(\0162\027.SearchZBorder.TestMode\022"
      "\n\n\002Zs\030\020 \001(\002\022\014\n\004Phis\030\021 \001(\002\022\013\n\003KOA\030\022 \001(\002\022\013"
      "\n\003KOB\030\023 \001(\002\022&\n\007eKoMode\030\024 \001(\0162\025.SearchZBo"
      "rder.KoMode\022/\n\013eSearchType\030\025 \001(\0162\032.Searc"
      "hZBorder.Search_Type\022*\n\teVZDEFINE\030\026 \001(\0162"
      "\027.SearchZBorder.VZDEFINE\022.\n\013eVZPHDEFINE\030"
      "\027 \001(\0162\031.SearchZBorder.VZPHDEFINE\022\020\n\010VzPh"
      "diff\030\030 \001(\002\022\014\n\004KOAs\030\031 \001(\002\022\014\n\004KOBs\030\032 \001(\002\"&"
      "\n\007TRIPMAP\022\n\n\002IK\030\001 \001(\r\022\017\n\007TripABC\030\002 \001(\r\"\200"
      "\001\n\nSwitchPara\022(\n\010iTripBuf\030\001 \003(\0132\026.Search"
      "ZBorder.TRIPMAP\022\020\n\010iKOutput\030\002 \003(\r\022\020\n\010iOu"
      "tMode\030\003 \001(\r\022\021\n\tfTurnTime\030\004 \001(\002\022\021\n\tfHoldT"
      "ime\030\005 \001(\002*\317\001\n\nError_type\022\016\n\nError_A_JD\020\000"
      "\022\016\n\nError_B_JD\020\001\022\016\n\nError_C_JD\020\002\022\017\n\013Erro"
      "r_AB_DL\020\003\022\017\n\013Error_BC_DL\020\004\022\017\n\013Error_CA_D"
      "L\020\005\022\021\n\rError_AB_JDDL\020\006\022\021\n\rError_BC_JDDL\020"
      "\007\022\021\n\rError_CA_JDDL\020\010\022\020\n\014Error_ABC_DL\020\t\022\023"
      "\n\017Error_SINGLE_ZK\020\n*\032\n\005PTCON\022\007\n\003BUS\020\000\022\010\n"
      "\004LINE\020\001*(\n\007CTPOINT\022\r\n\tPOINT_BUS\020\000\022\016\n\nPOI"
      "NT_LINE\020\001*!\n\014BCSIMULATION\022\007\n\003eNO\020\000\022\010\n\004eY"
      "ES\020\001*(\n\014FaultIncMode\022\n\n\006RANDOM\020\000\022\014\n\010CONS"
      "TANT\020\001*\'\n\005DCSIM\022\017\n\013NOOVERLYING\020\000\022\r\n\tOVER"
      "LYING\020\001*.\n\010TestMode\022\n\n\006CONSTI\020\000\022\n\n\006CONST"
      "V\020\001\022\n\n\006CONSTZ\020\002*\"\n\006KoMode\022\006\n\002K0\020\000\022\010\n\004KRK"
      "X\020\001\022\006\n\002Z0\020\002*@\n\010VZDEFINE\022\010\n\004ZERO\020\000\022\n\n\006Z3X"
      "3VO\020\001\022\n\n\006F3X3VO\020\002\022\010\n\004Z3VO\020\003\022\010\n\004F3VO\020\004*c\n"
      "\nVZPHDEFINE\022\014\n\010VA_PHASE\020\000\022\014\n\010VB_PHASE\020\001\022"
      "\014\n\010VC_PHASE\020\002\022\r\n\tVAB_PHASE\020\003\022\r\n\tVBC_PHAS"
      "E\020\004\022\r\n\tVCA_PHASE\020\005*B\n\013Search_Type\022\033\n\027Sea"
      "rch_Type_Search_Type\020\000\022\026\n\022Search_Type_Si"
      "ngle\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SearchZBorder.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_SearchZBorder_2eproto

const ::google::protobuf::EnumDescriptor* Error_type_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[0];
}
bool Error_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PTCON_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[1];
}
bool PTCON_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPOINT_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[2];
}
bool CTPOINT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BCSIMULATION_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[3];
}
bool BCSIMULATION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FaultIncMode_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[4];
}
bool FaultIncMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DCSIM_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[5];
}
bool DCSIM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TestMode_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[6];
}
bool TestMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KoMode_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[7];
}
bool KoMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VZDEFINE_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[8];
}
bool VZDEFINE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VZPHDEFINE_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[9];
}
bool VZPHDEFINE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Search_Type_descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_enum_descriptors[10];
}
bool Search_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chanel::kFamptitudeFieldNumber;
const int chanel::kFphaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chanel::chanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.chanel)
}
chanel::chanel(const chanel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&famptitude_, &from.famptitude_,
    reinterpret_cast<char*>(&fphase_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(fphase_));
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.chanel)
}

void chanel::SharedCtor() {
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&fphase_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(fphase_));
  _cached_size_ = 0;
}

chanel::~chanel() {
  // @@protoc_insertion_point(destructor:SearchZBorder.chanel)
  SharedDtor();
}

void chanel::SharedDtor() {
}

void chanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chanel::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[0].descriptor;
}

const chanel& chanel::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

chanel* chanel::New(::google::protobuf::Arena* arena) const {
  chanel* n = new chanel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.chanel)
  ::memset(&famptitude_, 0, reinterpret_cast<char*>(&fphase_) -
    reinterpret_cast<char*>(&famptitude_) + sizeof(fphase_));
}

bool chanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.chanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float famptitude = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &famptitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fphase = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.chanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.chanel)
  return false;
#undef DO_
}

void chanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.chanel)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->famptitude(), output);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fphase(), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.chanel)
}

::google::protobuf::uint8* chanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.chanel)
  // float famptitude = 1;
  if (this->famptitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->famptitude(), target);
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fphase(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.chanel)
  return target;
}

size_t chanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.chanel)
  size_t total_size = 0;

  // float famptitude = 1;
  if (this->famptitude() != 0) {
    total_size += 1 + 4;
  }

  // float fphase = 2;
  if (this->fphase() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.chanel)
  GOOGLE_DCHECK_NE(&from, this);
  const chanel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const chanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.chanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.chanel)
    MergeFrom(*source);
  }
}

void chanel::MergeFrom(const chanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.chanel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.famptitude() != 0) {
    set_famptitude(from.famptitude());
  }
  if (from.fphase() != 0) {
    set_fphase(from.fphase());
  }
}

void chanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.chanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chanel::CopyFrom(const chanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.chanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chanel::IsInitialized() const {
  return true;
}

void chanel::Swap(chanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chanel::InternalSwap(chanel* other) {
  std::swap(famptitude_, other->famptitude_);
  std::swap(fphase_, other->fphase_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chanel::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// chanel

// float famptitude = 1;
void chanel::clear_famptitude() {
  famptitude_ = 0;
}
float chanel::famptitude() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.chanel.famptitude)
  return famptitude_;
}
void chanel::set_famptitude(float value) {
  
  famptitude_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.chanel.famptitude)
}

// float fphase = 2;
void chanel::clear_fphase() {
  fphase_ = 0;
}
float chanel::fphase() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.chanel.fphase)
  return fphase_;
}
void chanel::set_fphase(float value) {
  
  fphase_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.chanel.fphase)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicResultItem::kVaFieldNumber;
const int BasicResultItem::kVbFieldNumber;
const int BasicResultItem::kVcFieldNumber;
const int BasicResultItem::kIaFieldNumber;
const int BasicResultItem::kIbFieldNumber;
const int BasicResultItem::kIcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicResultItem::BasicResultItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.BasicResultItem)
}
BasicResultItem::BasicResultItem(const BasicResultItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_va()) {
    va_ = new ::SearchZBorder::chanel(*from.va_);
  } else {
    va_ = NULL;
  }
  if (from.has_vb()) {
    vb_ = new ::SearchZBorder::chanel(*from.vb_);
  } else {
    vb_ = NULL;
  }
  if (from.has_vc()) {
    vc_ = new ::SearchZBorder::chanel(*from.vc_);
  } else {
    vc_ = NULL;
  }
  if (from.has_ia()) {
    ia_ = new ::SearchZBorder::chanel(*from.ia_);
  } else {
    ia_ = NULL;
  }
  if (from.has_ib()) {
    ib_ = new ::SearchZBorder::chanel(*from.ib_);
  } else {
    ib_ = NULL;
  }
  if (from.has_ic()) {
    ic_ = new ::SearchZBorder::chanel(*from.ic_);
  } else {
    ic_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.BasicResultItem)
}

void BasicResultItem::SharedCtor() {
  ::memset(&va_, 0, reinterpret_cast<char*>(&ic_) -
    reinterpret_cast<char*>(&va_) + sizeof(ic_));
  _cached_size_ = 0;
}

BasicResultItem::~BasicResultItem() {
  // @@protoc_insertion_point(destructor:SearchZBorder.BasicResultItem)
  SharedDtor();
}

void BasicResultItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete va_;
  }
  if (this != internal_default_instance()) {
    delete vb_;
  }
  if (this != internal_default_instance()) {
    delete vc_;
  }
  if (this != internal_default_instance()) {
    delete ia_;
  }
  if (this != internal_default_instance()) {
    delete ib_;
  }
  if (this != internal_default_instance()) {
    delete ic_;
  }
}

void BasicResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicResultItem::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[1].descriptor;
}

const BasicResultItem& BasicResultItem::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasicResultItem* BasicResultItem::New(::google::protobuf::Arena* arena) const {
  BasicResultItem* n = new BasicResultItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicResultItem::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.BasicResultItem)
  if (GetArenaNoVirtual() == NULL && va_ != NULL) {
    delete va_;
  }
  va_ = NULL;
  if (GetArenaNoVirtual() == NULL && vb_ != NULL) {
    delete vb_;
  }
  vb_ = NULL;
  if (GetArenaNoVirtual() == NULL && vc_ != NULL) {
    delete vc_;
  }
  vc_ = NULL;
  if (GetArenaNoVirtual() == NULL && ia_ != NULL) {
    delete ia_;
  }
  ia_ = NULL;
  if (GetArenaNoVirtual() == NULL && ib_ != NULL) {
    delete ib_;
  }
  ib_ = NULL;
  if (GetArenaNoVirtual() == NULL && ic_ != NULL) {
    delete ic_;
  }
  ic_ = NULL;
}

bool BasicResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.BasicResultItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SearchZBorder.chanel Va = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_va()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.chanel Vb = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.chanel Vc = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.chanel Ia = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ia()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.chanel Ib = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ib()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.chanel Ic = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.BasicResultItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.BasicResultItem)
  return false;
#undef DO_
}

void BasicResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.BasicResultItem)
  // .SearchZBorder.chanel Va = 1;
  if (this->has_va()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->va_, output);
  }

  // .SearchZBorder.chanel Vb = 2;
  if (this->has_vb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vb_, output);
  }

  // .SearchZBorder.chanel Vc = 3;
  if (this->has_vc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vc_, output);
  }

  // .SearchZBorder.chanel Ia = 4;
  if (this->has_ia()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ia_, output);
  }

  // .SearchZBorder.chanel Ib = 5;
  if (this->has_ib()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ib_, output);
  }

  // .SearchZBorder.chanel Ic = 6;
  if (this->has_ic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ic_, output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.BasicResultItem)
}

::google::protobuf::uint8* BasicResultItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.BasicResultItem)
  // .SearchZBorder.chanel Va = 1;
  if (this->has_va()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->va_, false, target);
  }

  // .SearchZBorder.chanel Vb = 2;
  if (this->has_vb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vb_, false, target);
  }

  // .SearchZBorder.chanel Vc = 3;
  if (this->has_vc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vc_, false, target);
  }

  // .SearchZBorder.chanel Ia = 4;
  if (this->has_ia()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ia_, false, target);
  }

  // .SearchZBorder.chanel Ib = 5;
  if (this->has_ib()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ib_, false, target);
  }

  // .SearchZBorder.chanel Ic = 6;
  if (this->has_ic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ic_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.BasicResultItem)
  return target;
}

size_t BasicResultItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.BasicResultItem)
  size_t total_size = 0;

  // .SearchZBorder.chanel Va = 1;
  if (this->has_va()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->va_);
  }

  // .SearchZBorder.chanel Vb = 2;
  if (this->has_vb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vb_);
  }

  // .SearchZBorder.chanel Vc = 3;
  if (this->has_vc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vc_);
  }

  // .SearchZBorder.chanel Ia = 4;
  if (this->has_ia()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ia_);
  }

  // .SearchZBorder.chanel Ib = 5;
  if (this->has_ib()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ib_);
  }

  // .SearchZBorder.chanel Ic = 6;
  if (this->has_ic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ic_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicResultItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.BasicResultItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicResultItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicResultItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.BasicResultItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.BasicResultItem)
    MergeFrom(*source);
  }
}

void BasicResultItem::MergeFrom(const BasicResultItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.BasicResultItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_va()) {
    mutable_va()->::SearchZBorder::chanel::MergeFrom(from.va());
  }
  if (from.has_vb()) {
    mutable_vb()->::SearchZBorder::chanel::MergeFrom(from.vb());
  }
  if (from.has_vc()) {
    mutable_vc()->::SearchZBorder::chanel::MergeFrom(from.vc());
  }
  if (from.has_ia()) {
    mutable_ia()->::SearchZBorder::chanel::MergeFrom(from.ia());
  }
  if (from.has_ib()) {
    mutable_ib()->::SearchZBorder::chanel::MergeFrom(from.ib());
  }
  if (from.has_ic()) {
    mutable_ic()->::SearchZBorder::chanel::MergeFrom(from.ic());
  }
}

void BasicResultItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.BasicResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicResultItem::CopyFrom(const BasicResultItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.BasicResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicResultItem::IsInitialized() const {
  return true;
}

void BasicResultItem::Swap(BasicResultItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicResultItem::InternalSwap(BasicResultItem* other) {
  std::swap(va_, other->va_);
  std::swap(vb_, other->vb_);
  std::swap(vc_, other->vc_);
  std::swap(ia_, other->ia_);
  std::swap(ib_, other->ib_);
  std::swap(ic_, other->ic_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasicResultItem::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasicResultItem

// .SearchZBorder.chanel Va = 1;
bool BasicResultItem::has_va() const {
  return this != internal_default_instance() && va_ != NULL;
}
void BasicResultItem::clear_va() {
  if (GetArenaNoVirtual() == NULL && va_ != NULL) delete va_;
  va_ = NULL;
}
const ::SearchZBorder::chanel& BasicResultItem::va() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.BasicResultItem.Va)
  return va_ != NULL ? *va_
                         : *::SearchZBorder::chanel::internal_default_instance();
}
::SearchZBorder::chanel* BasicResultItem::mutable_va() {
  
  if (va_ == NULL) {
    va_ = new ::SearchZBorder::chanel;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.BasicResultItem.Va)
  return va_;
}
::SearchZBorder::chanel* BasicResultItem::release_va() {
  // @@protoc_insertion_point(field_release:SearchZBorder.BasicResultItem.Va)
  
  ::SearchZBorder::chanel* temp = va_;
  va_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_va(::SearchZBorder::chanel* va) {
  delete va_;
  va_ = va;
  if (va) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.BasicResultItem.Va)
}

// .SearchZBorder.chanel Vb = 2;
bool BasicResultItem::has_vb() const {
  return this != internal_default_instance() && vb_ != NULL;
}
void BasicResultItem::clear_vb() {
  if (GetArenaNoVirtual() == NULL && vb_ != NULL) delete vb_;
  vb_ = NULL;
}
const ::SearchZBorder::chanel& BasicResultItem::vb() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.BasicResultItem.Vb)
  return vb_ != NULL ? *vb_
                         : *::SearchZBorder::chanel::internal_default_instance();
}
::SearchZBorder::chanel* BasicResultItem::mutable_vb() {
  
  if (vb_ == NULL) {
    vb_ = new ::SearchZBorder::chanel;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.BasicResultItem.Vb)
  return vb_;
}
::SearchZBorder::chanel* BasicResultItem::release_vb() {
  // @@protoc_insertion_point(field_release:SearchZBorder.BasicResultItem.Vb)
  
  ::SearchZBorder::chanel* temp = vb_;
  vb_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_vb(::SearchZBorder::chanel* vb) {
  delete vb_;
  vb_ = vb;
  if (vb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.BasicResultItem.Vb)
}

// .SearchZBorder.chanel Vc = 3;
bool BasicResultItem::has_vc() const {
  return this != internal_default_instance() && vc_ != NULL;
}
void BasicResultItem::clear_vc() {
  if (GetArenaNoVirtual() == NULL && vc_ != NULL) delete vc_;
  vc_ = NULL;
}
const ::SearchZBorder::chanel& BasicResultItem::vc() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.BasicResultItem.Vc)
  return vc_ != NULL ? *vc_
                         : *::SearchZBorder::chanel::internal_default_instance();
}
::SearchZBorder::chanel* BasicResultItem::mutable_vc() {
  
  if (vc_ == NULL) {
    vc_ = new ::SearchZBorder::chanel;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.BasicResultItem.Vc)
  return vc_;
}
::SearchZBorder::chanel* BasicResultItem::release_vc() {
  // @@protoc_insertion_point(field_release:SearchZBorder.BasicResultItem.Vc)
  
  ::SearchZBorder::chanel* temp = vc_;
  vc_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_vc(::SearchZBorder::chanel* vc) {
  delete vc_;
  vc_ = vc;
  if (vc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.BasicResultItem.Vc)
}

// .SearchZBorder.chanel Ia = 4;
bool BasicResultItem::has_ia() const {
  return this != internal_default_instance() && ia_ != NULL;
}
void BasicResultItem::clear_ia() {
  if (GetArenaNoVirtual() == NULL && ia_ != NULL) delete ia_;
  ia_ = NULL;
}
const ::SearchZBorder::chanel& BasicResultItem::ia() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.BasicResultItem.Ia)
  return ia_ != NULL ? *ia_
                         : *::SearchZBorder::chanel::internal_default_instance();
}
::SearchZBorder::chanel* BasicResultItem::mutable_ia() {
  
  if (ia_ == NULL) {
    ia_ = new ::SearchZBorder::chanel;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.BasicResultItem.Ia)
  return ia_;
}
::SearchZBorder::chanel* BasicResultItem::release_ia() {
  // @@protoc_insertion_point(field_release:SearchZBorder.BasicResultItem.Ia)
  
  ::SearchZBorder::chanel* temp = ia_;
  ia_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_ia(::SearchZBorder::chanel* ia) {
  delete ia_;
  ia_ = ia;
  if (ia) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.BasicResultItem.Ia)
}

// .SearchZBorder.chanel Ib = 5;
bool BasicResultItem::has_ib() const {
  return this != internal_default_instance() && ib_ != NULL;
}
void BasicResultItem::clear_ib() {
  if (GetArenaNoVirtual() == NULL && ib_ != NULL) delete ib_;
  ib_ = NULL;
}
const ::SearchZBorder::chanel& BasicResultItem::ib() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.BasicResultItem.Ib)
  return ib_ != NULL ? *ib_
                         : *::SearchZBorder::chanel::internal_default_instance();
}
::SearchZBorder::chanel* BasicResultItem::mutable_ib() {
  
  if (ib_ == NULL) {
    ib_ = new ::SearchZBorder::chanel;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.BasicResultItem.Ib)
  return ib_;
}
::SearchZBorder::chanel* BasicResultItem::release_ib() {
  // @@protoc_insertion_point(field_release:SearchZBorder.BasicResultItem.Ib)
  
  ::SearchZBorder::chanel* temp = ib_;
  ib_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_ib(::SearchZBorder::chanel* ib) {
  delete ib_;
  ib_ = ib;
  if (ib) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.BasicResultItem.Ib)
}

// .SearchZBorder.chanel Ic = 6;
bool BasicResultItem::has_ic() const {
  return this != internal_default_instance() && ic_ != NULL;
}
void BasicResultItem::clear_ic() {
  if (GetArenaNoVirtual() == NULL && ic_ != NULL) delete ic_;
  ic_ = NULL;
}
const ::SearchZBorder::chanel& BasicResultItem::ic() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.BasicResultItem.Ic)
  return ic_ != NULL ? *ic_
                         : *::SearchZBorder::chanel::internal_default_instance();
}
::SearchZBorder::chanel* BasicResultItem::mutable_ic() {
  
  if (ic_ == NULL) {
    ic_ = new ::SearchZBorder::chanel;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.BasicResultItem.Ic)
  return ic_;
}
::SearchZBorder::chanel* BasicResultItem::release_ic() {
  // @@protoc_insertion_point(field_release:SearchZBorder.BasicResultItem.Ic)
  
  ::SearchZBorder::chanel* temp = ic_;
  ic_ = NULL;
  return temp;
}
void BasicResultItem::set_allocated_ic(::SearchZBorder::chanel* ic) {
  delete ic_;
  ic_ = ic;
  if (ic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.BasicResultItem.Ic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestItem_SearchZBorder::kIIndexFieldNumber;
const int TestItem_SearchZBorder::kErrortypeFieldNumber;
const int TestItem_SearchZBorder::kFEndZFieldNumber;
const int TestItem_SearchZBorder::kFEndZAngleFieldNumber;
const int TestItem_SearchZBorder::kFHeadZFieldNumber;
const int TestItem_SearchZBorder::kFHeadZAngleFieldNumber;
const int TestItem_SearchZBorder::kFZStepFieldNumber;
const int TestItem_SearchZBorder::kFDLIFieldNumber;
const int TestItem_SearchZBorder::kFDLVFieldNumber;
const int TestItem_SearchZBorder::kFMaxErrorTimeFieldNumber;
const int TestItem_SearchZBorder::kFLoadCurrentFieldNumber;
const int TestItem_SearchZBorder::kFLoadAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestItem_SearchZBorder::TestItem_SearchZBorder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.TestItem_SearchZBorder)
}
TestItem_SearchZBorder::TestItem_SearchZBorder(const TestItem_SearchZBorder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iindex_, &from.iindex_,
    reinterpret_cast<char*>(&floadangle_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(floadangle_));
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.TestItem_SearchZBorder)
}

void TestItem_SearchZBorder::SharedCtor() {
  ::memset(&iindex_, 0, reinterpret_cast<char*>(&floadangle_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(floadangle_));
  _cached_size_ = 0;
}

TestItem_SearchZBorder::~TestItem_SearchZBorder() {
  // @@protoc_insertion_point(destructor:SearchZBorder.TestItem_SearchZBorder)
  SharedDtor();
}

void TestItem_SearchZBorder::SharedDtor() {
}

void TestItem_SearchZBorder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestItem_SearchZBorder::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[2].descriptor;
}

const TestItem_SearchZBorder& TestItem_SearchZBorder::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestItem_SearchZBorder* TestItem_SearchZBorder::New(::google::protobuf::Arena* arena) const {
  TestItem_SearchZBorder* n = new TestItem_SearchZBorder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestItem_SearchZBorder::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.TestItem_SearchZBorder)
  ::memset(&iindex_, 0, reinterpret_cast<char*>(&floadangle_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(floadangle_));
}

bool TestItem_SearchZBorder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.TestItem_SearchZBorder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 iIndex = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.Error_type errortype = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errortype(static_cast< ::SearchZBorder::Error_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fEnd_Z = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fend_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fEnd_ZAngle = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fend_zangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fHead_Z = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fhead_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fHead_ZAngle = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fhead_zangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fZ_Step = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fz_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fDL_I = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fDL_V = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdl_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMaxErrorTime = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmaxerrortime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fLoadCurrent = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floadcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fLoadAngle = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floadangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.TestItem_SearchZBorder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.TestItem_SearchZBorder)
  return false;
#undef DO_
}

void TestItem_SearchZBorder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.TestItem_SearchZBorder)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iindex(), output);
  }

  // .SearchZBorder.Error_type errortype = 2;
  if (this->errortype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errortype(), output);
  }

  // float fEnd_Z = 3;
  if (this->fend_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fend_z(), output);
  }

  // float fEnd_ZAngle = 4;
  if (this->fend_zangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fend_zangle(), output);
  }

  // float fHead_Z = 5;
  if (this->fhead_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fhead_z(), output);
  }

  // float fHead_ZAngle = 6;
  if (this->fhead_zangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fhead_zangle(), output);
  }

  // float fZ_Step = 7;
  if (this->fz_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fz_step(), output);
  }

  // float fDL_I = 8;
  if (this->fdl_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fdl_i(), output);
  }

  // float fDL_V = 9;
  if (this->fdl_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fdl_v(), output);
  }

  // float fMaxErrorTime = 10;
  if (this->fmaxerrortime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fmaxerrortime(), output);
  }

  // float fLoadCurrent = 11;
  if (this->floadcurrent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->floadcurrent(), output);
  }

  // float fLoadAngle = 12;
  if (this->floadangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->floadangle(), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.TestItem_SearchZBorder)
}

::google::protobuf::uint8* TestItem_SearchZBorder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.TestItem_SearchZBorder)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iindex(), target);
  }

  // .SearchZBorder.Error_type errortype = 2;
  if (this->errortype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errortype(), target);
  }

  // float fEnd_Z = 3;
  if (this->fend_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fend_z(), target);
  }

  // float fEnd_ZAngle = 4;
  if (this->fend_zangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fend_zangle(), target);
  }

  // float fHead_Z = 5;
  if (this->fhead_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fhead_z(), target);
  }

  // float fHead_ZAngle = 6;
  if (this->fhead_zangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fhead_zangle(), target);
  }

  // float fZ_Step = 7;
  if (this->fz_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fz_step(), target);
  }

  // float fDL_I = 8;
  if (this->fdl_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fdl_i(), target);
  }

  // float fDL_V = 9;
  if (this->fdl_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fdl_v(), target);
  }

  // float fMaxErrorTime = 10;
  if (this->fmaxerrortime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fmaxerrortime(), target);
  }

  // float fLoadCurrent = 11;
  if (this->floadcurrent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->floadcurrent(), target);
  }

  // float fLoadAngle = 12;
  if (this->floadangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->floadangle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.TestItem_SearchZBorder)
  return target;
}

size_t TestItem_SearchZBorder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.TestItem_SearchZBorder)
  size_t total_size = 0;

  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iindex());
  }

  // .SearchZBorder.Error_type errortype = 2;
  if (this->errortype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errortype());
  }

  // float fEnd_Z = 3;
  if (this->fend_z() != 0) {
    total_size += 1 + 4;
  }

  // float fEnd_ZAngle = 4;
  if (this->fend_zangle() != 0) {
    total_size += 1 + 4;
  }

  // float fHead_Z = 5;
  if (this->fhead_z() != 0) {
    total_size += 1 + 4;
  }

  // float fHead_ZAngle = 6;
  if (this->fhead_zangle() != 0) {
    total_size += 1 + 4;
  }

  // float fZ_Step = 7;
  if (this->fz_step() != 0) {
    total_size += 1 + 4;
  }

  // float fDL_I = 8;
  if (this->fdl_i() != 0) {
    total_size += 1 + 4;
  }

  // float fDL_V = 9;
  if (this->fdl_v() != 0) {
    total_size += 1 + 4;
  }

  // float fMaxErrorTime = 10;
  if (this->fmaxerrortime() != 0) {
    total_size += 1 + 4;
  }

  // float fLoadCurrent = 11;
  if (this->floadcurrent() != 0) {
    total_size += 1 + 4;
  }

  // float fLoadAngle = 12;
  if (this->floadangle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestItem_SearchZBorder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.TestItem_SearchZBorder)
  GOOGLE_DCHECK_NE(&from, this);
  const TestItem_SearchZBorder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestItem_SearchZBorder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.TestItem_SearchZBorder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.TestItem_SearchZBorder)
    MergeFrom(*source);
  }
}

void TestItem_SearchZBorder::MergeFrom(const TestItem_SearchZBorder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.TestItem_SearchZBorder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.iindex() != 0) {
    set_iindex(from.iindex());
  }
  if (from.errortype() != 0) {
    set_errortype(from.errortype());
  }
  if (from.fend_z() != 0) {
    set_fend_z(from.fend_z());
  }
  if (from.fend_zangle() != 0) {
    set_fend_zangle(from.fend_zangle());
  }
  if (from.fhead_z() != 0) {
    set_fhead_z(from.fhead_z());
  }
  if (from.fhead_zangle() != 0) {
    set_fhead_zangle(from.fhead_zangle());
  }
  if (from.fz_step() != 0) {
    set_fz_step(from.fz_step());
  }
  if (from.fdl_i() != 0) {
    set_fdl_i(from.fdl_i());
  }
  if (from.fdl_v() != 0) {
    set_fdl_v(from.fdl_v());
  }
  if (from.fmaxerrortime() != 0) {
    set_fmaxerrortime(from.fmaxerrortime());
  }
  if (from.floadcurrent() != 0) {
    set_floadcurrent(from.floadcurrent());
  }
  if (from.floadangle() != 0) {
    set_floadangle(from.floadangle());
  }
}

void TestItem_SearchZBorder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.TestItem_SearchZBorder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestItem_SearchZBorder::CopyFrom(const TestItem_SearchZBorder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.TestItem_SearchZBorder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestItem_SearchZBorder::IsInitialized() const {
  return true;
}

void TestItem_SearchZBorder::Swap(TestItem_SearchZBorder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestItem_SearchZBorder::InternalSwap(TestItem_SearchZBorder* other) {
  std::swap(iindex_, other->iindex_);
  std::swap(errortype_, other->errortype_);
  std::swap(fend_z_, other->fend_z_);
  std::swap(fend_zangle_, other->fend_zangle_);
  std::swap(fhead_z_, other->fhead_z_);
  std::swap(fhead_zangle_, other->fhead_zangle_);
  std::swap(fz_step_, other->fz_step_);
  std::swap(fdl_i_, other->fdl_i_);
  std::swap(fdl_v_, other->fdl_v_);
  std::swap(fmaxerrortime_, other->fmaxerrortime_);
  std::swap(floadcurrent_, other->floadcurrent_);
  std::swap(floadangle_, other->floadangle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestItem_SearchZBorder::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestItem_SearchZBorder

// uint32 iIndex = 1;
void TestItem_SearchZBorder::clear_iindex() {
  iindex_ = 0u;
}
::google::protobuf::uint32 TestItem_SearchZBorder::iindex() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.iIndex)
  return iindex_;
}
void TestItem_SearchZBorder::set_iindex(::google::protobuf::uint32 value) {
  
  iindex_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.iIndex)
}

// .SearchZBorder.Error_type errortype = 2;
void TestItem_SearchZBorder::clear_errortype() {
  errortype_ = 0;
}
::SearchZBorder::Error_type TestItem_SearchZBorder::errortype() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.errortype)
  return static_cast< ::SearchZBorder::Error_type >(errortype_);
}
void TestItem_SearchZBorder::set_errortype(::SearchZBorder::Error_type value) {
  
  errortype_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.errortype)
}

// float fEnd_Z = 3;
void TestItem_SearchZBorder::clear_fend_z() {
  fend_z_ = 0;
}
float TestItem_SearchZBorder::fend_z() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fEnd_Z)
  return fend_z_;
}
void TestItem_SearchZBorder::set_fend_z(float value) {
  
  fend_z_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fEnd_Z)
}

// float fEnd_ZAngle = 4;
void TestItem_SearchZBorder::clear_fend_zangle() {
  fend_zangle_ = 0;
}
float TestItem_SearchZBorder::fend_zangle() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fEnd_ZAngle)
  return fend_zangle_;
}
void TestItem_SearchZBorder::set_fend_zangle(float value) {
  
  fend_zangle_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fEnd_ZAngle)
}

// float fHead_Z = 5;
void TestItem_SearchZBorder::clear_fhead_z() {
  fhead_z_ = 0;
}
float TestItem_SearchZBorder::fhead_z() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fHead_Z)
  return fhead_z_;
}
void TestItem_SearchZBorder::set_fhead_z(float value) {
  
  fhead_z_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fHead_Z)
}

// float fHead_ZAngle = 6;
void TestItem_SearchZBorder::clear_fhead_zangle() {
  fhead_zangle_ = 0;
}
float TestItem_SearchZBorder::fhead_zangle() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fHead_ZAngle)
  return fhead_zangle_;
}
void TestItem_SearchZBorder::set_fhead_zangle(float value) {
  
  fhead_zangle_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fHead_ZAngle)
}

// float fZ_Step = 7;
void TestItem_SearchZBorder::clear_fz_step() {
  fz_step_ = 0;
}
float TestItem_SearchZBorder::fz_step() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fZ_Step)
  return fz_step_;
}
void TestItem_SearchZBorder::set_fz_step(float value) {
  
  fz_step_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fZ_Step)
}

// float fDL_I = 8;
void TestItem_SearchZBorder::clear_fdl_i() {
  fdl_i_ = 0;
}
float TestItem_SearchZBorder::fdl_i() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fDL_I)
  return fdl_i_;
}
void TestItem_SearchZBorder::set_fdl_i(float value) {
  
  fdl_i_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fDL_I)
}

// float fDL_V = 9;
void TestItem_SearchZBorder::clear_fdl_v() {
  fdl_v_ = 0;
}
float TestItem_SearchZBorder::fdl_v() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fDL_V)
  return fdl_v_;
}
void TestItem_SearchZBorder::set_fdl_v(float value) {
  
  fdl_v_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fDL_V)
}

// float fMaxErrorTime = 10;
void TestItem_SearchZBorder::clear_fmaxerrortime() {
  fmaxerrortime_ = 0;
}
float TestItem_SearchZBorder::fmaxerrortime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fMaxErrorTime)
  return fmaxerrortime_;
}
void TestItem_SearchZBorder::set_fmaxerrortime(float value) {
  
  fmaxerrortime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fMaxErrorTime)
}

// float fLoadCurrent = 11;
void TestItem_SearchZBorder::clear_floadcurrent() {
  floadcurrent_ = 0;
}
float TestItem_SearchZBorder::floadcurrent() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fLoadCurrent)
  return floadcurrent_;
}
void TestItem_SearchZBorder::set_floadcurrent(float value) {
  
  floadcurrent_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fLoadCurrent)
}

// float fLoadAngle = 12;
void TestItem_SearchZBorder::clear_floadangle() {
  floadangle_ = 0;
}
float TestItem_SearchZBorder::floadangle() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder.fLoadAngle)
  return floadangle_;
}
void TestItem_SearchZBorder::set_floadangle(float value) {
  
  floadangle_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder.fLoadAngle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestItem_SearchZBorder_Result::kIIndexFieldNumber;
const int TestItem_SearchZBorder_Result::kBasicFieldNumber;
const int TestItem_SearchZBorder_Result::kFZFieldNumber;
const int TestItem_SearchZBorder_Result::kFZAngleFieldNumber;
const int TestItem_SearchZBorder_Result::kFTimeFieldNumber;
const int TestItem_SearchZBorder_Result::kBEndFieldNumber;
const int TestItem_SearchZBorder_Result::kNibinstateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestItem_SearchZBorder_Result::TestItem_SearchZBorder_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.TestItem_SearchZBorder_Result)
}
TestItem_SearchZBorder_Result::TestItem_SearchZBorder_Result(const TestItem_SearchZBorder_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basic()) {
    basic_ = new ::SearchZBorder::BasicResultItem(*from.basic_);
  } else {
    basic_ = NULL;
  }
  ::memcpy(&iindex_, &from.iindex_,
    reinterpret_cast<char*>(&nibinstate_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(nibinstate_));
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.TestItem_SearchZBorder_Result)
}

void TestItem_SearchZBorder_Result::SharedCtor() {
  ::memset(&basic_, 0, reinterpret_cast<char*>(&nibinstate_) -
    reinterpret_cast<char*>(&basic_) + sizeof(nibinstate_));
  _cached_size_ = 0;
}

TestItem_SearchZBorder_Result::~TestItem_SearchZBorder_Result() {
  // @@protoc_insertion_point(destructor:SearchZBorder.TestItem_SearchZBorder_Result)
  SharedDtor();
}

void TestItem_SearchZBorder_Result::SharedDtor() {
  if (this != internal_default_instance()) {
    delete basic_;
  }
}

void TestItem_SearchZBorder_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestItem_SearchZBorder_Result::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[3].descriptor;
}

const TestItem_SearchZBorder_Result& TestItem_SearchZBorder_Result::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

TestItem_SearchZBorder_Result* TestItem_SearchZBorder_Result::New(::google::protobuf::Arena* arena) const {
  TestItem_SearchZBorder_Result* n = new TestItem_SearchZBorder_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestItem_SearchZBorder_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.TestItem_SearchZBorder_Result)
  if (GetArenaNoVirtual() == NULL && basic_ != NULL) {
    delete basic_;
  }
  basic_ = NULL;
  ::memset(&iindex_, 0, reinterpret_cast<char*>(&nibinstate_) -
    reinterpret_cast<char*>(&iindex_) + sizeof(nibinstate_));
}

bool TestItem_SearchZBorder_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.TestItem_SearchZBorder_Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 iIndex = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.BasicResultItem basic = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fZ = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fZAngle = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fzangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTime = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bEnd = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nibinstate = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nibinstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.TestItem_SearchZBorder_Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.TestItem_SearchZBorder_Result)
  return false;
#undef DO_
}

void TestItem_SearchZBorder_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.TestItem_SearchZBorder_Result)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iindex(), output);
  }

  // .SearchZBorder.BasicResultItem basic = 2;
  if (this->has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basic_, output);
  }

  // float fZ = 3;
  if (this->fz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fz(), output);
  }

  // float fZAngle = 4;
  if (this->fzangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fzangle(), output);
  }

  // float fTime = 5;
  if (this->ftime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ftime(), output);
  }

  // bool bEnd = 6;
  if (this->bend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bend(), output);
  }

  // uint32 nibinstate = 7;
  if (this->nibinstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nibinstate(), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.TestItem_SearchZBorder_Result)
}

::google::protobuf::uint8* TestItem_SearchZBorder_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.TestItem_SearchZBorder_Result)
  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iindex(), target);
  }

  // .SearchZBorder.BasicResultItem basic = 2;
  if (this->has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->basic_, false, target);
  }

  // float fZ = 3;
  if (this->fz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fz(), target);
  }

  // float fZAngle = 4;
  if (this->fzangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fzangle(), target);
  }

  // float fTime = 5;
  if (this->ftime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ftime(), target);
  }

  // bool bEnd = 6;
  if (this->bend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bend(), target);
  }

  // uint32 nibinstate = 7;
  if (this->nibinstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nibinstate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.TestItem_SearchZBorder_Result)
  return target;
}

size_t TestItem_SearchZBorder_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.TestItem_SearchZBorder_Result)
  size_t total_size = 0;

  // .SearchZBorder.BasicResultItem basic = 2;
  if (this->has_basic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->basic_);
  }

  // uint32 iIndex = 1;
  if (this->iindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iindex());
  }

  // float fZ = 3;
  if (this->fz() != 0) {
    total_size += 1 + 4;
  }

  // float fZAngle = 4;
  if (this->fzangle() != 0) {
    total_size += 1 + 4;
  }

  // float fTime = 5;
  if (this->ftime() != 0) {
    total_size += 1 + 4;
  }

  // bool bEnd = 6;
  if (this->bend() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nibinstate = 7;
  if (this->nibinstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nibinstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestItem_SearchZBorder_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.TestItem_SearchZBorder_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const TestItem_SearchZBorder_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestItem_SearchZBorder_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.TestItem_SearchZBorder_Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.TestItem_SearchZBorder_Result)
    MergeFrom(*source);
  }
}

void TestItem_SearchZBorder_Result::MergeFrom(const TestItem_SearchZBorder_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.TestItem_SearchZBorder_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basic()) {
    mutable_basic()->::SearchZBorder::BasicResultItem::MergeFrom(from.basic());
  }
  if (from.iindex() != 0) {
    set_iindex(from.iindex());
  }
  if (from.fz() != 0) {
    set_fz(from.fz());
  }
  if (from.fzangle() != 0) {
    set_fzangle(from.fzangle());
  }
  if (from.ftime() != 0) {
    set_ftime(from.ftime());
  }
  if (from.bend() != 0) {
    set_bend(from.bend());
  }
  if (from.nibinstate() != 0) {
    set_nibinstate(from.nibinstate());
  }
}

void TestItem_SearchZBorder_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.TestItem_SearchZBorder_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestItem_SearchZBorder_Result::CopyFrom(const TestItem_SearchZBorder_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.TestItem_SearchZBorder_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestItem_SearchZBorder_Result::IsInitialized() const {
  return true;
}

void TestItem_SearchZBorder_Result::Swap(TestItem_SearchZBorder_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestItem_SearchZBorder_Result::InternalSwap(TestItem_SearchZBorder_Result* other) {
  std::swap(basic_, other->basic_);
  std::swap(iindex_, other->iindex_);
  std::swap(fz_, other->fz_);
  std::swap(fzangle_, other->fzangle_);
  std::swap(ftime_, other->ftime_);
  std::swap(bend_, other->bend_);
  std::swap(nibinstate_, other->nibinstate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestItem_SearchZBorder_Result::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestItem_SearchZBorder_Result

// uint32 iIndex = 1;
void TestItem_SearchZBorder_Result::clear_iindex() {
  iindex_ = 0u;
}
::google::protobuf::uint32 TestItem_SearchZBorder_Result::iindex() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder_Result.iIndex)
  return iindex_;
}
void TestItem_SearchZBorder_Result::set_iindex(::google::protobuf::uint32 value) {
  
  iindex_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder_Result.iIndex)
}

// .SearchZBorder.BasicResultItem basic = 2;
bool TestItem_SearchZBorder_Result::has_basic() const {
  return this != internal_default_instance() && basic_ != NULL;
}
void TestItem_SearchZBorder_Result::clear_basic() {
  if (GetArenaNoVirtual() == NULL && basic_ != NULL) delete basic_;
  basic_ = NULL;
}
const ::SearchZBorder::BasicResultItem& TestItem_SearchZBorder_Result::basic() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder_Result.basic)
  return basic_ != NULL ? *basic_
                         : *::SearchZBorder::BasicResultItem::internal_default_instance();
}
::SearchZBorder::BasicResultItem* TestItem_SearchZBorder_Result::mutable_basic() {
  
  if (basic_ == NULL) {
    basic_ = new ::SearchZBorder::BasicResultItem;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.TestItem_SearchZBorder_Result.basic)
  return basic_;
}
::SearchZBorder::BasicResultItem* TestItem_SearchZBorder_Result::release_basic() {
  // @@protoc_insertion_point(field_release:SearchZBorder.TestItem_SearchZBorder_Result.basic)
  
  ::SearchZBorder::BasicResultItem* temp = basic_;
  basic_ = NULL;
  return temp;
}
void TestItem_SearchZBorder_Result::set_allocated_basic(::SearchZBorder::BasicResultItem* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.TestItem_SearchZBorder_Result.basic)
}

// float fZ = 3;
void TestItem_SearchZBorder_Result::clear_fz() {
  fz_ = 0;
}
float TestItem_SearchZBorder_Result::fz() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder_Result.fZ)
  return fz_;
}
void TestItem_SearchZBorder_Result::set_fz(float value) {
  
  fz_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder_Result.fZ)
}

// float fZAngle = 4;
void TestItem_SearchZBorder_Result::clear_fzangle() {
  fzangle_ = 0;
}
float TestItem_SearchZBorder_Result::fzangle() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder_Result.fZAngle)
  return fzangle_;
}
void TestItem_SearchZBorder_Result::set_fzangle(float value) {
  
  fzangle_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder_Result.fZAngle)
}

// float fTime = 5;
void TestItem_SearchZBorder_Result::clear_ftime() {
  ftime_ = 0;
}
float TestItem_SearchZBorder_Result::ftime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder_Result.fTime)
  return ftime_;
}
void TestItem_SearchZBorder_Result::set_ftime(float value) {
  
  ftime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder_Result.fTime)
}

// bool bEnd = 6;
void TestItem_SearchZBorder_Result::clear_bend() {
  bend_ = false;
}
bool TestItem_SearchZBorder_Result::bend() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder_Result.bEnd)
  return bend_;
}
void TestItem_SearchZBorder_Result::set_bend(bool value) {
  
  bend_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder_Result.bEnd)
}

// uint32 nibinstate = 7;
void TestItem_SearchZBorder_Result::clear_nibinstate() {
  nibinstate_ = 0u;
}
::google::protobuf::uint32 TestItem_SearchZBorder_Result::nibinstate() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TestItem_SearchZBorder_Result.nibinstate)
  return nibinstate_;
}
void TestItem_SearchZBorder_Result::set_nibinstate(::google::protobuf::uint32 value) {
  
  nibinstate_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TestItem_SearchZBorder_Result.nibinstate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Items::kOCommFieldNumber;
const int Items::kOSwitchFieldNumber;
const int Items::kOItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Items::Items()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.Items)
}
Items::Items(const Items& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      oitems_(from.oitems_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ocomm()) {
    ocomm_ = new ::SearchZBorder::CommonPara(*from.ocomm_);
  } else {
    ocomm_ = NULL;
  }
  if (from.has_oswitch()) {
    oswitch_ = new ::SearchZBorder::SwitchPara(*from.oswitch_);
  } else {
    oswitch_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.Items)
}

void Items::SharedCtor() {
  ::memset(&ocomm_, 0, reinterpret_cast<char*>(&oswitch_) -
    reinterpret_cast<char*>(&ocomm_) + sizeof(oswitch_));
  _cached_size_ = 0;
}

Items::~Items() {
  // @@protoc_insertion_point(destructor:SearchZBorder.Items)
  SharedDtor();
}

void Items::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ocomm_;
  }
  if (this != internal_default_instance()) {
    delete oswitch_;
  }
}

void Items::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Items::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[4].descriptor;
}

const Items& Items::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

Items* Items::New(::google::protobuf::Arena* arena) const {
  Items* n = new Items;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Items::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.Items)
  oitems_.Clear();
  if (GetArenaNoVirtual() == NULL && ocomm_ != NULL) {
    delete ocomm_;
  }
  ocomm_ = NULL;
  if (GetArenaNoVirtual() == NULL && oswitch_ != NULL) {
    delete oswitch_;
  }
  oswitch_ = NULL;
}

bool Items::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.Items)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SearchZBorder.CommonPara oComm = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ocomm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.SwitchPara oSwitch = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oswitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SearchZBorder.TestItem_SearchZBorder oItems = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_oitems()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.Items)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.Items)
  return false;
#undef DO_
}

void Items::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.Items)
  // .SearchZBorder.CommonPara oComm = 1;
  if (this->has_ocomm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ocomm_, output);
  }

  // .SearchZBorder.SwitchPara oSwitch = 2;
  if (this->has_oswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->oswitch_, output);
  }

  // repeated .SearchZBorder.TestItem_SearchZBorder oItems = 3;
  for (unsigned int i = 0, n = this->oitems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oitems(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.Items)
}

::google::protobuf::uint8* Items::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.Items)
  // .SearchZBorder.CommonPara oComm = 1;
  if (this->has_ocomm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ocomm_, false, target);
  }

  // .SearchZBorder.SwitchPara oSwitch = 2;
  if (this->has_oswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->oswitch_, false, target);
  }

  // repeated .SearchZBorder.TestItem_SearchZBorder oItems = 3;
  for (unsigned int i = 0, n = this->oitems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->oitems(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.Items)
  return target;
}

size_t Items::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.Items)
  size_t total_size = 0;

  // repeated .SearchZBorder.TestItem_SearchZBorder oItems = 3;
  {
    unsigned int count = this->oitems_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oitems(i));
    }
  }

  // .SearchZBorder.CommonPara oComm = 1;
  if (this->has_ocomm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ocomm_);
  }

  // .SearchZBorder.SwitchPara oSwitch = 2;
  if (this->has_oswitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oswitch_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Items::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.Items)
  GOOGLE_DCHECK_NE(&from, this);
  const Items* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Items>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.Items)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.Items)
    MergeFrom(*source);
  }
}

void Items::MergeFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.Items)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oitems_.MergeFrom(from.oitems_);
  if (from.has_ocomm()) {
    mutable_ocomm()->::SearchZBorder::CommonPara::MergeFrom(from.ocomm());
  }
  if (from.has_oswitch()) {
    mutable_oswitch()->::SearchZBorder::SwitchPara::MergeFrom(from.oswitch());
  }
}

void Items::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Items::CopyFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Items::IsInitialized() const {
  return true;
}

void Items::Swap(Items* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Items::InternalSwap(Items* other) {
  oitems_.UnsafeArenaSwap(&other->oitems_);
  std::swap(ocomm_, other->ocomm_);
  std::swap(oswitch_, other->oswitch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Items::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Items

// .SearchZBorder.CommonPara oComm = 1;
bool Items::has_ocomm() const {
  return this != internal_default_instance() && ocomm_ != NULL;
}
void Items::clear_ocomm() {
  if (GetArenaNoVirtual() == NULL && ocomm_ != NULL) delete ocomm_;
  ocomm_ = NULL;
}
const ::SearchZBorder::CommonPara& Items::ocomm() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.Items.oComm)
  return ocomm_ != NULL ? *ocomm_
                         : *::SearchZBorder::CommonPara::internal_default_instance();
}
::SearchZBorder::CommonPara* Items::mutable_ocomm() {
  
  if (ocomm_ == NULL) {
    ocomm_ = new ::SearchZBorder::CommonPara;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.Items.oComm)
  return ocomm_;
}
::SearchZBorder::CommonPara* Items::release_ocomm() {
  // @@protoc_insertion_point(field_release:SearchZBorder.Items.oComm)
  
  ::SearchZBorder::CommonPara* temp = ocomm_;
  ocomm_ = NULL;
  return temp;
}
void Items::set_allocated_ocomm(::SearchZBorder::CommonPara* ocomm) {
  delete ocomm_;
  ocomm_ = ocomm;
  if (ocomm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.Items.oComm)
}

// .SearchZBorder.SwitchPara oSwitch = 2;
bool Items::has_oswitch() const {
  return this != internal_default_instance() && oswitch_ != NULL;
}
void Items::clear_oswitch() {
  if (GetArenaNoVirtual() == NULL && oswitch_ != NULL) delete oswitch_;
  oswitch_ = NULL;
}
const ::SearchZBorder::SwitchPara& Items::oswitch() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.Items.oSwitch)
  return oswitch_ != NULL ? *oswitch_
                         : *::SearchZBorder::SwitchPara::internal_default_instance();
}
::SearchZBorder::SwitchPara* Items::mutable_oswitch() {
  
  if (oswitch_ == NULL) {
    oswitch_ = new ::SearchZBorder::SwitchPara;
  }
  // @@protoc_insertion_point(field_mutable:SearchZBorder.Items.oSwitch)
  return oswitch_;
}
::SearchZBorder::SwitchPara* Items::release_oswitch() {
  // @@protoc_insertion_point(field_release:SearchZBorder.Items.oSwitch)
  
  ::SearchZBorder::SwitchPara* temp = oswitch_;
  oswitch_ = NULL;
  return temp;
}
void Items::set_allocated_oswitch(::SearchZBorder::SwitchPara* oswitch) {
  delete oswitch_;
  oswitch_ = oswitch;
  if (oswitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SearchZBorder.Items.oSwitch)
}

// repeated .SearchZBorder.TestItem_SearchZBorder oItems = 3;
int Items::oitems_size() const {
  return oitems_.size();
}
void Items::clear_oitems() {
  oitems_.Clear();
}
const ::SearchZBorder::TestItem_SearchZBorder& Items::oitems(int index) const {
  // @@protoc_insertion_point(field_get:SearchZBorder.Items.oItems)
  return oitems_.Get(index);
}
::SearchZBorder::TestItem_SearchZBorder* Items::mutable_oitems(int index) {
  // @@protoc_insertion_point(field_mutable:SearchZBorder.Items.oItems)
  return oitems_.Mutable(index);
}
::SearchZBorder::TestItem_SearchZBorder* Items::add_oitems() {
  // @@protoc_insertion_point(field_add:SearchZBorder.Items.oItems)
  return oitems_.Add();
}
::google::protobuf::RepeatedPtrField< ::SearchZBorder::TestItem_SearchZBorder >*
Items::mutable_oitems() {
  // @@protoc_insertion_point(field_mutable_list:SearchZBorder.Items.oItems)
  return &oitems_;
}
const ::google::protobuf::RepeatedPtrField< ::SearchZBorder::TestItem_SearchZBorder >&
Items::oitems() const {
  // @@protoc_insertion_point(field_list:SearchZBorder.Items.oItems)
  return oitems_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonPara::kEDVFieldNumber;
const int CommonPara::kEDIFieldNumber;
const int CommonPara::kEDHZFieldNumber;
const int CommonPara::kPrepareTimeFieldNumber;
const int CommonPara::kPreFaultTimeFieldNumber;
const int CommonPara::kPostFaultTimeFieldNumber;
const int CommonPara::kEPTCONFieldNumber;
const int CommonPara::kECTPOINTFieldNumber;
const int CommonPara::kEBCSIMULATIONFieldNumber;
const int CommonPara::kTripTimeFieldNumber;
const int CommonPara::kCloseTimeFieldNumber;
const int CommonPara::kEFaultIncModeFieldNumber;
const int CommonPara::kFaultAngleFieldNumber;
const int CommonPara::kEDCSIMFieldNumber;
const int CommonPara::kETestModeFieldNumber;
const int CommonPara::kZsFieldNumber;
const int CommonPara::kPhisFieldNumber;
const int CommonPara::kKOAFieldNumber;
const int CommonPara::kKOBFieldNumber;
const int CommonPara::kEKoModeFieldNumber;
const int CommonPara::kESearchTypeFieldNumber;
const int CommonPara::kEVZDEFINEFieldNumber;
const int CommonPara::kEVZPHDEFINEFieldNumber;
const int CommonPara::kVzPhdiffFieldNumber;
const int CommonPara::kKOAsFieldNumber;
const int CommonPara::kKOBsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonPara::CommonPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.CommonPara)
}
CommonPara::CommonPara(const CommonPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&edv_, &from.edv_,
    reinterpret_cast<char*>(&kobs_) -
    reinterpret_cast<char*>(&edv_) + sizeof(kobs_));
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.CommonPara)
}

void CommonPara::SharedCtor() {
  ::memset(&edv_, 0, reinterpret_cast<char*>(&kobs_) -
    reinterpret_cast<char*>(&edv_) + sizeof(kobs_));
  _cached_size_ = 0;
}

CommonPara::~CommonPara() {
  // @@protoc_insertion_point(destructor:SearchZBorder.CommonPara)
  SharedDtor();
}

void CommonPara::SharedDtor() {
}

void CommonPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonPara::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[5].descriptor;
}

const CommonPara& CommonPara::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonPara* CommonPara::New(::google::protobuf::Arena* arena) const {
  CommonPara* n = new CommonPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonPara::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.CommonPara)
  ::memset(&edv_, 0, reinterpret_cast<char*>(&kobs_) -
    reinterpret_cast<char*>(&edv_) + sizeof(kobs_));
}

bool CommonPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.CommonPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float EDV = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EDI = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EDHZ = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PrepareTime = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &preparetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PreFaultTime = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prefaulttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PostFaultTime = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &postfaulttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.PTCON ePTCON = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eptcon(static_cast< ::SearchZBorder::PTCON >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.CTPOINT eCTPOINT = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ectpoint(static_cast< ::SearchZBorder::CTPOINT >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.BCSIMULATION eBCSIMULATION = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ebcsimulation(static_cast< ::SearchZBorder::BCSIMULATION >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float TripTime = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &triptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CloseTime = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &closetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.FaultIncMode eFaultIncMode = 12;
      case 12: {
        if (tag == 96u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_efaultincmode(static_cast< ::SearchZBorder::FaultIncMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float FaultAngle = 13;
      case 13: {
        if (tag == 109u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faultangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.DCSIM eDCSIM = 14;
      case 14: {
        if (tag == 112u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_edcsim(static_cast< ::SearchZBorder::DCSIM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.TestMode eTestMode = 15;
      case 15: {
        if (tag == 120u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_etestmode(static_cast< ::SearchZBorder::TestMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Zs = 16;
      case 16: {
        if (tag == 133u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Phis = 17;
      case 17: {
        if (tag == 141u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float KOA = 18;
      case 18: {
        if (tag == 149u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &koa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float KOB = 19;
      case 19: {
        if (tag == 157u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.KoMode eKoMode = 20;
      case 20: {
        if (tag == 160u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ekomode(static_cast< ::SearchZBorder::KoMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.Search_Type eSearchType = 21;
      case 21: {
        if (tag == 168u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_esearchtype(static_cast< ::SearchZBorder::Search_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.VZDEFINE eVZDEFINE = 22;
      case 22: {
        if (tag == 176u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_evzdefine(static_cast< ::SearchZBorder::VZDEFINE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SearchZBorder.VZPHDEFINE eVZPHDEFINE = 23;
      case 23: {
        if (tag == 184u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_evzphdefine(static_cast< ::SearchZBorder::VZPHDEFINE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float VzPhdiff = 24;
      case 24: {
        if (tag == 197u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vzphdiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float KOAs = 25;
      case 25: {
        if (tag == 205u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &koas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float KOBs = 26;
      case 26: {
        if (tag == 213u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.CommonPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.CommonPara)
  return false;
#undef DO_
}

void CommonPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.CommonPara)
  // float EDV = 1;
  if (this->edv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->edv(), output);
  }

  // float EDI = 2;
  if (this->edi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->edi(), output);
  }

  // float EDHZ = 3;
  if (this->edhz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->edhz(), output);
  }

  // float PrepareTime = 4;
  if (this->preparetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->preparetime(), output);
  }

  // float PreFaultTime = 5;
  if (this->prefaulttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->prefaulttime(), output);
  }

  // float PostFaultTime = 6;
  if (this->postfaulttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->postfaulttime(), output);
  }

  // .SearchZBorder.PTCON ePTCON = 7;
  if (this->eptcon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->eptcon(), output);
  }

  // .SearchZBorder.CTPOINT eCTPOINT = 8;
  if (this->ectpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ectpoint(), output);
  }

  // .SearchZBorder.BCSIMULATION eBCSIMULATION = 9;
  if (this->ebcsimulation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->ebcsimulation(), output);
  }

  // float TripTime = 10;
  if (this->triptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->triptime(), output);
  }

  // float CloseTime = 11;
  if (this->closetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->closetime(), output);
  }

  // .SearchZBorder.FaultIncMode eFaultIncMode = 12;
  if (this->efaultincmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->efaultincmode(), output);
  }

  // float FaultAngle = 13;
  if (this->faultangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->faultangle(), output);
  }

  // .SearchZBorder.DCSIM eDCSIM = 14;
  if (this->edcsim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->edcsim(), output);
  }

  // .SearchZBorder.TestMode eTestMode = 15;
  if (this->etestmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->etestmode(), output);
  }

  // float Zs = 16;
  if (this->zs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->zs(), output);
  }

  // float Phis = 17;
  if (this->phis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->phis(), output);
  }

  // float KOA = 18;
  if (this->koa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->koa(), output);
  }

  // float KOB = 19;
  if (this->kob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->kob(), output);
  }

  // .SearchZBorder.KoMode eKoMode = 20;
  if (this->ekomode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->ekomode(), output);
  }

  // .SearchZBorder.Search_Type eSearchType = 21;
  if (this->esearchtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->esearchtype(), output);
  }

  // .SearchZBorder.VZDEFINE eVZDEFINE = 22;
  if (this->evzdefine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->evzdefine(), output);
  }

  // .SearchZBorder.VZPHDEFINE eVZPHDEFINE = 23;
  if (this->evzphdefine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->evzphdefine(), output);
  }

  // float VzPhdiff = 24;
  if (this->vzphdiff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->vzphdiff(), output);
  }

  // float KOAs = 25;
  if (this->koas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->koas(), output);
  }

  // float KOBs = 26;
  if (this->kobs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->kobs(), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.CommonPara)
}

::google::protobuf::uint8* CommonPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.CommonPara)
  // float EDV = 1;
  if (this->edv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->edv(), target);
  }

  // float EDI = 2;
  if (this->edi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->edi(), target);
  }

  // float EDHZ = 3;
  if (this->edhz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->edhz(), target);
  }

  // float PrepareTime = 4;
  if (this->preparetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->preparetime(), target);
  }

  // float PreFaultTime = 5;
  if (this->prefaulttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->prefaulttime(), target);
  }

  // float PostFaultTime = 6;
  if (this->postfaulttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->postfaulttime(), target);
  }

  // .SearchZBorder.PTCON ePTCON = 7;
  if (this->eptcon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->eptcon(), target);
  }

  // .SearchZBorder.CTPOINT eCTPOINT = 8;
  if (this->ectpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ectpoint(), target);
  }

  // .SearchZBorder.BCSIMULATION eBCSIMULATION = 9;
  if (this->ebcsimulation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->ebcsimulation(), target);
  }

  // float TripTime = 10;
  if (this->triptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->triptime(), target);
  }

  // float CloseTime = 11;
  if (this->closetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->closetime(), target);
  }

  // .SearchZBorder.FaultIncMode eFaultIncMode = 12;
  if (this->efaultincmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->efaultincmode(), target);
  }

  // float FaultAngle = 13;
  if (this->faultangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->faultangle(), target);
  }

  // .SearchZBorder.DCSIM eDCSIM = 14;
  if (this->edcsim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->edcsim(), target);
  }

  // .SearchZBorder.TestMode eTestMode = 15;
  if (this->etestmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->etestmode(), target);
  }

  // float Zs = 16;
  if (this->zs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->zs(), target);
  }

  // float Phis = 17;
  if (this->phis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->phis(), target);
  }

  // float KOA = 18;
  if (this->koa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->koa(), target);
  }

  // float KOB = 19;
  if (this->kob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->kob(), target);
  }

  // .SearchZBorder.KoMode eKoMode = 20;
  if (this->ekomode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->ekomode(), target);
  }

  // .SearchZBorder.Search_Type eSearchType = 21;
  if (this->esearchtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->esearchtype(), target);
  }

  // .SearchZBorder.VZDEFINE eVZDEFINE = 22;
  if (this->evzdefine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->evzdefine(), target);
  }

  // .SearchZBorder.VZPHDEFINE eVZPHDEFINE = 23;
  if (this->evzphdefine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->evzphdefine(), target);
  }

  // float VzPhdiff = 24;
  if (this->vzphdiff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->vzphdiff(), target);
  }

  // float KOAs = 25;
  if (this->koas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->koas(), target);
  }

  // float KOBs = 26;
  if (this->kobs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->kobs(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.CommonPara)
  return target;
}

size_t CommonPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.CommonPara)
  size_t total_size = 0;

  // float EDV = 1;
  if (this->edv() != 0) {
    total_size += 1 + 4;
  }

  // float EDI = 2;
  if (this->edi() != 0) {
    total_size += 1 + 4;
  }

  // float EDHZ = 3;
  if (this->edhz() != 0) {
    total_size += 1 + 4;
  }

  // float PrepareTime = 4;
  if (this->preparetime() != 0) {
    total_size += 1 + 4;
  }

  // float PreFaultTime = 5;
  if (this->prefaulttime() != 0) {
    total_size += 1 + 4;
  }

  // float PostFaultTime = 6;
  if (this->postfaulttime() != 0) {
    total_size += 1 + 4;
  }

  // .SearchZBorder.PTCON ePTCON = 7;
  if (this->eptcon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eptcon());
  }

  // .SearchZBorder.CTPOINT eCTPOINT = 8;
  if (this->ectpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ectpoint());
  }

  // .SearchZBorder.BCSIMULATION eBCSIMULATION = 9;
  if (this->ebcsimulation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ebcsimulation());
  }

  // float TripTime = 10;
  if (this->triptime() != 0) {
    total_size += 1 + 4;
  }

  // float CloseTime = 11;
  if (this->closetime() != 0) {
    total_size += 1 + 4;
  }

  // .SearchZBorder.FaultIncMode eFaultIncMode = 12;
  if (this->efaultincmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->efaultincmode());
  }

  // float FaultAngle = 13;
  if (this->faultangle() != 0) {
    total_size += 1 + 4;
  }

  // .SearchZBorder.DCSIM eDCSIM = 14;
  if (this->edcsim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->edcsim());
  }

  // .SearchZBorder.TestMode eTestMode = 15;
  if (this->etestmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->etestmode());
  }

  // float Zs = 16;
  if (this->zs() != 0) {
    total_size += 2 + 4;
  }

  // float Phis = 17;
  if (this->phis() != 0) {
    total_size += 2 + 4;
  }

  // float KOA = 18;
  if (this->koa() != 0) {
    total_size += 2 + 4;
  }

  // float KOB = 19;
  if (this->kob() != 0) {
    total_size += 2 + 4;
  }

  // .SearchZBorder.KoMode eKoMode = 20;
  if (this->ekomode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ekomode());
  }

  // .SearchZBorder.Search_Type eSearchType = 21;
  if (this->esearchtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->esearchtype());
  }

  // .SearchZBorder.VZDEFINE eVZDEFINE = 22;
  if (this->evzdefine() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evzdefine());
  }

  // .SearchZBorder.VZPHDEFINE eVZPHDEFINE = 23;
  if (this->evzphdefine() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->evzphdefine());
  }

  // float VzPhdiff = 24;
  if (this->vzphdiff() != 0) {
    total_size += 2 + 4;
  }

  // float KOAs = 25;
  if (this->koas() != 0) {
    total_size += 2 + 4;
  }

  // float KOBs = 26;
  if (this->kobs() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.CommonPara)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.CommonPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.CommonPara)
    MergeFrom(*source);
  }
}

void CommonPara::MergeFrom(const CommonPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.CommonPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.edv() != 0) {
    set_edv(from.edv());
  }
  if (from.edi() != 0) {
    set_edi(from.edi());
  }
  if (from.edhz() != 0) {
    set_edhz(from.edhz());
  }
  if (from.preparetime() != 0) {
    set_preparetime(from.preparetime());
  }
  if (from.prefaulttime() != 0) {
    set_prefaulttime(from.prefaulttime());
  }
  if (from.postfaulttime() != 0) {
    set_postfaulttime(from.postfaulttime());
  }
  if (from.eptcon() != 0) {
    set_eptcon(from.eptcon());
  }
  if (from.ectpoint() != 0) {
    set_ectpoint(from.ectpoint());
  }
  if (from.ebcsimulation() != 0) {
    set_ebcsimulation(from.ebcsimulation());
  }
  if (from.triptime() != 0) {
    set_triptime(from.triptime());
  }
  if (from.closetime() != 0) {
    set_closetime(from.closetime());
  }
  if (from.efaultincmode() != 0) {
    set_efaultincmode(from.efaultincmode());
  }
  if (from.faultangle() != 0) {
    set_faultangle(from.faultangle());
  }
  if (from.edcsim() != 0) {
    set_edcsim(from.edcsim());
  }
  if (from.etestmode() != 0) {
    set_etestmode(from.etestmode());
  }
  if (from.zs() != 0) {
    set_zs(from.zs());
  }
  if (from.phis() != 0) {
    set_phis(from.phis());
  }
  if (from.koa() != 0) {
    set_koa(from.koa());
  }
  if (from.kob() != 0) {
    set_kob(from.kob());
  }
  if (from.ekomode() != 0) {
    set_ekomode(from.ekomode());
  }
  if (from.esearchtype() != 0) {
    set_esearchtype(from.esearchtype());
  }
  if (from.evzdefine() != 0) {
    set_evzdefine(from.evzdefine());
  }
  if (from.evzphdefine() != 0) {
    set_evzphdefine(from.evzphdefine());
  }
  if (from.vzphdiff() != 0) {
    set_vzphdiff(from.vzphdiff());
  }
  if (from.koas() != 0) {
    set_koas(from.koas());
  }
  if (from.kobs() != 0) {
    set_kobs(from.kobs());
  }
}

void CommonPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.CommonPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonPara::CopyFrom(const CommonPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.CommonPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPara::IsInitialized() const {
  return true;
}

void CommonPara::Swap(CommonPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonPara::InternalSwap(CommonPara* other) {
  std::swap(edv_, other->edv_);
  std::swap(edi_, other->edi_);
  std::swap(edhz_, other->edhz_);
  std::swap(preparetime_, other->preparetime_);
  std::swap(prefaulttime_, other->prefaulttime_);
  std::swap(postfaulttime_, other->postfaulttime_);
  std::swap(eptcon_, other->eptcon_);
  std::swap(ectpoint_, other->ectpoint_);
  std::swap(ebcsimulation_, other->ebcsimulation_);
  std::swap(triptime_, other->triptime_);
  std::swap(closetime_, other->closetime_);
  std::swap(efaultincmode_, other->efaultincmode_);
  std::swap(faultangle_, other->faultangle_);
  std::swap(edcsim_, other->edcsim_);
  std::swap(etestmode_, other->etestmode_);
  std::swap(zs_, other->zs_);
  std::swap(phis_, other->phis_);
  std::swap(koa_, other->koa_);
  std::swap(kob_, other->kob_);
  std::swap(ekomode_, other->ekomode_);
  std::swap(esearchtype_, other->esearchtype_);
  std::swap(evzdefine_, other->evzdefine_);
  std::swap(evzphdefine_, other->evzphdefine_);
  std::swap(vzphdiff_, other->vzphdiff_);
  std::swap(koas_, other->koas_);
  std::swap(kobs_, other->kobs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonPara::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonPara

// float EDV = 1;
void CommonPara::clear_edv() {
  edv_ = 0;
}
float CommonPara::edv() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.EDV)
  return edv_;
}
void CommonPara::set_edv(float value) {
  
  edv_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.EDV)
}

// float EDI = 2;
void CommonPara::clear_edi() {
  edi_ = 0;
}
float CommonPara::edi() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.EDI)
  return edi_;
}
void CommonPara::set_edi(float value) {
  
  edi_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.EDI)
}

// float EDHZ = 3;
void CommonPara::clear_edhz() {
  edhz_ = 0;
}
float CommonPara::edhz() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.EDHZ)
  return edhz_;
}
void CommonPara::set_edhz(float value) {
  
  edhz_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.EDHZ)
}

// float PrepareTime = 4;
void CommonPara::clear_preparetime() {
  preparetime_ = 0;
}
float CommonPara::preparetime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.PrepareTime)
  return preparetime_;
}
void CommonPara::set_preparetime(float value) {
  
  preparetime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.PrepareTime)
}

// float PreFaultTime = 5;
void CommonPara::clear_prefaulttime() {
  prefaulttime_ = 0;
}
float CommonPara::prefaulttime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.PreFaultTime)
  return prefaulttime_;
}
void CommonPara::set_prefaulttime(float value) {
  
  prefaulttime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.PreFaultTime)
}

// float PostFaultTime = 6;
void CommonPara::clear_postfaulttime() {
  postfaulttime_ = 0;
}
float CommonPara::postfaulttime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.PostFaultTime)
  return postfaulttime_;
}
void CommonPara::set_postfaulttime(float value) {
  
  postfaulttime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.PostFaultTime)
}

// .SearchZBorder.PTCON ePTCON = 7;
void CommonPara::clear_eptcon() {
  eptcon_ = 0;
}
::SearchZBorder::PTCON CommonPara::eptcon() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.ePTCON)
  return static_cast< ::SearchZBorder::PTCON >(eptcon_);
}
void CommonPara::set_eptcon(::SearchZBorder::PTCON value) {
  
  eptcon_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.ePTCON)
}

// .SearchZBorder.CTPOINT eCTPOINT = 8;
void CommonPara::clear_ectpoint() {
  ectpoint_ = 0;
}
::SearchZBorder::CTPOINT CommonPara::ectpoint() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eCTPOINT)
  return static_cast< ::SearchZBorder::CTPOINT >(ectpoint_);
}
void CommonPara::set_ectpoint(::SearchZBorder::CTPOINT value) {
  
  ectpoint_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eCTPOINT)
}

// .SearchZBorder.BCSIMULATION eBCSIMULATION = 9;
void CommonPara::clear_ebcsimulation() {
  ebcsimulation_ = 0;
}
::SearchZBorder::BCSIMULATION CommonPara::ebcsimulation() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eBCSIMULATION)
  return static_cast< ::SearchZBorder::BCSIMULATION >(ebcsimulation_);
}
void CommonPara::set_ebcsimulation(::SearchZBorder::BCSIMULATION value) {
  
  ebcsimulation_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eBCSIMULATION)
}

// float TripTime = 10;
void CommonPara::clear_triptime() {
  triptime_ = 0;
}
float CommonPara::triptime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.TripTime)
  return triptime_;
}
void CommonPara::set_triptime(float value) {
  
  triptime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.TripTime)
}

// float CloseTime = 11;
void CommonPara::clear_closetime() {
  closetime_ = 0;
}
float CommonPara::closetime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.CloseTime)
  return closetime_;
}
void CommonPara::set_closetime(float value) {
  
  closetime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.CloseTime)
}

// .SearchZBorder.FaultIncMode eFaultIncMode = 12;
void CommonPara::clear_efaultincmode() {
  efaultincmode_ = 0;
}
::SearchZBorder::FaultIncMode CommonPara::efaultincmode() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eFaultIncMode)
  return static_cast< ::SearchZBorder::FaultIncMode >(efaultincmode_);
}
void CommonPara::set_efaultincmode(::SearchZBorder::FaultIncMode value) {
  
  efaultincmode_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eFaultIncMode)
}

// float FaultAngle = 13;
void CommonPara::clear_faultangle() {
  faultangle_ = 0;
}
float CommonPara::faultangle() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.FaultAngle)
  return faultangle_;
}
void CommonPara::set_faultangle(float value) {
  
  faultangle_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.FaultAngle)
}

// .SearchZBorder.DCSIM eDCSIM = 14;
void CommonPara::clear_edcsim() {
  edcsim_ = 0;
}
::SearchZBorder::DCSIM CommonPara::edcsim() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eDCSIM)
  return static_cast< ::SearchZBorder::DCSIM >(edcsim_);
}
void CommonPara::set_edcsim(::SearchZBorder::DCSIM value) {
  
  edcsim_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eDCSIM)
}

// .SearchZBorder.TestMode eTestMode = 15;
void CommonPara::clear_etestmode() {
  etestmode_ = 0;
}
::SearchZBorder::TestMode CommonPara::etestmode() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eTestMode)
  return static_cast< ::SearchZBorder::TestMode >(etestmode_);
}
void CommonPara::set_etestmode(::SearchZBorder::TestMode value) {
  
  etestmode_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eTestMode)
}

// float Zs = 16;
void CommonPara::clear_zs() {
  zs_ = 0;
}
float CommonPara::zs() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.Zs)
  return zs_;
}
void CommonPara::set_zs(float value) {
  
  zs_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.Zs)
}

// float Phis = 17;
void CommonPara::clear_phis() {
  phis_ = 0;
}
float CommonPara::phis() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.Phis)
  return phis_;
}
void CommonPara::set_phis(float value) {
  
  phis_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.Phis)
}

// float KOA = 18;
void CommonPara::clear_koa() {
  koa_ = 0;
}
float CommonPara::koa() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.KOA)
  return koa_;
}
void CommonPara::set_koa(float value) {
  
  koa_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.KOA)
}

// float KOB = 19;
void CommonPara::clear_kob() {
  kob_ = 0;
}
float CommonPara::kob() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.KOB)
  return kob_;
}
void CommonPara::set_kob(float value) {
  
  kob_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.KOB)
}

// .SearchZBorder.KoMode eKoMode = 20;
void CommonPara::clear_ekomode() {
  ekomode_ = 0;
}
::SearchZBorder::KoMode CommonPara::ekomode() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eKoMode)
  return static_cast< ::SearchZBorder::KoMode >(ekomode_);
}
void CommonPara::set_ekomode(::SearchZBorder::KoMode value) {
  
  ekomode_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eKoMode)
}

// .SearchZBorder.Search_Type eSearchType = 21;
void CommonPara::clear_esearchtype() {
  esearchtype_ = 0;
}
::SearchZBorder::Search_Type CommonPara::esearchtype() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eSearchType)
  return static_cast< ::SearchZBorder::Search_Type >(esearchtype_);
}
void CommonPara::set_esearchtype(::SearchZBorder::Search_Type value) {
  
  esearchtype_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eSearchType)
}

// .SearchZBorder.VZDEFINE eVZDEFINE = 22;
void CommonPara::clear_evzdefine() {
  evzdefine_ = 0;
}
::SearchZBorder::VZDEFINE CommonPara::evzdefine() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eVZDEFINE)
  return static_cast< ::SearchZBorder::VZDEFINE >(evzdefine_);
}
void CommonPara::set_evzdefine(::SearchZBorder::VZDEFINE value) {
  
  evzdefine_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eVZDEFINE)
}

// .SearchZBorder.VZPHDEFINE eVZPHDEFINE = 23;
void CommonPara::clear_evzphdefine() {
  evzphdefine_ = 0;
}
::SearchZBorder::VZPHDEFINE CommonPara::evzphdefine() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.eVZPHDEFINE)
  return static_cast< ::SearchZBorder::VZPHDEFINE >(evzphdefine_);
}
void CommonPara::set_evzphdefine(::SearchZBorder::VZPHDEFINE value) {
  
  evzphdefine_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.eVZPHDEFINE)
}

// float VzPhdiff = 24;
void CommonPara::clear_vzphdiff() {
  vzphdiff_ = 0;
}
float CommonPara::vzphdiff() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.VzPhdiff)
  return vzphdiff_;
}
void CommonPara::set_vzphdiff(float value) {
  
  vzphdiff_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.VzPhdiff)
}

// float KOAs = 25;
void CommonPara::clear_koas() {
  koas_ = 0;
}
float CommonPara::koas() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.KOAs)
  return koas_;
}
void CommonPara::set_koas(float value) {
  
  koas_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.KOAs)
}

// float KOBs = 26;
void CommonPara::clear_kobs() {
  kobs_ = 0;
}
float CommonPara::kobs() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.CommonPara.KOBs)
  return kobs_;
}
void CommonPara::set_kobs(float value) {
  
  kobs_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.CommonPara.KOBs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TRIPMAP::kIKFieldNumber;
const int TRIPMAP::kTripABCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TRIPMAP::TRIPMAP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.TRIPMAP)
}
TRIPMAP::TRIPMAP(const TRIPMAP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ik_, &from.ik_,
    reinterpret_cast<char*>(&tripabc_) -
    reinterpret_cast<char*>(&ik_) + sizeof(tripabc_));
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.TRIPMAP)
}

void TRIPMAP::SharedCtor() {
  ::memset(&ik_, 0, reinterpret_cast<char*>(&tripabc_) -
    reinterpret_cast<char*>(&ik_) + sizeof(tripabc_));
  _cached_size_ = 0;
}

TRIPMAP::~TRIPMAP() {
  // @@protoc_insertion_point(destructor:SearchZBorder.TRIPMAP)
  SharedDtor();
}

void TRIPMAP::SharedDtor() {
}

void TRIPMAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRIPMAP::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[6].descriptor;
}

const TRIPMAP& TRIPMAP::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

TRIPMAP* TRIPMAP::New(::google::protobuf::Arena* arena) const {
  TRIPMAP* n = new TRIPMAP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TRIPMAP::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.TRIPMAP)
  ::memset(&ik_, 0, reinterpret_cast<char*>(&tripabc_) -
    reinterpret_cast<char*>(&ik_) + sizeof(tripabc_));
}

bool TRIPMAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.TRIPMAP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 IK = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ik_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TripABC = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tripabc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.TRIPMAP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.TRIPMAP)
  return false;
#undef DO_
}

void TRIPMAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.TRIPMAP)
  // uint32 IK = 1;
  if (this->ik() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ik(), output);
  }

  // uint32 TripABC = 2;
  if (this->tripabc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tripabc(), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.TRIPMAP)
}

::google::protobuf::uint8* TRIPMAP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.TRIPMAP)
  // uint32 IK = 1;
  if (this->ik() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ik(), target);
  }

  // uint32 TripABC = 2;
  if (this->tripabc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tripabc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.TRIPMAP)
  return target;
}

size_t TRIPMAP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.TRIPMAP)
  size_t total_size = 0;

  // uint32 IK = 1;
  if (this->ik() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ik());
  }

  // uint32 TripABC = 2;
  if (this->tripabc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tripabc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRIPMAP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.TRIPMAP)
  GOOGLE_DCHECK_NE(&from, this);
  const TRIPMAP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TRIPMAP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.TRIPMAP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.TRIPMAP)
    MergeFrom(*source);
  }
}

void TRIPMAP::MergeFrom(const TRIPMAP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.TRIPMAP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ik() != 0) {
    set_ik(from.ik());
  }
  if (from.tripabc() != 0) {
    set_tripabc(from.tripabc());
  }
}

void TRIPMAP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.TRIPMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRIPMAP::CopyFrom(const TRIPMAP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.TRIPMAP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRIPMAP::IsInitialized() const {
  return true;
}

void TRIPMAP::Swap(TRIPMAP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TRIPMAP::InternalSwap(TRIPMAP* other) {
  std::swap(ik_, other->ik_);
  std::swap(tripabc_, other->tripabc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TRIPMAP::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TRIPMAP

// uint32 IK = 1;
void TRIPMAP::clear_ik() {
  ik_ = 0u;
}
::google::protobuf::uint32 TRIPMAP::ik() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TRIPMAP.IK)
  return ik_;
}
void TRIPMAP::set_ik(::google::protobuf::uint32 value) {
  
  ik_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TRIPMAP.IK)
}

// uint32 TripABC = 2;
void TRIPMAP::clear_tripabc() {
  tripabc_ = 0u;
}
::google::protobuf::uint32 TRIPMAP::tripabc() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.TRIPMAP.TripABC)
  return tripabc_;
}
void TRIPMAP::set_tripabc(::google::protobuf::uint32 value) {
  
  tripabc_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.TRIPMAP.TripABC)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwitchPara::kITripBufFieldNumber;
const int SwitchPara::kIKOutputFieldNumber;
const int SwitchPara::kIOutModeFieldNumber;
const int SwitchPara::kFTurnTimeFieldNumber;
const int SwitchPara::kFHoldTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwitchPara::SwitchPara()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SearchZBorder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SearchZBorder.SwitchPara)
}
SwitchPara::SwitchPara(const SwitchPara& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      itripbuf_(from.itripbuf_),
      ikoutput_(from.ikoutput_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ioutmode_, &from.ioutmode_,
    reinterpret_cast<char*>(&fholdtime_) -
    reinterpret_cast<char*>(&ioutmode_) + sizeof(fholdtime_));
  // @@protoc_insertion_point(copy_constructor:SearchZBorder.SwitchPara)
}

void SwitchPara::SharedCtor() {
  ::memset(&ioutmode_, 0, reinterpret_cast<char*>(&fholdtime_) -
    reinterpret_cast<char*>(&ioutmode_) + sizeof(fholdtime_));
  _cached_size_ = 0;
}

SwitchPara::~SwitchPara() {
  // @@protoc_insertion_point(destructor:SearchZBorder.SwitchPara)
  SharedDtor();
}

void SwitchPara::SharedDtor() {
}

void SwitchPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchPara::descriptor() {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[7].descriptor;
}

const SwitchPara& SwitchPara::default_instance() {
  protobuf_SearchZBorder_2eproto::InitDefaults();
  return *internal_default_instance();
}

SwitchPara* SwitchPara::New(::google::protobuf::Arena* arena) const {
  SwitchPara* n = new SwitchPara;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SwitchPara::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchZBorder.SwitchPara)
  itripbuf_.Clear();
  ikoutput_.Clear();
  ::memset(&ioutmode_, 0, reinterpret_cast<char*>(&fholdtime_) -
    reinterpret_cast<char*>(&ioutmode_) + sizeof(fholdtime_));
}

bool SwitchPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SearchZBorder.SwitchPara)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SearchZBorder.TRIPMAP iTripBuf = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_itripbuf()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated uint32 iKOutput = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ikoutput())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_ikoutput())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 iOutMode = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ioutmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fTurnTime = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fturntime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fHoldTime = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fholdtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SearchZBorder.SwitchPara)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SearchZBorder.SwitchPara)
  return false;
#undef DO_
}

void SwitchPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SearchZBorder.SwitchPara)
  // repeated .SearchZBorder.TRIPMAP iTripBuf = 1;
  for (unsigned int i = 0, n = this->itripbuf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itripbuf(i), output);
  }

  // repeated uint32 iKOutput = 2;
  if (this->ikoutput_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ikoutput_cached_byte_size_);
  }
  for (int i = 0; i < this->ikoutput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ikoutput(i), output);
  }

  // uint32 iOutMode = 3;
  if (this->ioutmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ioutmode(), output);
  }

  // float fTurnTime = 4;
  if (this->fturntime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fturntime(), output);
  }

  // float fHoldTime = 5;
  if (this->fholdtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fholdtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:SearchZBorder.SwitchPara)
}

::google::protobuf::uint8* SwitchPara::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SearchZBorder.SwitchPara)
  // repeated .SearchZBorder.TRIPMAP iTripBuf = 1;
  for (unsigned int i = 0, n = this->itripbuf_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->itripbuf(i), false, target);
  }

  // repeated uint32 iKOutput = 2;
  if (this->ikoutput_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ikoutput_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ikoutput_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ikoutput(i), target);
  }

  // uint32 iOutMode = 3;
  if (this->ioutmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ioutmode(), target);
  }

  // float fTurnTime = 4;
  if (this->fturntime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fturntime(), target);
  }

  // float fHoldTime = 5;
  if (this->fholdtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fholdtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SearchZBorder.SwitchPara)
  return target;
}

size_t SwitchPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchZBorder.SwitchPara)
  size_t total_size = 0;

  // repeated .SearchZBorder.TRIPMAP iTripBuf = 1;
  {
    unsigned int count = this->itripbuf_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itripbuf(i));
    }
  }

  // repeated uint32 iKOutput = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ikoutput_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ikoutput_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 iOutMode = 3;
  if (this->ioutmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ioutmode());
  }

  // float fTurnTime = 4;
  if (this->fturntime() != 0) {
    total_size += 1 + 4;
  }

  // float fHoldTime = 5;
  if (this->fholdtime() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchPara::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SearchZBorder.SwitchPara)
  GOOGLE_DCHECK_NE(&from, this);
  const SwitchPara* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SwitchPara>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SearchZBorder.SwitchPara)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SearchZBorder.SwitchPara)
    MergeFrom(*source);
  }
}

void SwitchPara::MergeFrom(const SwitchPara& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SearchZBorder.SwitchPara)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itripbuf_.MergeFrom(from.itripbuf_);
  ikoutput_.MergeFrom(from.ikoutput_);
  if (from.ioutmode() != 0) {
    set_ioutmode(from.ioutmode());
  }
  if (from.fturntime() != 0) {
    set_fturntime(from.fturntime());
  }
  if (from.fholdtime() != 0) {
    set_fholdtime(from.fholdtime());
  }
}

void SwitchPara::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SearchZBorder.SwitchPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchPara::CopyFrom(const SwitchPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchZBorder.SwitchPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPara::IsInitialized() const {
  return true;
}

void SwitchPara::Swap(SwitchPara* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwitchPara::InternalSwap(SwitchPara* other) {
  itripbuf_.UnsafeArenaSwap(&other->itripbuf_);
  ikoutput_.UnsafeArenaSwap(&other->ikoutput_);
  std::swap(ioutmode_, other->ioutmode_);
  std::swap(fturntime_, other->fturntime_);
  std::swap(fholdtime_, other->fholdtime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SwitchPara::GetMetadata() const {
  protobuf_SearchZBorder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SearchZBorder_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SwitchPara

// repeated .SearchZBorder.TRIPMAP iTripBuf = 1;
int SwitchPara::itripbuf_size() const {
  return itripbuf_.size();
}
void SwitchPara::clear_itripbuf() {
  itripbuf_.Clear();
}
const ::SearchZBorder::TRIPMAP& SwitchPara::itripbuf(int index) const {
  // @@protoc_insertion_point(field_get:SearchZBorder.SwitchPara.iTripBuf)
  return itripbuf_.Get(index);
}
::SearchZBorder::TRIPMAP* SwitchPara::mutable_itripbuf(int index) {
  // @@protoc_insertion_point(field_mutable:SearchZBorder.SwitchPara.iTripBuf)
  return itripbuf_.Mutable(index);
}
::SearchZBorder::TRIPMAP* SwitchPara::add_itripbuf() {
  // @@protoc_insertion_point(field_add:SearchZBorder.SwitchPara.iTripBuf)
  return itripbuf_.Add();
}
::google::protobuf::RepeatedPtrField< ::SearchZBorder::TRIPMAP >*
SwitchPara::mutable_itripbuf() {
  // @@protoc_insertion_point(field_mutable_list:SearchZBorder.SwitchPara.iTripBuf)
  return &itripbuf_;
}
const ::google::protobuf::RepeatedPtrField< ::SearchZBorder::TRIPMAP >&
SwitchPara::itripbuf() const {
  // @@protoc_insertion_point(field_list:SearchZBorder.SwitchPara.iTripBuf)
  return itripbuf_;
}

// repeated uint32 iKOutput = 2;
int SwitchPara::ikoutput_size() const {
  return ikoutput_.size();
}
void SwitchPara::clear_ikoutput() {
  ikoutput_.Clear();
}
::google::protobuf::uint32 SwitchPara::ikoutput(int index) const {
  // @@protoc_insertion_point(field_get:SearchZBorder.SwitchPara.iKOutput)
  return ikoutput_.Get(index);
}
void SwitchPara::set_ikoutput(int index, ::google::protobuf::uint32 value) {
  ikoutput_.Set(index, value);
  // @@protoc_insertion_point(field_set:SearchZBorder.SwitchPara.iKOutput)
}
void SwitchPara::add_ikoutput(::google::protobuf::uint32 value) {
  ikoutput_.Add(value);
  // @@protoc_insertion_point(field_add:SearchZBorder.SwitchPara.iKOutput)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SwitchPara::ikoutput() const {
  // @@protoc_insertion_point(field_list:SearchZBorder.SwitchPara.iKOutput)
  return ikoutput_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SwitchPara::mutable_ikoutput() {
  // @@protoc_insertion_point(field_mutable_list:SearchZBorder.SwitchPara.iKOutput)
  return &ikoutput_;
}

// uint32 iOutMode = 3;
void SwitchPara::clear_ioutmode() {
  ioutmode_ = 0u;
}
::google::protobuf::uint32 SwitchPara::ioutmode() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.SwitchPara.iOutMode)
  return ioutmode_;
}
void SwitchPara::set_ioutmode(::google::protobuf::uint32 value) {
  
  ioutmode_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.SwitchPara.iOutMode)
}

// float fTurnTime = 4;
void SwitchPara::clear_fturntime() {
  fturntime_ = 0;
}
float SwitchPara::fturntime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.SwitchPara.fTurnTime)
  return fturntime_;
}
void SwitchPara::set_fturntime(float value) {
  
  fturntime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.SwitchPara.fTurnTime)
}

// float fHoldTime = 5;
void SwitchPara::clear_fholdtime() {
  fholdtime_ = 0;
}
float SwitchPara::fholdtime() const {
  // @@protoc_insertion_point(field_get:SearchZBorder.SwitchPara.fHoldTime)
  return fholdtime_;
}
void SwitchPara::set_fholdtime(float value) {
  
  fholdtime_ = value;
  // @@protoc_insertion_point(field_set:SearchZBorder.SwitchPara.fHoldTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SearchZBorder

// @@protoc_insertion_point(global_scope)
