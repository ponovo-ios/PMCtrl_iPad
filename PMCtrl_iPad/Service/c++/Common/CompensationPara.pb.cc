// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CompensationPara.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CompensationPara.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Compensation {
class CompensationItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompensationItem> {
} _CompensationItem_default_instance_;
class ChanelCompensationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChanelCompensation> {
} _ChanelCompensation_default_instance_;
class moduleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<module> {
} _module_default_instance_;
class modulesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<modules> {
} _modules_default_instance_;

namespace protobuf_CompensationPara_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItem, fampcompensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompensationItem, fphcompensation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, fzeroshift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, oharms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, ftempxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, fdczeroshft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChanelCompensation, fmaxcurrentratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, chanelitem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, nmodule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, frexs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, faxudc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(module, faxuzeroshift_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, modulechanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, nudctest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(modules, nidctest_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CompensationItem)},
  { 6, -1, sizeof(ChanelCompensation)},
  { 15, -1, sizeof(module)},
  { 25, -1, sizeof(modules)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompensationItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChanelCompensation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_module_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_modules_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CompensationPara.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _CompensationItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ChanelCompensation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _module_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _modules_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CompensationItem_default_instance_.DefaultConstruct();
  _ChanelCompensation_default_instance_.DefaultConstruct();
  _module_default_instance_.DefaultConstruct();
  _modules_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026CompensationPara.proto\022\014Compensation\"E"
      "\n\020CompensationItem\022\030\n\020fampcompensation\030\001"
      " \001(\002\022\027\n\017fphcompensation\030\002 \001(\002\"\230\001\n\022Chanel"
      "Compensation\022\022\n\nfzeroshift\030\001 \001(\002\022.\n\006ohar"
      "ms\030\002 \003(\0132\036.Compensation.CompensationItem"
      "\022\017\n\007fTempXs\030\003 \003(\002\022\023\n\013fdczeroshft\030\004 \001(\002\022\030"
      "\n\020fMaxCurrentRatio\030\005 \001(\002\"\227\001\n\006module\0224\n\nc"
      "hanelItem\030\001 \003(\0132 .Compensation.ChanelCom"
      "pensation\022\017\n\007nmodule\030\002 \001(\r\022\020\n\010filename\030\003"
      " \001(\t\022\r\n\005frexs\030\004 \001(\002\022\016\n\006faxudc\030\005 \001(\002\022\025\n\rf"
      "axuzeroshift\030\006 \001(\002\"Y\n\007modules\022*\n\014moduleC"
      "hanel\030\001 \003(\0132\024.Compensation.module\022\020\n\010nUD"
      "Ctest\030\002 \001(\r\022\020\n\010nIDCtest\030\003 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CompensationPara.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CompensationPara_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompensationItem::kFampcompensationFieldNumber;
const int CompensationItem::kFphcompensationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompensationItem::CompensationItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.CompensationItem)
}
CompensationItem::CompensationItem(const CompensationItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fampcompensation_, &from.fampcompensation_,
    reinterpret_cast<char*>(&fphcompensation_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fphcompensation_));
  // @@protoc_insertion_point(copy_constructor:Compensation.CompensationItem)
}

void CompensationItem::SharedCtor() {
  ::memset(&fampcompensation_, 0, reinterpret_cast<char*>(&fphcompensation_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fphcompensation_));
  _cached_size_ = 0;
}

CompensationItem::~CompensationItem() {
  // @@protoc_insertion_point(destructor:Compensation.CompensationItem)
  SharedDtor();
}

void CompensationItem::SharedDtor() {
}

void CompensationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompensationItem::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[0].descriptor;
}

const CompensationItem& CompensationItem::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompensationItem* CompensationItem::New(::google::protobuf::Arena* arena) const {
  CompensationItem* n = new CompensationItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompensationItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.CompensationItem)
  ::memset(&fampcompensation_, 0, reinterpret_cast<char*>(&fphcompensation_) -
    reinterpret_cast<char*>(&fampcompensation_) + sizeof(fphcompensation_));
}

bool CompensationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.CompensationItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fampcompensation = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fampcompensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fphcompensation = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fphcompensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.CompensationItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.CompensationItem)
  return false;
#undef DO_
}

void CompensationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.CompensationItem)
  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fampcompensation(), output);
  }

  // float fphcompensation = 2;
  if (this->fphcompensation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fphcompensation(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.CompensationItem)
}

::google::protobuf::uint8* CompensationItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.CompensationItem)
  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fampcompensation(), target);
  }

  // float fphcompensation = 2;
  if (this->fphcompensation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fphcompensation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.CompensationItem)
  return target;
}

size_t CompensationItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.CompensationItem)
  size_t total_size = 0;

  // float fampcompensation = 1;
  if (this->fampcompensation() != 0) {
    total_size += 1 + 4;
  }

  // float fphcompensation = 2;
  if (this->fphcompensation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompensationItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.CompensationItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CompensationItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompensationItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.CompensationItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.CompensationItem)
    MergeFrom(*source);
  }
}

void CompensationItem::MergeFrom(const CompensationItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.CompensationItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.fampcompensation() != 0) {
    set_fampcompensation(from.fampcompensation());
  }
  if (from.fphcompensation() != 0) {
    set_fphcompensation(from.fphcompensation());
  }
}

void CompensationItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.CompensationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompensationItem::CopyFrom(const CompensationItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.CompensationItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompensationItem::IsInitialized() const {
  return true;
}

void CompensationItem::Swap(CompensationItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompensationItem::InternalSwap(CompensationItem* other) {
  std::swap(fampcompensation_, other->fampcompensation_);
  std::swap(fphcompensation_, other->fphcompensation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompensationItem::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompensationItem

// float fampcompensation = 1;
void CompensationItem::clear_fampcompensation() {
  fampcompensation_ = 0;
}
float CompensationItem::fampcompensation() const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItem.fampcompensation)
  return fampcompensation_;
}
void CompensationItem::set_fampcompensation(float value) {
  
  fampcompensation_ = value;
  // @@protoc_insertion_point(field_set:Compensation.CompensationItem.fampcompensation)
}

// float fphcompensation = 2;
void CompensationItem::clear_fphcompensation() {
  fphcompensation_ = 0;
}
float CompensationItem::fphcompensation() const {
  // @@protoc_insertion_point(field_get:Compensation.CompensationItem.fphcompensation)
  return fphcompensation_;
}
void CompensationItem::set_fphcompensation(float value) {
  
  fphcompensation_ = value;
  // @@protoc_insertion_point(field_set:Compensation.CompensationItem.fphcompensation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChanelCompensation::kFzeroshiftFieldNumber;
const int ChanelCompensation::kOharmsFieldNumber;
const int ChanelCompensation::kFTempXsFieldNumber;
const int ChanelCompensation::kFdczeroshftFieldNumber;
const int ChanelCompensation::kFMaxCurrentRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChanelCompensation::ChanelCompensation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.ChanelCompensation)
}
ChanelCompensation::ChanelCompensation(const ChanelCompensation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      oharms_(from.oharms_),
      ftempxs_(from.ftempxs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fzeroshift_, &from.fzeroshift_,
    reinterpret_cast<char*>(&fmaxcurrentratio_) -
    reinterpret_cast<char*>(&fzeroshift_) + sizeof(fmaxcurrentratio_));
  // @@protoc_insertion_point(copy_constructor:Compensation.ChanelCompensation)
}

void ChanelCompensation::SharedCtor() {
  ::memset(&fzeroshift_, 0, reinterpret_cast<char*>(&fmaxcurrentratio_) -
    reinterpret_cast<char*>(&fzeroshift_) + sizeof(fmaxcurrentratio_));
  _cached_size_ = 0;
}

ChanelCompensation::~ChanelCompensation() {
  // @@protoc_insertion_point(destructor:Compensation.ChanelCompensation)
  SharedDtor();
}

void ChanelCompensation::SharedDtor() {
}

void ChanelCompensation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChanelCompensation::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[1].descriptor;
}

const ChanelCompensation& ChanelCompensation::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChanelCompensation* ChanelCompensation::New(::google::protobuf::Arena* arena) const {
  ChanelCompensation* n = new ChanelCompensation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChanelCompensation::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.ChanelCompensation)
  oharms_.Clear();
  ftempxs_.Clear();
  ::memset(&fzeroshift_, 0, reinterpret_cast<char*>(&fmaxcurrentratio_) -
    reinterpret_cast<char*>(&fzeroshift_) + sizeof(fmaxcurrentratio_));
}

bool ChanelCompensation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.ChanelCompensation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fzeroshift = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fzeroshift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Compensation.CompensationItem oharms = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_oharms()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated float fTempXs = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ftempxs())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_ftempxs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fdczeroshft = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdczeroshft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMaxCurrentRatio = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmaxcurrentratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.ChanelCompensation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.ChanelCompensation)
  return false;
#undef DO_
}

void ChanelCompensation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.ChanelCompensation)
  // float fzeroshift = 1;
  if (this->fzeroshift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fzeroshift(), output);
  }

  // repeated .Compensation.CompensationItem oharms = 2;
  for (unsigned int i = 0, n = this->oharms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oharms(i), output);
  }

  // repeated float fTempXs = 3;
  if (this->ftempxs_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ftempxs_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->ftempxs().data(), this->ftempxs_size(), output);
  }

  // float fdczeroshft = 4;
  if (this->fdczeroshft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fdczeroshft(), output);
  }

  // float fMaxCurrentRatio = 5;
  if (this->fmaxcurrentratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fmaxcurrentratio(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.ChanelCompensation)
}

::google::protobuf::uint8* ChanelCompensation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.ChanelCompensation)
  // float fzeroshift = 1;
  if (this->fzeroshift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fzeroshift(), target);
  }

  // repeated .Compensation.CompensationItem oharms = 2;
  for (unsigned int i = 0, n = this->oharms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->oharms(i), false, target);
  }

  // repeated float fTempXs = 3;
  if (this->ftempxs_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ftempxs_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ftempxs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ftempxs(i), target);
  }

  // float fdczeroshft = 4;
  if (this->fdczeroshft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fdczeroshft(), target);
  }

  // float fMaxCurrentRatio = 5;
  if (this->fmaxcurrentratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fmaxcurrentratio(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.ChanelCompensation)
  return target;
}

size_t ChanelCompensation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.ChanelCompensation)
  size_t total_size = 0;

  // repeated .Compensation.CompensationItem oharms = 2;
  {
    unsigned int count = this->oharms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oharms(i));
    }
  }

  // repeated float fTempXs = 3;
  {
    unsigned int count = this->ftempxs_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ftempxs_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float fzeroshift = 1;
  if (this->fzeroshift() != 0) {
    total_size += 1 + 4;
  }

  // float fdczeroshft = 4;
  if (this->fdczeroshft() != 0) {
    total_size += 1 + 4;
  }

  // float fMaxCurrentRatio = 5;
  if (this->fmaxcurrentratio() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChanelCompensation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.ChanelCompensation)
  GOOGLE_DCHECK_NE(&from, this);
  const ChanelCompensation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChanelCompensation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.ChanelCompensation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.ChanelCompensation)
    MergeFrom(*source);
  }
}

void ChanelCompensation::MergeFrom(const ChanelCompensation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.ChanelCompensation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oharms_.MergeFrom(from.oharms_);
  ftempxs_.MergeFrom(from.ftempxs_);
  if (from.fzeroshift() != 0) {
    set_fzeroshift(from.fzeroshift());
  }
  if (from.fdczeroshft() != 0) {
    set_fdczeroshft(from.fdczeroshft());
  }
  if (from.fmaxcurrentratio() != 0) {
    set_fmaxcurrentratio(from.fmaxcurrentratio());
  }
}

void ChanelCompensation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.ChanelCompensation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanelCompensation::CopyFrom(const ChanelCompensation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.ChanelCompensation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanelCompensation::IsInitialized() const {
  return true;
}

void ChanelCompensation::Swap(ChanelCompensation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChanelCompensation::InternalSwap(ChanelCompensation* other) {
  oharms_.UnsafeArenaSwap(&other->oharms_);
  ftempxs_.UnsafeArenaSwap(&other->ftempxs_);
  std::swap(fzeroshift_, other->fzeroshift_);
  std::swap(fdczeroshft_, other->fdczeroshft_);
  std::swap(fmaxcurrentratio_, other->fmaxcurrentratio_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChanelCompensation::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChanelCompensation

// float fzeroshift = 1;
void ChanelCompensation::clear_fzeroshift() {
  fzeroshift_ = 0;
}
float ChanelCompensation::fzeroshift() const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fzeroshift)
  return fzeroshift_;
}
void ChanelCompensation::set_fzeroshift(float value) {
  
  fzeroshift_ = value;
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fzeroshift)
}

// repeated .Compensation.CompensationItem oharms = 2;
int ChanelCompensation::oharms_size() const {
  return oharms_.size();
}
void ChanelCompensation::clear_oharms() {
  oharms_.Clear();
}
const ::Compensation::CompensationItem& ChanelCompensation::oharms(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.oharms)
  return oharms_.Get(index);
}
::Compensation::CompensationItem* ChanelCompensation::mutable_oharms(int index) {
  // @@protoc_insertion_point(field_mutable:Compensation.ChanelCompensation.oharms)
  return oharms_.Mutable(index);
}
::Compensation::CompensationItem* ChanelCompensation::add_oharms() {
  // @@protoc_insertion_point(field_add:Compensation.ChanelCompensation.oharms)
  return oharms_.Add();
}
::google::protobuf::RepeatedPtrField< ::Compensation::CompensationItem >*
ChanelCompensation::mutable_oharms() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.ChanelCompensation.oharms)
  return &oharms_;
}
const ::google::protobuf::RepeatedPtrField< ::Compensation::CompensationItem >&
ChanelCompensation::oharms() const {
  // @@protoc_insertion_point(field_list:Compensation.ChanelCompensation.oharms)
  return oharms_;
}

// repeated float fTempXs = 3;
int ChanelCompensation::ftempxs_size() const {
  return ftempxs_.size();
}
void ChanelCompensation::clear_ftempxs() {
  ftempxs_.Clear();
}
float ChanelCompensation::ftempxs(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fTempXs)
  return ftempxs_.Get(index);
}
void ChanelCompensation::set_ftempxs(int index, float value) {
  ftempxs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fTempXs)
}
void ChanelCompensation::add_ftempxs(float value) {
  ftempxs_.Add(value);
  // @@protoc_insertion_point(field_add:Compensation.ChanelCompensation.fTempXs)
}
const ::google::protobuf::RepeatedField< float >&
ChanelCompensation::ftempxs() const {
  // @@protoc_insertion_point(field_list:Compensation.ChanelCompensation.fTempXs)
  return ftempxs_;
}
::google::protobuf::RepeatedField< float >*
ChanelCompensation::mutable_ftempxs() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.ChanelCompensation.fTempXs)
  return &ftempxs_;
}

// float fdczeroshft = 4;
void ChanelCompensation::clear_fdczeroshft() {
  fdczeroshft_ = 0;
}
float ChanelCompensation::fdczeroshft() const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fdczeroshft)
  return fdczeroshft_;
}
void ChanelCompensation::set_fdczeroshft(float value) {
  
  fdczeroshft_ = value;
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fdczeroshft)
}

// float fMaxCurrentRatio = 5;
void ChanelCompensation::clear_fmaxcurrentratio() {
  fmaxcurrentratio_ = 0;
}
float ChanelCompensation::fmaxcurrentratio() const {
  // @@protoc_insertion_point(field_get:Compensation.ChanelCompensation.fMaxCurrentRatio)
  return fmaxcurrentratio_;
}
void ChanelCompensation::set_fmaxcurrentratio(float value) {
  
  fmaxcurrentratio_ = value;
  // @@protoc_insertion_point(field_set:Compensation.ChanelCompensation.fMaxCurrentRatio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int module::kChanelItemFieldNumber;
const int module::kNmoduleFieldNumber;
const int module::kFilenameFieldNumber;
const int module::kFrexsFieldNumber;
const int module::kFaxudcFieldNumber;
const int module::kFaxuzeroshiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

module::module()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.module)
}
module::module(const module& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chanelitem_(from.chanelitem_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&nmodule_, &from.nmodule_,
    reinterpret_cast<char*>(&faxuzeroshift_) -
    reinterpret_cast<char*>(&nmodule_) + sizeof(faxuzeroshift_));
  // @@protoc_insertion_point(copy_constructor:Compensation.module)
}

void module::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nmodule_, 0, reinterpret_cast<char*>(&faxuzeroshift_) -
    reinterpret_cast<char*>(&nmodule_) + sizeof(faxuzeroshift_));
  _cached_size_ = 0;
}

module::~module() {
  // @@protoc_insertion_point(destructor:Compensation.module)
  SharedDtor();
}

void module::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* module::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[2].descriptor;
}

const module& module::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

module* module::New(::google::protobuf::Arena* arena) const {
  module* n = new module;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void module::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.module)
  chanelitem_.Clear();
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nmodule_, 0, reinterpret_cast<char*>(&faxuzeroshift_) -
    reinterpret_cast<char*>(&nmodule_) + sizeof(faxuzeroshift_));
}

bool module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Compensation.ChanelCompensation chanelItem = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chanelitem()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 nmodule = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmodule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Compensation.module.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frexs = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frexs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float faxudc = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faxudc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float faxuzeroshift = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &faxuzeroshift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.module)
  return false;
#undef DO_
}

void module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.module)
  // repeated .Compensation.ChanelCompensation chanelItem = 1;
  for (unsigned int i = 0, n = this->chanelitem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chanelitem(i), output);
  }

  // uint32 nmodule = 2;
  if (this->nmodule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nmodule(), output);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Compensation.module.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // float frexs = 4;
  if (this->frexs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->frexs(), output);
  }

  // float faxudc = 5;
  if (this->faxudc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->faxudc(), output);
  }

  // float faxuzeroshift = 6;
  if (this->faxuzeroshift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->faxuzeroshift(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.module)
}

::google::protobuf::uint8* module::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.module)
  // repeated .Compensation.ChanelCompensation chanelItem = 1;
  for (unsigned int i = 0, n = this->chanelitem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->chanelitem(i), false, target);
  }

  // uint32 nmodule = 2;
  if (this->nmodule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nmodule(), target);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Compensation.module.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // float frexs = 4;
  if (this->frexs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->frexs(), target);
  }

  // float faxudc = 5;
  if (this->faxudc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->faxudc(), target);
  }

  // float faxuzeroshift = 6;
  if (this->faxuzeroshift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->faxuzeroshift(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.module)
  return target;
}

size_t module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.module)
  size_t total_size = 0;

  // repeated .Compensation.ChanelCompensation chanelItem = 1;
  {
    unsigned int count = this->chanelitem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chanelitem(i));
    }
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // uint32 nmodule = 2;
  if (this->nmodule() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmodule());
  }

  // float frexs = 4;
  if (this->frexs() != 0) {
    total_size += 1 + 4;
  }

  // float faxudc = 5;
  if (this->faxudc() != 0) {
    total_size += 1 + 4;
  }

  // float faxuzeroshift = 6;
  if (this->faxuzeroshift() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void module::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.module)
  GOOGLE_DCHECK_NE(&from, this);
  const module* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const module>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.module)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.module)
    MergeFrom(*source);
  }
}

void module::MergeFrom(const module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chanelitem_.MergeFrom(from.chanelitem_);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.nmodule() != 0) {
    set_nmodule(from.nmodule());
  }
  if (from.frexs() != 0) {
    set_frexs(from.frexs());
  }
  if (from.faxudc() != 0) {
    set_faxudc(from.faxudc());
  }
  if (from.faxuzeroshift() != 0) {
    set_faxuzeroshift(from.faxuzeroshift());
  }
}

void module::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void module::CopyFrom(const module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool module::IsInitialized() const {
  return true;
}

void module::Swap(module* other) {
  if (other == this) return;
  InternalSwap(other);
}
void module::InternalSwap(module* other) {
  chanelitem_.UnsafeArenaSwap(&other->chanelitem_);
  filename_.Swap(&other->filename_);
  std::swap(nmodule_, other->nmodule_);
  std::swap(frexs_, other->frexs_);
  std::swap(faxudc_, other->faxudc_);
  std::swap(faxuzeroshift_, other->faxuzeroshift_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata module::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// module

// repeated .Compensation.ChanelCompensation chanelItem = 1;
int module::chanelitem_size() const {
  return chanelitem_.size();
}
void module::clear_chanelitem() {
  chanelitem_.Clear();
}
const ::Compensation::ChanelCompensation& module::chanelitem(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.module.chanelItem)
  return chanelitem_.Get(index);
}
::Compensation::ChanelCompensation* module::mutable_chanelitem(int index) {
  // @@protoc_insertion_point(field_mutable:Compensation.module.chanelItem)
  return chanelitem_.Mutable(index);
}
::Compensation::ChanelCompensation* module::add_chanelitem() {
  // @@protoc_insertion_point(field_add:Compensation.module.chanelItem)
  return chanelitem_.Add();
}
::google::protobuf::RepeatedPtrField< ::Compensation::ChanelCompensation >*
module::mutable_chanelitem() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.module.chanelItem)
  return &chanelitem_;
}
const ::google::protobuf::RepeatedPtrField< ::Compensation::ChanelCompensation >&
module::chanelitem() const {
  // @@protoc_insertion_point(field_list:Compensation.module.chanelItem)
  return chanelitem_;
}

// uint32 nmodule = 2;
void module::clear_nmodule() {
  nmodule_ = 0u;
}
::google::protobuf::uint32 module::nmodule() const {
  // @@protoc_insertion_point(field_get:Compensation.module.nmodule)
  return nmodule_;
}
void module::set_nmodule(::google::protobuf::uint32 value) {
  
  nmodule_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.nmodule)
}

// string filename = 3;
void module::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& module::filename() const {
  // @@protoc_insertion_point(field_get:Compensation.module.filename)
  return filename_.GetNoArena();
}
void module::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Compensation.module.filename)
}
#if LANG_CXX11
void module::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Compensation.module.filename)
}
#endif
void module::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Compensation.module.filename)
}
void module::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Compensation.module.filename)
}
::std::string* module::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:Compensation.module.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* module::release_filename() {
  // @@protoc_insertion_point(field_release:Compensation.module.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void module::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Compensation.module.filename)
}

// float frexs = 4;
void module::clear_frexs() {
  frexs_ = 0;
}
float module::frexs() const {
  // @@protoc_insertion_point(field_get:Compensation.module.frexs)
  return frexs_;
}
void module::set_frexs(float value) {
  
  frexs_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.frexs)
}

// float faxudc = 5;
void module::clear_faxudc() {
  faxudc_ = 0;
}
float module::faxudc() const {
  // @@protoc_insertion_point(field_get:Compensation.module.faxudc)
  return faxudc_;
}
void module::set_faxudc(float value) {
  
  faxudc_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.faxudc)
}

// float faxuzeroshift = 6;
void module::clear_faxuzeroshift() {
  faxuzeroshift_ = 0;
}
float module::faxuzeroshift() const {
  // @@protoc_insertion_point(field_get:Compensation.module.faxuzeroshift)
  return faxuzeroshift_;
}
void module::set_faxuzeroshift(float value) {
  
  faxuzeroshift_ = value;
  // @@protoc_insertion_point(field_set:Compensation.module.faxuzeroshift)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int modules::kModuleChanelFieldNumber;
const int modules::kNUDCtestFieldNumber;
const int modules::kNIDCtestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

modules::modules()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CompensationPara_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Compensation.modules)
}
modules::modules(const modules& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      modulechanel_(from.modulechanel_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nudctest_, &from.nudctest_,
    reinterpret_cast<char*>(&nidctest_) -
    reinterpret_cast<char*>(&nudctest_) + sizeof(nidctest_));
  // @@protoc_insertion_point(copy_constructor:Compensation.modules)
}

void modules::SharedCtor() {
  ::memset(&nudctest_, 0, reinterpret_cast<char*>(&nidctest_) -
    reinterpret_cast<char*>(&nudctest_) + sizeof(nidctest_));
  _cached_size_ = 0;
}

modules::~modules() {
  // @@protoc_insertion_point(destructor:Compensation.modules)
  SharedDtor();
}

void modules::SharedDtor() {
}

void modules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* modules::descriptor() {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[3].descriptor;
}

const modules& modules::default_instance() {
  protobuf_CompensationPara_2eproto::InitDefaults();
  return *internal_default_instance();
}

modules* modules::New(::google::protobuf::Arena* arena) const {
  modules* n = new modules;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void modules::Clear() {
// @@protoc_insertion_point(message_clear_start:Compensation.modules)
  modulechanel_.Clear();
  ::memset(&nudctest_, 0, reinterpret_cast<char*>(&nidctest_) -
    reinterpret_cast<char*>(&nudctest_) + sizeof(nidctest_));
}

bool modules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Compensation.modules)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Compensation.module moduleChanel = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_modulechanel()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 nUDCtest = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nudctest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nIDCtest = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nidctest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Compensation.modules)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Compensation.modules)
  return false;
#undef DO_
}

void modules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Compensation.modules)
  // repeated .Compensation.module moduleChanel = 1;
  for (unsigned int i = 0, n = this->modulechanel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modulechanel(i), output);
  }

  // uint32 nUDCtest = 2;
  if (this->nudctest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nudctest(), output);
  }

  // uint32 nIDCtest = 3;
  if (this->nidctest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nidctest(), output);
  }

  // @@protoc_insertion_point(serialize_end:Compensation.modules)
}

::google::protobuf::uint8* modules::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Compensation.modules)
  // repeated .Compensation.module moduleChanel = 1;
  for (unsigned int i = 0, n = this->modulechanel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->modulechanel(i), false, target);
  }

  // uint32 nUDCtest = 2;
  if (this->nudctest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nudctest(), target);
  }

  // uint32 nIDCtest = 3;
  if (this->nidctest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nidctest(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Compensation.modules)
  return target;
}

size_t modules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compensation.modules)
  size_t total_size = 0;

  // repeated .Compensation.module moduleChanel = 1;
  {
    unsigned int count = this->modulechanel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modulechanel(i));
    }
  }

  // uint32 nUDCtest = 2;
  if (this->nudctest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nudctest());
  }

  // uint32 nIDCtest = 3;
  if (this->nidctest() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nidctest());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void modules::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Compensation.modules)
  GOOGLE_DCHECK_NE(&from, this);
  const modules* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const modules>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Compensation.modules)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Compensation.modules)
    MergeFrom(*source);
  }
}

void modules::MergeFrom(const modules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compensation.modules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modulechanel_.MergeFrom(from.modulechanel_);
  if (from.nudctest() != 0) {
    set_nudctest(from.nudctest());
  }
  if (from.nidctest() != 0) {
    set_nidctest(from.nidctest());
  }
}

void modules::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Compensation.modules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void modules::CopyFrom(const modules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compensation.modules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool modules::IsInitialized() const {
  return true;
}

void modules::Swap(modules* other) {
  if (other == this) return;
  InternalSwap(other);
}
void modules::InternalSwap(modules* other) {
  modulechanel_.UnsafeArenaSwap(&other->modulechanel_);
  std::swap(nudctest_, other->nudctest_);
  std::swap(nidctest_, other->nidctest_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata modules::GetMetadata() const {
  protobuf_CompensationPara_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CompensationPara_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// modules

// repeated .Compensation.module moduleChanel = 1;
int modules::modulechanel_size() const {
  return modulechanel_.size();
}
void modules::clear_modulechanel() {
  modulechanel_.Clear();
}
const ::Compensation::module& modules::modulechanel(int index) const {
  // @@protoc_insertion_point(field_get:Compensation.modules.moduleChanel)
  return modulechanel_.Get(index);
}
::Compensation::module* modules::mutable_modulechanel(int index) {
  // @@protoc_insertion_point(field_mutable:Compensation.modules.moduleChanel)
  return modulechanel_.Mutable(index);
}
::Compensation::module* modules::add_modulechanel() {
  // @@protoc_insertion_point(field_add:Compensation.modules.moduleChanel)
  return modulechanel_.Add();
}
::google::protobuf::RepeatedPtrField< ::Compensation::module >*
modules::mutable_modulechanel() {
  // @@protoc_insertion_point(field_mutable_list:Compensation.modules.moduleChanel)
  return &modulechanel_;
}
const ::google::protobuf::RepeatedPtrField< ::Compensation::module >&
modules::modulechanel() const {
  // @@protoc_insertion_point(field_list:Compensation.modules.moduleChanel)
  return modulechanel_;
}

// uint32 nUDCtest = 2;
void modules::clear_nudctest() {
  nudctest_ = 0u;
}
::google::protobuf::uint32 modules::nudctest() const {
  // @@protoc_insertion_point(field_get:Compensation.modules.nUDCtest)
  return nudctest_;
}
void modules::set_nudctest(::google::protobuf::uint32 value) {
  
  nudctest_ = value;
  // @@protoc_insertion_point(field_set:Compensation.modules.nUDCtest)
}

// uint32 nIDCtest = 3;
void modules::clear_nidctest() {
  nidctest_ = 0u;
}
::google::protobuf::uint32 modules::nidctest() const {
  // @@protoc_insertion_point(field_get:Compensation.modules.nIDCtest)
  return nidctest_;
}
void modules::set_nidctest(::google::protobuf::uint32 value) {
  
  nidctest_ = value;
  // @@protoc_insertion_point(field_set:Compensation.modules.nIDCtest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Compensation

// @@protoc_insertion_point(global_scope)
