// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hqyDeviceConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hqyDeviceConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hqyDeviceConfig {
class deviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<device> {
} _device_default_instance_;
class devicechaneldescDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<devicechaneldesc> {
} _devicechaneldesc_default_instance_;
class rangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<range> {
} _range_default_instance_;
class analogmapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<analogmap> {
} _analogmap_default_instance_;

namespace protobuf_hqyDeviceConfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device, ochaneldesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device, omapcurrent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device, omapvolt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device, ocompensationmngr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device, omapcurrentinnervolt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device, omapvoltinnervolt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, smvmaxgroupnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, goosepubmaxgroupnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, gooseinmaxgroupnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, analogvoltmaxchanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, analogcurrentmaxchanel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ffremax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, fanalogvoltmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, fanalogcurrentmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ishasudc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, fudcmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ishasidc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, fidcmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nbimaxnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nbomaxnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ishasdigitalout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ishasvoltanalogout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ishascuranalogout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ndigitalmodulenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ndigitalmoduleportnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nanalogvoltmodulecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nanalogvoltmodulebeginnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nanalogvoltmodulechanlecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nanalogcurrentmodulecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nanalogcurrentmodulebeginnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, nanalogcurrentmodulechanlecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devicechaneldesc, ndevicenumber_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(range, fmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(range, fmax_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analogmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(analogmap, ndevicechanel_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(device)},
  { 10, -1, sizeof(devicechaneldesc)},
  { 40, -1, sizeof(range)},
  { 46, -1, sizeof(analogmap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_devicechaneldesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_analogmap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hqyDeviceConfig.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _device_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _devicechaneldesc_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _range_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _analogmap_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Compensation::protobuf_CompensationPara_2eproto::InitDefaults();
  _device_default_instance_.DefaultConstruct();
  _devicechaneldesc_default_instance_.DefaultConstruct();
  _range_default_instance_.DefaultConstruct();
  _analogmap_default_instance_.DefaultConstruct();
  _device_default_instance_.get_mutable()->ochaneldesc_ = const_cast< ::hqyDeviceConfig::devicechaneldesc*>(
      ::hqyDeviceConfig::devicechaneldesc::internal_default_instance());
  _device_default_instance_.get_mutable()->omapcurrent_ = const_cast< ::hqyDeviceConfig::analogmap*>(
      ::hqyDeviceConfig::analogmap::internal_default_instance());
  _device_default_instance_.get_mutable()->omapvolt_ = const_cast< ::hqyDeviceConfig::analogmap*>(
      ::hqyDeviceConfig::analogmap::internal_default_instance());
  _device_default_instance_.get_mutable()->ocompensationmngr_ = const_cast< ::Compensation::modules*>(
      ::Compensation::modules::internal_default_instance());
  _device_default_instance_.get_mutable()->omapcurrentinnervolt_ = const_cast< ::hqyDeviceConfig::analogmap*>(
      ::hqyDeviceConfig::analogmap::internal_default_instance());
  _device_default_instance_.get_mutable()->omapvoltinnervolt_ = const_cast< ::hqyDeviceConfig::analogmap*>(
      ::hqyDeviceConfig::analogmap::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025hqyDeviceConfig.proto\022\017hqyDeviceConfig"
      "\032\026CompensationPara.proto\"\302\002\n\006device\0226\n\013o"
      "chaneldesc\030\001 \001(\0132!.hqyDeviceConfig.devic"
      "echaneldesc\022/\n\013omapcurrent\030\002 \001(\0132\032.hqyDe"
      "viceConfig.analogmap\022,\n\010omapvolt\030\003 \001(\0132\032"
      ".hqyDeviceConfig.analogmap\0220\n\021ocompensat"
      "ionmngr\030\004 \001(\0132\025.Compensation.modules\0228\n\024"
      "omapcurrentinnervolt\030\005 \001(\0132\032.hqyDeviceCo"
      "nfig.analogmap\0225\n\021omapvoltinnervolt\030\006 \001("
      "\0132\032.hqyDeviceConfig.analogmap\"\314\005\n\020device"
      "chaneldesc\022\026\n\016smvmaxgroupnum\030\001 \001(\r\022\033\n\023go"
      "osepubmaxgroupnum\030\002 \001(\r\022\032\n\022gooseinmaxgro"
      "upnum\030\003 \001(\r\022\033\n\023analogvoltmaxchanel\030\004 \001(\r"
      "\022\036\n\026analogcurrentmaxchanel\030\005 \001(\r\022\017\n\007ffre"
      "max\030\006 \001(\002\022\026\n\016fanalogVoltmax\030\007 \001(\002\022\031\n\021fan"
      "alogcurrentmax\030\010 \001(\002\022\020\n\010ishasudc\030\t \001(\010\022\017"
      "\n\007fudcmax\030\n \001(\002\022\020\n\010ishasidc\030\013 \001(\010\022\017\n\007fid"
      "cmax\030\014 \001(\002\022\021\n\tnbimaxnum\030\r \001(\r\022\021\n\tnbomaxn"
      "um\030\016 \001(\r\022\027\n\017ishasDigitalout\030\017 \001(\010\022\032\n\022ish"
      "asvoltanalogout\030\020 \001(\010\022\031\n\021ishascuranalogo"
      "ut\030\021 \001(\010\022\031\n\021nDigitalmodulenum\030\022 \001(\r\022\035\n\025n"
      "DigitalmodulePortNum\030\023 \001(\r\022\036\n\026nAnalogVol"
      "tModuleCount\030\024 \001(\r\022!\n\031nAnalogVoltModuleB"
      "eginNum\030\025 \001(\r\022$\n\034nAnalogVoltModuleChanle"
      "Count\030\026 \003(\r\022!\n\031nAnalogCurrentModuleCount"
      "\030\027 \001(\r\022$\n\034nAnalogCurrentModuleBeginNum\030\030"
      " \001(\r\022\'\n\037nAnalogCurrentModuleChanleCount\030"
      "\031 \003(\r\022\025\n\rnDeviceNumber\030\032 \001(\r\"#\n\005range\022\014\n"
      "\004fmin\030\001 \001(\002\022\014\n\004fmax\030\002 \001(\002\"\"\n\tanalogmap\022\025"
      "\n\rndevicechanel\030\001 \003(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hqyDeviceConfig.proto", &protobuf_RegisterTypes);
  ::Compensation::protobuf_CompensationPara_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_hqyDeviceConfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int device::kOchaneldescFieldNumber;
const int device::kOmapcurrentFieldNumber;
const int device::kOmapvoltFieldNumber;
const int device::kOcompensationmngrFieldNumber;
const int device::kOmapcurrentinnervoltFieldNumber;
const int device::kOmapvoltinnervoltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

device::device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hqyDeviceConfig.device)
}
device::device(const device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ochaneldesc()) {
    ochaneldesc_ = new ::hqyDeviceConfig::devicechaneldesc(*from.ochaneldesc_);
  } else {
    ochaneldesc_ = NULL;
  }
  if (from.has_omapcurrent()) {
    omapcurrent_ = new ::hqyDeviceConfig::analogmap(*from.omapcurrent_);
  } else {
    omapcurrent_ = NULL;
  }
  if (from.has_omapvolt()) {
    omapvolt_ = new ::hqyDeviceConfig::analogmap(*from.omapvolt_);
  } else {
    omapvolt_ = NULL;
  }
  if (from.has_ocompensationmngr()) {
    ocompensationmngr_ = new ::Compensation::modules(*from.ocompensationmngr_);
  } else {
    ocompensationmngr_ = NULL;
  }
  if (from.has_omapcurrentinnervolt()) {
    omapcurrentinnervolt_ = new ::hqyDeviceConfig::analogmap(*from.omapcurrentinnervolt_);
  } else {
    omapcurrentinnervolt_ = NULL;
  }
  if (from.has_omapvoltinnervolt()) {
    omapvoltinnervolt_ = new ::hqyDeviceConfig::analogmap(*from.omapvoltinnervolt_);
  } else {
    omapvoltinnervolt_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hqyDeviceConfig.device)
}

void device::SharedCtor() {
  ::memset(&ochaneldesc_, 0, reinterpret_cast<char*>(&omapvoltinnervolt_) -
    reinterpret_cast<char*>(&ochaneldesc_) + sizeof(omapvoltinnervolt_));
  _cached_size_ = 0;
}

device::~device() {
  // @@protoc_insertion_point(destructor:hqyDeviceConfig.device)
  SharedDtor();
}

void device::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ochaneldesc_;
  }
  if (this != internal_default_instance()) {
    delete omapcurrent_;
  }
  if (this != internal_default_instance()) {
    delete omapvolt_;
  }
  if (this != internal_default_instance()) {
    delete ocompensationmngr_;
  }
  if (this != internal_default_instance()) {
    delete omapcurrentinnervolt_;
  }
  if (this != internal_default_instance()) {
    delete omapvoltinnervolt_;
  }
}

void device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device::descriptor() {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[0].descriptor;
}

const device& device::default_instance() {
  protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

device* device::New(::google::protobuf::Arena* arena) const {
  device* n = new device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void device::Clear() {
// @@protoc_insertion_point(message_clear_start:hqyDeviceConfig.device)
  if (GetArenaNoVirtual() == NULL && ochaneldesc_ != NULL) {
    delete ochaneldesc_;
  }
  ochaneldesc_ = NULL;
  if (GetArenaNoVirtual() == NULL && omapcurrent_ != NULL) {
    delete omapcurrent_;
  }
  omapcurrent_ = NULL;
  if (GetArenaNoVirtual() == NULL && omapvolt_ != NULL) {
    delete omapvolt_;
  }
  omapvolt_ = NULL;
  if (GetArenaNoVirtual() == NULL && ocompensationmngr_ != NULL) {
    delete ocompensationmngr_;
  }
  ocompensationmngr_ = NULL;
  if (GetArenaNoVirtual() == NULL && omapcurrentinnervolt_ != NULL) {
    delete omapcurrentinnervolt_;
  }
  omapcurrentinnervolt_ = NULL;
  if (GetArenaNoVirtual() == NULL && omapvoltinnervolt_ != NULL) {
    delete omapvoltinnervolt_;
  }
  omapvoltinnervolt_ = NULL;
}

bool device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hqyDeviceConfig.device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .hqyDeviceConfig.devicechaneldesc ochaneldesc = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ochaneldesc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hqyDeviceConfig.analogmap omapcurrent = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_omapcurrent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hqyDeviceConfig.analogmap omapvolt = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_omapvolt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Compensation.modules ocompensationmngr = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ocompensationmngr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hqyDeviceConfig.analogmap omapcurrentinnervolt = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_omapcurrentinnervolt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .hqyDeviceConfig.analogmap omapvoltinnervolt = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_omapvoltinnervolt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hqyDeviceConfig.device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hqyDeviceConfig.device)
  return false;
#undef DO_
}

void device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hqyDeviceConfig.device)
  // .hqyDeviceConfig.devicechaneldesc ochaneldesc = 1;
  if (this->has_ochaneldesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ochaneldesc_, output);
  }

  // .hqyDeviceConfig.analogmap omapcurrent = 2;
  if (this->has_omapcurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->omapcurrent_, output);
  }

  // .hqyDeviceConfig.analogmap omapvolt = 3;
  if (this->has_omapvolt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->omapvolt_, output);
  }

  // .Compensation.modules ocompensationmngr = 4;
  if (this->has_ocompensationmngr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ocompensationmngr_, output);
  }

  // .hqyDeviceConfig.analogmap omapcurrentinnervolt = 5;
  if (this->has_omapcurrentinnervolt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->omapcurrentinnervolt_, output);
  }

  // .hqyDeviceConfig.analogmap omapvoltinnervolt = 6;
  if (this->has_omapvoltinnervolt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->omapvoltinnervolt_, output);
  }

  // @@protoc_insertion_point(serialize_end:hqyDeviceConfig.device)
}

::google::protobuf::uint8* device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hqyDeviceConfig.device)
  // .hqyDeviceConfig.devicechaneldesc ochaneldesc = 1;
  if (this->has_ochaneldesc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ochaneldesc_, false, target);
  }

  // .hqyDeviceConfig.analogmap omapcurrent = 2;
  if (this->has_omapcurrent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->omapcurrent_, false, target);
  }

  // .hqyDeviceConfig.analogmap omapvolt = 3;
  if (this->has_omapvolt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->omapvolt_, false, target);
  }

  // .Compensation.modules ocompensationmngr = 4;
  if (this->has_ocompensationmngr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ocompensationmngr_, false, target);
  }

  // .hqyDeviceConfig.analogmap omapcurrentinnervolt = 5;
  if (this->has_omapcurrentinnervolt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->omapcurrentinnervolt_, false, target);
  }

  // .hqyDeviceConfig.analogmap omapvoltinnervolt = 6;
  if (this->has_omapvoltinnervolt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->omapvoltinnervolt_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hqyDeviceConfig.device)
  return target;
}

size_t device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hqyDeviceConfig.device)
  size_t total_size = 0;

  // .hqyDeviceConfig.devicechaneldesc ochaneldesc = 1;
  if (this->has_ochaneldesc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ochaneldesc_);
  }

  // .hqyDeviceConfig.analogmap omapcurrent = 2;
  if (this->has_omapcurrent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->omapcurrent_);
  }

  // .hqyDeviceConfig.analogmap omapvolt = 3;
  if (this->has_omapvolt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->omapvolt_);
  }

  // .Compensation.modules ocompensationmngr = 4;
  if (this->has_ocompensationmngr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ocompensationmngr_);
  }

  // .hqyDeviceConfig.analogmap omapcurrentinnervolt = 5;
  if (this->has_omapcurrentinnervolt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->omapcurrentinnervolt_);
  }

  // .hqyDeviceConfig.analogmap omapvoltinnervolt = 6;
  if (this->has_omapvoltinnervolt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->omapvoltinnervolt_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hqyDeviceConfig.device)
  GOOGLE_DCHECK_NE(&from, this);
  const device* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hqyDeviceConfig.device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hqyDeviceConfig.device)
    MergeFrom(*source);
  }
}

void device::MergeFrom(const device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hqyDeviceConfig.device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ochaneldesc()) {
    mutable_ochaneldesc()->::hqyDeviceConfig::devicechaneldesc::MergeFrom(from.ochaneldesc());
  }
  if (from.has_omapcurrent()) {
    mutable_omapcurrent()->::hqyDeviceConfig::analogmap::MergeFrom(from.omapcurrent());
  }
  if (from.has_omapvolt()) {
    mutable_omapvolt()->::hqyDeviceConfig::analogmap::MergeFrom(from.omapvolt());
  }
  if (from.has_ocompensationmngr()) {
    mutable_ocompensationmngr()->::Compensation::modules::MergeFrom(from.ocompensationmngr());
  }
  if (from.has_omapcurrentinnervolt()) {
    mutable_omapcurrentinnervolt()->::hqyDeviceConfig::analogmap::MergeFrom(from.omapcurrentinnervolt());
  }
  if (from.has_omapvoltinnervolt()) {
    mutable_omapvoltinnervolt()->::hqyDeviceConfig::analogmap::MergeFrom(from.omapvoltinnervolt());
  }
}

void device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hqyDeviceConfig.device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device::CopyFrom(const device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hqyDeviceConfig.device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device::IsInitialized() const {
  return true;
}

void device::Swap(device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void device::InternalSwap(device* other) {
  std::swap(ochaneldesc_, other->ochaneldesc_);
  std::swap(omapcurrent_, other->omapcurrent_);
  std::swap(omapvolt_, other->omapvolt_);
  std::swap(ocompensationmngr_, other->ocompensationmngr_);
  std::swap(omapcurrentinnervolt_, other->omapcurrentinnervolt_);
  std::swap(omapvoltinnervolt_, other->omapvoltinnervolt_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata device::GetMetadata() const {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// device

// .hqyDeviceConfig.devicechaneldesc ochaneldesc = 1;
bool device::has_ochaneldesc() const {
  return this != internal_default_instance() && ochaneldesc_ != NULL;
}
void device::clear_ochaneldesc() {
  if (GetArenaNoVirtual() == NULL && ochaneldesc_ != NULL) delete ochaneldesc_;
  ochaneldesc_ = NULL;
}
const ::hqyDeviceConfig::devicechaneldesc& device::ochaneldesc() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.device.ochaneldesc)
  return ochaneldesc_ != NULL ? *ochaneldesc_
                         : *::hqyDeviceConfig::devicechaneldesc::internal_default_instance();
}
::hqyDeviceConfig::devicechaneldesc* device::mutable_ochaneldesc() {
  
  if (ochaneldesc_ == NULL) {
    ochaneldesc_ = new ::hqyDeviceConfig::devicechaneldesc;
  }
  // @@protoc_insertion_point(field_mutable:hqyDeviceConfig.device.ochaneldesc)
  return ochaneldesc_;
}
::hqyDeviceConfig::devicechaneldesc* device::release_ochaneldesc() {
  // @@protoc_insertion_point(field_release:hqyDeviceConfig.device.ochaneldesc)
  
  ::hqyDeviceConfig::devicechaneldesc* temp = ochaneldesc_;
  ochaneldesc_ = NULL;
  return temp;
}
void device::set_allocated_ochaneldesc(::hqyDeviceConfig::devicechaneldesc* ochaneldesc) {
  delete ochaneldesc_;
  ochaneldesc_ = ochaneldesc;
  if (ochaneldesc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hqyDeviceConfig.device.ochaneldesc)
}

// .hqyDeviceConfig.analogmap omapcurrent = 2;
bool device::has_omapcurrent() const {
  return this != internal_default_instance() && omapcurrent_ != NULL;
}
void device::clear_omapcurrent() {
  if (GetArenaNoVirtual() == NULL && omapcurrent_ != NULL) delete omapcurrent_;
  omapcurrent_ = NULL;
}
const ::hqyDeviceConfig::analogmap& device::omapcurrent() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.device.omapcurrent)
  return omapcurrent_ != NULL ? *omapcurrent_
                         : *::hqyDeviceConfig::analogmap::internal_default_instance();
}
::hqyDeviceConfig::analogmap* device::mutable_omapcurrent() {
  
  if (omapcurrent_ == NULL) {
    omapcurrent_ = new ::hqyDeviceConfig::analogmap;
  }
  // @@protoc_insertion_point(field_mutable:hqyDeviceConfig.device.omapcurrent)
  return omapcurrent_;
}
::hqyDeviceConfig::analogmap* device::release_omapcurrent() {
  // @@protoc_insertion_point(field_release:hqyDeviceConfig.device.omapcurrent)
  
  ::hqyDeviceConfig::analogmap* temp = omapcurrent_;
  omapcurrent_ = NULL;
  return temp;
}
void device::set_allocated_omapcurrent(::hqyDeviceConfig::analogmap* omapcurrent) {
  delete omapcurrent_;
  omapcurrent_ = omapcurrent;
  if (omapcurrent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hqyDeviceConfig.device.omapcurrent)
}

// .hqyDeviceConfig.analogmap omapvolt = 3;
bool device::has_omapvolt() const {
  return this != internal_default_instance() && omapvolt_ != NULL;
}
void device::clear_omapvolt() {
  if (GetArenaNoVirtual() == NULL && omapvolt_ != NULL) delete omapvolt_;
  omapvolt_ = NULL;
}
const ::hqyDeviceConfig::analogmap& device::omapvolt() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.device.omapvolt)
  return omapvolt_ != NULL ? *omapvolt_
                         : *::hqyDeviceConfig::analogmap::internal_default_instance();
}
::hqyDeviceConfig::analogmap* device::mutable_omapvolt() {
  
  if (omapvolt_ == NULL) {
    omapvolt_ = new ::hqyDeviceConfig::analogmap;
  }
  // @@protoc_insertion_point(field_mutable:hqyDeviceConfig.device.omapvolt)
  return omapvolt_;
}
::hqyDeviceConfig::analogmap* device::release_omapvolt() {
  // @@protoc_insertion_point(field_release:hqyDeviceConfig.device.omapvolt)
  
  ::hqyDeviceConfig::analogmap* temp = omapvolt_;
  omapvolt_ = NULL;
  return temp;
}
void device::set_allocated_omapvolt(::hqyDeviceConfig::analogmap* omapvolt) {
  delete omapvolt_;
  omapvolt_ = omapvolt;
  if (omapvolt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hqyDeviceConfig.device.omapvolt)
}

// .Compensation.modules ocompensationmngr = 4;
bool device::has_ocompensationmngr() const {
  return this != internal_default_instance() && ocompensationmngr_ != NULL;
}
void device::clear_ocompensationmngr() {
  if (GetArenaNoVirtual() == NULL && ocompensationmngr_ != NULL) delete ocompensationmngr_;
  ocompensationmngr_ = NULL;
}
const ::Compensation::modules& device::ocompensationmngr() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.device.ocompensationmngr)
  return ocompensationmngr_ != NULL ? *ocompensationmngr_
                         : *::Compensation::modules::internal_default_instance();
}
::Compensation::modules* device::mutable_ocompensationmngr() {
  
  if (ocompensationmngr_ == NULL) {
    ocompensationmngr_ = new ::Compensation::modules;
  }
  // @@protoc_insertion_point(field_mutable:hqyDeviceConfig.device.ocompensationmngr)
  return ocompensationmngr_;
}
::Compensation::modules* device::release_ocompensationmngr() {
  // @@protoc_insertion_point(field_release:hqyDeviceConfig.device.ocompensationmngr)
  
  ::Compensation::modules* temp = ocompensationmngr_;
  ocompensationmngr_ = NULL;
  return temp;
}
void device::set_allocated_ocompensationmngr(::Compensation::modules* ocompensationmngr) {
  delete ocompensationmngr_;
  ocompensationmngr_ = ocompensationmngr;
  if (ocompensationmngr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hqyDeviceConfig.device.ocompensationmngr)
}

// .hqyDeviceConfig.analogmap omapcurrentinnervolt = 5;
bool device::has_omapcurrentinnervolt() const {
  return this != internal_default_instance() && omapcurrentinnervolt_ != NULL;
}
void device::clear_omapcurrentinnervolt() {
  if (GetArenaNoVirtual() == NULL && omapcurrentinnervolt_ != NULL) delete omapcurrentinnervolt_;
  omapcurrentinnervolt_ = NULL;
}
const ::hqyDeviceConfig::analogmap& device::omapcurrentinnervolt() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.device.omapcurrentinnervolt)
  return omapcurrentinnervolt_ != NULL ? *omapcurrentinnervolt_
                         : *::hqyDeviceConfig::analogmap::internal_default_instance();
}
::hqyDeviceConfig::analogmap* device::mutable_omapcurrentinnervolt() {
  
  if (omapcurrentinnervolt_ == NULL) {
    omapcurrentinnervolt_ = new ::hqyDeviceConfig::analogmap;
  }
  // @@protoc_insertion_point(field_mutable:hqyDeviceConfig.device.omapcurrentinnervolt)
  return omapcurrentinnervolt_;
}
::hqyDeviceConfig::analogmap* device::release_omapcurrentinnervolt() {
  // @@protoc_insertion_point(field_release:hqyDeviceConfig.device.omapcurrentinnervolt)
  
  ::hqyDeviceConfig::analogmap* temp = omapcurrentinnervolt_;
  omapcurrentinnervolt_ = NULL;
  return temp;
}
void device::set_allocated_omapcurrentinnervolt(::hqyDeviceConfig::analogmap* omapcurrentinnervolt) {
  delete omapcurrentinnervolt_;
  omapcurrentinnervolt_ = omapcurrentinnervolt;
  if (omapcurrentinnervolt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hqyDeviceConfig.device.omapcurrentinnervolt)
}

// .hqyDeviceConfig.analogmap omapvoltinnervolt = 6;
bool device::has_omapvoltinnervolt() const {
  return this != internal_default_instance() && omapvoltinnervolt_ != NULL;
}
void device::clear_omapvoltinnervolt() {
  if (GetArenaNoVirtual() == NULL && omapvoltinnervolt_ != NULL) delete omapvoltinnervolt_;
  omapvoltinnervolt_ = NULL;
}
const ::hqyDeviceConfig::analogmap& device::omapvoltinnervolt() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.device.omapvoltinnervolt)
  return omapvoltinnervolt_ != NULL ? *omapvoltinnervolt_
                         : *::hqyDeviceConfig::analogmap::internal_default_instance();
}
::hqyDeviceConfig::analogmap* device::mutable_omapvoltinnervolt() {
  
  if (omapvoltinnervolt_ == NULL) {
    omapvoltinnervolt_ = new ::hqyDeviceConfig::analogmap;
  }
  // @@protoc_insertion_point(field_mutable:hqyDeviceConfig.device.omapvoltinnervolt)
  return omapvoltinnervolt_;
}
::hqyDeviceConfig::analogmap* device::release_omapvoltinnervolt() {
  // @@protoc_insertion_point(field_release:hqyDeviceConfig.device.omapvoltinnervolt)
  
  ::hqyDeviceConfig::analogmap* temp = omapvoltinnervolt_;
  omapvoltinnervolt_ = NULL;
  return temp;
}
void device::set_allocated_omapvoltinnervolt(::hqyDeviceConfig::analogmap* omapvoltinnervolt) {
  delete omapvoltinnervolt_;
  omapvoltinnervolt_ = omapvoltinnervolt;
  if (omapvoltinnervolt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hqyDeviceConfig.device.omapvoltinnervolt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int devicechaneldesc::kSmvmaxgroupnumFieldNumber;
const int devicechaneldesc::kGoosepubmaxgroupnumFieldNumber;
const int devicechaneldesc::kGooseinmaxgroupnumFieldNumber;
const int devicechaneldesc::kAnalogvoltmaxchanelFieldNumber;
const int devicechaneldesc::kAnalogcurrentmaxchanelFieldNumber;
const int devicechaneldesc::kFfremaxFieldNumber;
const int devicechaneldesc::kFanalogVoltmaxFieldNumber;
const int devicechaneldesc::kFanalogcurrentmaxFieldNumber;
const int devicechaneldesc::kIshasudcFieldNumber;
const int devicechaneldesc::kFudcmaxFieldNumber;
const int devicechaneldesc::kIshasidcFieldNumber;
const int devicechaneldesc::kFidcmaxFieldNumber;
const int devicechaneldesc::kNbimaxnumFieldNumber;
const int devicechaneldesc::kNbomaxnumFieldNumber;
const int devicechaneldesc::kIshasDigitaloutFieldNumber;
const int devicechaneldesc::kIshasvoltanalogoutFieldNumber;
const int devicechaneldesc::kIshascuranalogoutFieldNumber;
const int devicechaneldesc::kNDigitalmodulenumFieldNumber;
const int devicechaneldesc::kNDigitalmodulePortNumFieldNumber;
const int devicechaneldesc::kNAnalogVoltModuleCountFieldNumber;
const int devicechaneldesc::kNAnalogVoltModuleBeginNumFieldNumber;
const int devicechaneldesc::kNAnalogVoltModuleChanleCountFieldNumber;
const int devicechaneldesc::kNAnalogCurrentModuleCountFieldNumber;
const int devicechaneldesc::kNAnalogCurrentModuleBeginNumFieldNumber;
const int devicechaneldesc::kNAnalogCurrentModuleChanleCountFieldNumber;
const int devicechaneldesc::kNDeviceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

devicechaneldesc::devicechaneldesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hqyDeviceConfig.devicechaneldesc)
}
devicechaneldesc::devicechaneldesc(const devicechaneldesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nanalogvoltmodulechanlecount_(from.nanalogvoltmodulechanlecount_),
      nanalogcurrentmodulechanlecount_(from.nanalogcurrentmodulechanlecount_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&smvmaxgroupnum_, &from.smvmaxgroupnum_,
    reinterpret_cast<char*>(&ndevicenumber_) -
    reinterpret_cast<char*>(&smvmaxgroupnum_) + sizeof(ndevicenumber_));
  // @@protoc_insertion_point(copy_constructor:hqyDeviceConfig.devicechaneldesc)
}

void devicechaneldesc::SharedCtor() {
  ::memset(&smvmaxgroupnum_, 0, reinterpret_cast<char*>(&ndevicenumber_) -
    reinterpret_cast<char*>(&smvmaxgroupnum_) + sizeof(ndevicenumber_));
  _cached_size_ = 0;
}

devicechaneldesc::~devicechaneldesc() {
  // @@protoc_insertion_point(destructor:hqyDeviceConfig.devicechaneldesc)
  SharedDtor();
}

void devicechaneldesc::SharedDtor() {
}

void devicechaneldesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devicechaneldesc::descriptor() {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[1].descriptor;
}

const devicechaneldesc& devicechaneldesc::default_instance() {
  protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

devicechaneldesc* devicechaneldesc::New(::google::protobuf::Arena* arena) const {
  devicechaneldesc* n = new devicechaneldesc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void devicechaneldesc::Clear() {
// @@protoc_insertion_point(message_clear_start:hqyDeviceConfig.devicechaneldesc)
  nanalogvoltmodulechanlecount_.Clear();
  nanalogcurrentmodulechanlecount_.Clear();
  ::memset(&smvmaxgroupnum_, 0, reinterpret_cast<char*>(&ndevicenumber_) -
    reinterpret_cast<char*>(&smvmaxgroupnum_) + sizeof(ndevicenumber_));
}

bool devicechaneldesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hqyDeviceConfig.devicechaneldesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 smvmaxgroupnum = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smvmaxgroupnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 goosepubmaxgroupnum = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goosepubmaxgroupnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gooseinmaxgroupnum = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gooseinmaxgroupnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 analogvoltmaxchanel = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analogvoltmaxchanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 analogcurrentmaxchanel = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analogcurrentmaxchanel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ffremax = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ffremax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fanalogVoltmax = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fanalogvoltmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fanalogcurrentmax = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fanalogcurrentmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ishasudc = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishasudc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fudcmax = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fudcmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ishasidc = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishasidc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fidcmax = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fidcmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nbimaxnum = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbimaxnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nbomaxnum = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nbomaxnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ishasDigitalout = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishasdigitalout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ishasvoltanalogout = 16;
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishasvoltanalogout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ishascuranalogout = 17;
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishascuranalogout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nDigitalmodulenum = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndigitalmodulenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nDigitalmodulePortNum = 19;
      case 19: {
        if (tag == 152u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndigitalmoduleportnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nAnalogVoltModuleCount = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nanalogvoltmodulecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nAnalogVoltModuleBeginNum = 21;
      case 21: {
        if (tag == 168u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nanalogvoltmodulebeginnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 nAnalogVoltModuleChanleCount = 22;
      case 22: {
        if (tag == 178u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nanalogvoltmodulechanlecount())));
        } else if (tag == 176u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 178u, input, this->mutable_nanalogvoltmodulechanlecount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nAnalogCurrentModuleCount = 23;
      case 23: {
        if (tag == 184u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nanalogcurrentmodulecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nAnalogCurrentModuleBeginNum = 24;
      case 24: {
        if (tag == 192u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nanalogcurrentmodulebeginnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 nAnalogCurrentModuleChanleCount = 25;
      case 25: {
        if (tag == 202u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nanalogcurrentmodulechanlecount())));
        } else if (tag == 200u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 202u, input, this->mutable_nanalogcurrentmodulechanlecount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nDeviceNumber = 26;
      case 26: {
        if (tag == 208u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndevicenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hqyDeviceConfig.devicechaneldesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hqyDeviceConfig.devicechaneldesc)
  return false;
#undef DO_
}

void devicechaneldesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hqyDeviceConfig.devicechaneldesc)
  // uint32 smvmaxgroupnum = 1;
  if (this->smvmaxgroupnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->smvmaxgroupnum(), output);
  }

  // uint32 goosepubmaxgroupnum = 2;
  if (this->goosepubmaxgroupnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goosepubmaxgroupnum(), output);
  }

  // uint32 gooseinmaxgroupnum = 3;
  if (this->gooseinmaxgroupnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gooseinmaxgroupnum(), output);
  }

  // uint32 analogvoltmaxchanel = 4;
  if (this->analogvoltmaxchanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->analogvoltmaxchanel(), output);
  }

  // uint32 analogcurrentmaxchanel = 5;
  if (this->analogcurrentmaxchanel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->analogcurrentmaxchanel(), output);
  }

  // float ffremax = 6;
  if (this->ffremax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ffremax(), output);
  }

  // float fanalogVoltmax = 7;
  if (this->fanalogvoltmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fanalogvoltmax(), output);
  }

  // float fanalogcurrentmax = 8;
  if (this->fanalogcurrentmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fanalogcurrentmax(), output);
  }

  // bool ishasudc = 9;
  if (this->ishasudc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ishasudc(), output);
  }

  // float fudcmax = 10;
  if (this->fudcmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fudcmax(), output);
  }

  // bool ishasidc = 11;
  if (this->ishasidc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ishasidc(), output);
  }

  // float fidcmax = 12;
  if (this->fidcmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fidcmax(), output);
  }

  // uint32 nbimaxnum = 13;
  if (this->nbimaxnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nbimaxnum(), output);
  }

  // uint32 nbomaxnum = 14;
  if (this->nbomaxnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nbomaxnum(), output);
  }

  // bool ishasDigitalout = 15;
  if (this->ishasdigitalout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ishasdigitalout(), output);
  }

  // bool ishasvoltanalogout = 16;
  if (this->ishasvoltanalogout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->ishasvoltanalogout(), output);
  }

  // bool ishascuranalogout = 17;
  if (this->ishascuranalogout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->ishascuranalogout(), output);
  }

  // uint32 nDigitalmodulenum = 18;
  if (this->ndigitalmodulenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->ndigitalmodulenum(), output);
  }

  // uint32 nDigitalmodulePortNum = 19;
  if (this->ndigitalmoduleportnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->ndigitalmoduleportnum(), output);
  }

  // uint32 nAnalogVoltModuleCount = 20;
  if (this->nanalogvoltmodulecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->nanalogvoltmodulecount(), output);
  }

  // uint32 nAnalogVoltModuleBeginNum = 21;
  if (this->nanalogvoltmodulebeginnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->nanalogvoltmodulebeginnum(), output);
  }

  // repeated uint32 nAnalogVoltModuleChanleCount = 22;
  if (this->nanalogvoltmodulechanlecount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nanalogvoltmodulechanlecount_cached_byte_size_);
  }
  for (int i = 0; i < this->nanalogvoltmodulechanlecount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->nanalogvoltmodulechanlecount(i), output);
  }

  // uint32 nAnalogCurrentModuleCount = 23;
  if (this->nanalogcurrentmodulecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->nanalogcurrentmodulecount(), output);
  }

  // uint32 nAnalogCurrentModuleBeginNum = 24;
  if (this->nanalogcurrentmodulebeginnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nanalogcurrentmodulebeginnum(), output);
  }

  // repeated uint32 nAnalogCurrentModuleChanleCount = 25;
  if (this->nanalogcurrentmodulechanlecount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nanalogcurrentmodulechanlecount_cached_byte_size_);
  }
  for (int i = 0; i < this->nanalogcurrentmodulechanlecount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->nanalogcurrentmodulechanlecount(i), output);
  }

  // uint32 nDeviceNumber = 26;
  if (this->ndevicenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->ndevicenumber(), output);
  }

  // @@protoc_insertion_point(serialize_end:hqyDeviceConfig.devicechaneldesc)
}

::google::protobuf::uint8* devicechaneldesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hqyDeviceConfig.devicechaneldesc)
  // uint32 smvmaxgroupnum = 1;
  if (this->smvmaxgroupnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->smvmaxgroupnum(), target);
  }

  // uint32 goosepubmaxgroupnum = 2;
  if (this->goosepubmaxgroupnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goosepubmaxgroupnum(), target);
  }

  // uint32 gooseinmaxgroupnum = 3;
  if (this->gooseinmaxgroupnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gooseinmaxgroupnum(), target);
  }

  // uint32 analogvoltmaxchanel = 4;
  if (this->analogvoltmaxchanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->analogvoltmaxchanel(), target);
  }

  // uint32 analogcurrentmaxchanel = 5;
  if (this->analogcurrentmaxchanel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->analogcurrentmaxchanel(), target);
  }

  // float ffremax = 6;
  if (this->ffremax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ffremax(), target);
  }

  // float fanalogVoltmax = 7;
  if (this->fanalogvoltmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fanalogvoltmax(), target);
  }

  // float fanalogcurrentmax = 8;
  if (this->fanalogcurrentmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fanalogcurrentmax(), target);
  }

  // bool ishasudc = 9;
  if (this->ishasudc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ishasudc(), target);
  }

  // float fudcmax = 10;
  if (this->fudcmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fudcmax(), target);
  }

  // bool ishasidc = 11;
  if (this->ishasidc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ishasidc(), target);
  }

  // float fidcmax = 12;
  if (this->fidcmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->fidcmax(), target);
  }

  // uint32 nbimaxnum = 13;
  if (this->nbimaxnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nbimaxnum(), target);
  }

  // uint32 nbomaxnum = 14;
  if (this->nbomaxnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->nbomaxnum(), target);
  }

  // bool ishasDigitalout = 15;
  if (this->ishasdigitalout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->ishasdigitalout(), target);
  }

  // bool ishasvoltanalogout = 16;
  if (this->ishasvoltanalogout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->ishasvoltanalogout(), target);
  }

  // bool ishascuranalogout = 17;
  if (this->ishascuranalogout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->ishascuranalogout(), target);
  }

  // uint32 nDigitalmodulenum = 18;
  if (this->ndigitalmodulenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->ndigitalmodulenum(), target);
  }

  // uint32 nDigitalmodulePortNum = 19;
  if (this->ndigitalmoduleportnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->ndigitalmoduleportnum(), target);
  }

  // uint32 nAnalogVoltModuleCount = 20;
  if (this->nanalogvoltmodulecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->nanalogvoltmodulecount(), target);
  }

  // uint32 nAnalogVoltModuleBeginNum = 21;
  if (this->nanalogvoltmodulebeginnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->nanalogvoltmodulebeginnum(), target);
  }

  // repeated uint32 nAnalogVoltModuleChanleCount = 22;
  if (this->nanalogvoltmodulechanlecount_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nanalogvoltmodulechanlecount_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nanalogvoltmodulechanlecount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->nanalogvoltmodulechanlecount(i), target);
  }

  // uint32 nAnalogCurrentModuleCount = 23;
  if (this->nanalogcurrentmodulecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->nanalogcurrentmodulecount(), target);
  }

  // uint32 nAnalogCurrentModuleBeginNum = 24;
  if (this->nanalogcurrentmodulebeginnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->nanalogcurrentmodulebeginnum(), target);
  }

  // repeated uint32 nAnalogCurrentModuleChanleCount = 25;
  if (this->nanalogcurrentmodulechanlecount_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      25,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nanalogcurrentmodulechanlecount_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nanalogcurrentmodulechanlecount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->nanalogcurrentmodulechanlecount(i), target);
  }

  // uint32 nDeviceNumber = 26;
  if (this->ndevicenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->ndevicenumber(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hqyDeviceConfig.devicechaneldesc)
  return target;
}

size_t devicechaneldesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hqyDeviceConfig.devicechaneldesc)
  size_t total_size = 0;

  // repeated uint32 nAnalogVoltModuleChanleCount = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nanalogvoltmodulechanlecount_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nanalogvoltmodulechanlecount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 nAnalogCurrentModuleChanleCount = 25;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nanalogcurrentmodulechanlecount_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nanalogcurrentmodulechanlecount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 smvmaxgroupnum = 1;
  if (this->smvmaxgroupnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->smvmaxgroupnum());
  }

  // uint32 goosepubmaxgroupnum = 2;
  if (this->goosepubmaxgroupnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goosepubmaxgroupnum());
  }

  // uint32 gooseinmaxgroupnum = 3;
  if (this->gooseinmaxgroupnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gooseinmaxgroupnum());
  }

  // uint32 analogvoltmaxchanel = 4;
  if (this->analogvoltmaxchanel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->analogvoltmaxchanel());
  }

  // uint32 analogcurrentmaxchanel = 5;
  if (this->analogcurrentmaxchanel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->analogcurrentmaxchanel());
  }

  // float ffremax = 6;
  if (this->ffremax() != 0) {
    total_size += 1 + 4;
  }

  // float fanalogVoltmax = 7;
  if (this->fanalogvoltmax() != 0) {
    total_size += 1 + 4;
  }

  // float fanalogcurrentmax = 8;
  if (this->fanalogcurrentmax() != 0) {
    total_size += 1 + 4;
  }

  // float fudcmax = 10;
  if (this->fudcmax() != 0) {
    total_size += 1 + 4;
  }

  // float fidcmax = 12;
  if (this->fidcmax() != 0) {
    total_size += 1 + 4;
  }

  // bool ishasudc = 9;
  if (this->ishasudc() != 0) {
    total_size += 1 + 1;
  }

  // bool ishasidc = 11;
  if (this->ishasidc() != 0) {
    total_size += 1 + 1;
  }

  // bool ishasDigitalout = 15;
  if (this->ishasdigitalout() != 0) {
    total_size += 1 + 1;
  }

  // bool ishasvoltanalogout = 16;
  if (this->ishasvoltanalogout() != 0) {
    total_size += 2 + 1;
  }

  // uint32 nbimaxnum = 13;
  if (this->nbimaxnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nbimaxnum());
  }

  // uint32 nbomaxnum = 14;
  if (this->nbomaxnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nbomaxnum());
  }

  // bool ishascuranalogout = 17;
  if (this->ishascuranalogout() != 0) {
    total_size += 2 + 1;
  }

  // uint32 nDigitalmodulenum = 18;
  if (this->ndigitalmodulenum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndigitalmodulenum());
  }

  // uint32 nDigitalmodulePortNum = 19;
  if (this->ndigitalmoduleportnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndigitalmoduleportnum());
  }

  // uint32 nAnalogVoltModuleCount = 20;
  if (this->nanalogvoltmodulecount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nanalogvoltmodulecount());
  }

  // uint32 nAnalogVoltModuleBeginNum = 21;
  if (this->nanalogvoltmodulebeginnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nanalogvoltmodulebeginnum());
  }

  // uint32 nAnalogCurrentModuleCount = 23;
  if (this->nanalogcurrentmodulecount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nanalogcurrentmodulecount());
  }

  // uint32 nAnalogCurrentModuleBeginNum = 24;
  if (this->nanalogcurrentmodulebeginnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nanalogcurrentmodulebeginnum());
  }

  // uint32 nDeviceNumber = 26;
  if (this->ndevicenumber() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndevicenumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devicechaneldesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hqyDeviceConfig.devicechaneldesc)
  GOOGLE_DCHECK_NE(&from, this);
  const devicechaneldesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const devicechaneldesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hqyDeviceConfig.devicechaneldesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hqyDeviceConfig.devicechaneldesc)
    MergeFrom(*source);
  }
}

void devicechaneldesc::MergeFrom(const devicechaneldesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hqyDeviceConfig.devicechaneldesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nanalogvoltmodulechanlecount_.MergeFrom(from.nanalogvoltmodulechanlecount_);
  nanalogcurrentmodulechanlecount_.MergeFrom(from.nanalogcurrentmodulechanlecount_);
  if (from.smvmaxgroupnum() != 0) {
    set_smvmaxgroupnum(from.smvmaxgroupnum());
  }
  if (from.goosepubmaxgroupnum() != 0) {
    set_goosepubmaxgroupnum(from.goosepubmaxgroupnum());
  }
  if (from.gooseinmaxgroupnum() != 0) {
    set_gooseinmaxgroupnum(from.gooseinmaxgroupnum());
  }
  if (from.analogvoltmaxchanel() != 0) {
    set_analogvoltmaxchanel(from.analogvoltmaxchanel());
  }
  if (from.analogcurrentmaxchanel() != 0) {
    set_analogcurrentmaxchanel(from.analogcurrentmaxchanel());
  }
  if (from.ffremax() != 0) {
    set_ffremax(from.ffremax());
  }
  if (from.fanalogvoltmax() != 0) {
    set_fanalogvoltmax(from.fanalogvoltmax());
  }
  if (from.fanalogcurrentmax() != 0) {
    set_fanalogcurrentmax(from.fanalogcurrentmax());
  }
  if (from.fudcmax() != 0) {
    set_fudcmax(from.fudcmax());
  }
  if (from.fidcmax() != 0) {
    set_fidcmax(from.fidcmax());
  }
  if (from.ishasudc() != 0) {
    set_ishasudc(from.ishasudc());
  }
  if (from.ishasidc() != 0) {
    set_ishasidc(from.ishasidc());
  }
  if (from.ishasdigitalout() != 0) {
    set_ishasdigitalout(from.ishasdigitalout());
  }
  if (from.ishasvoltanalogout() != 0) {
    set_ishasvoltanalogout(from.ishasvoltanalogout());
  }
  if (from.nbimaxnum() != 0) {
    set_nbimaxnum(from.nbimaxnum());
  }
  if (from.nbomaxnum() != 0) {
    set_nbomaxnum(from.nbomaxnum());
  }
  if (from.ishascuranalogout() != 0) {
    set_ishascuranalogout(from.ishascuranalogout());
  }
  if (from.ndigitalmodulenum() != 0) {
    set_ndigitalmodulenum(from.ndigitalmodulenum());
  }
  if (from.ndigitalmoduleportnum() != 0) {
    set_ndigitalmoduleportnum(from.ndigitalmoduleportnum());
  }
  if (from.nanalogvoltmodulecount() != 0) {
    set_nanalogvoltmodulecount(from.nanalogvoltmodulecount());
  }
  if (from.nanalogvoltmodulebeginnum() != 0) {
    set_nanalogvoltmodulebeginnum(from.nanalogvoltmodulebeginnum());
  }
  if (from.nanalogcurrentmodulecount() != 0) {
    set_nanalogcurrentmodulecount(from.nanalogcurrentmodulecount());
  }
  if (from.nanalogcurrentmodulebeginnum() != 0) {
    set_nanalogcurrentmodulebeginnum(from.nanalogcurrentmodulebeginnum());
  }
  if (from.ndevicenumber() != 0) {
    set_ndevicenumber(from.ndevicenumber());
  }
}

void devicechaneldesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hqyDeviceConfig.devicechaneldesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devicechaneldesc::CopyFrom(const devicechaneldesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hqyDeviceConfig.devicechaneldesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devicechaneldesc::IsInitialized() const {
  return true;
}

void devicechaneldesc::Swap(devicechaneldesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void devicechaneldesc::InternalSwap(devicechaneldesc* other) {
  nanalogvoltmodulechanlecount_.UnsafeArenaSwap(&other->nanalogvoltmodulechanlecount_);
  nanalogcurrentmodulechanlecount_.UnsafeArenaSwap(&other->nanalogcurrentmodulechanlecount_);
  std::swap(smvmaxgroupnum_, other->smvmaxgroupnum_);
  std::swap(goosepubmaxgroupnum_, other->goosepubmaxgroupnum_);
  std::swap(gooseinmaxgroupnum_, other->gooseinmaxgroupnum_);
  std::swap(analogvoltmaxchanel_, other->analogvoltmaxchanel_);
  std::swap(analogcurrentmaxchanel_, other->analogcurrentmaxchanel_);
  std::swap(ffremax_, other->ffremax_);
  std::swap(fanalogvoltmax_, other->fanalogvoltmax_);
  std::swap(fanalogcurrentmax_, other->fanalogcurrentmax_);
  std::swap(fudcmax_, other->fudcmax_);
  std::swap(fidcmax_, other->fidcmax_);
  std::swap(ishasudc_, other->ishasudc_);
  std::swap(ishasidc_, other->ishasidc_);
  std::swap(ishasdigitalout_, other->ishasdigitalout_);
  std::swap(ishasvoltanalogout_, other->ishasvoltanalogout_);
  std::swap(nbimaxnum_, other->nbimaxnum_);
  std::swap(nbomaxnum_, other->nbomaxnum_);
  std::swap(ishascuranalogout_, other->ishascuranalogout_);
  std::swap(ndigitalmodulenum_, other->ndigitalmodulenum_);
  std::swap(ndigitalmoduleportnum_, other->ndigitalmoduleportnum_);
  std::swap(nanalogvoltmodulecount_, other->nanalogvoltmodulecount_);
  std::swap(nanalogvoltmodulebeginnum_, other->nanalogvoltmodulebeginnum_);
  std::swap(nanalogcurrentmodulecount_, other->nanalogcurrentmodulecount_);
  std::swap(nanalogcurrentmodulebeginnum_, other->nanalogcurrentmodulebeginnum_);
  std::swap(ndevicenumber_, other->ndevicenumber_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata devicechaneldesc::GetMetadata() const {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// devicechaneldesc

// uint32 smvmaxgroupnum = 1;
void devicechaneldesc::clear_smvmaxgroupnum() {
  smvmaxgroupnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::smvmaxgroupnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.smvmaxgroupnum)
  return smvmaxgroupnum_;
}
void devicechaneldesc::set_smvmaxgroupnum(::google::protobuf::uint32 value) {
  
  smvmaxgroupnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.smvmaxgroupnum)
}

// uint32 goosepubmaxgroupnum = 2;
void devicechaneldesc::clear_goosepubmaxgroupnum() {
  goosepubmaxgroupnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::goosepubmaxgroupnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.goosepubmaxgroupnum)
  return goosepubmaxgroupnum_;
}
void devicechaneldesc::set_goosepubmaxgroupnum(::google::protobuf::uint32 value) {
  
  goosepubmaxgroupnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.goosepubmaxgroupnum)
}

// uint32 gooseinmaxgroupnum = 3;
void devicechaneldesc::clear_gooseinmaxgroupnum() {
  gooseinmaxgroupnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::gooseinmaxgroupnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.gooseinmaxgroupnum)
  return gooseinmaxgroupnum_;
}
void devicechaneldesc::set_gooseinmaxgroupnum(::google::protobuf::uint32 value) {
  
  gooseinmaxgroupnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.gooseinmaxgroupnum)
}

// uint32 analogvoltmaxchanel = 4;
void devicechaneldesc::clear_analogvoltmaxchanel() {
  analogvoltmaxchanel_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::analogvoltmaxchanel() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.analogvoltmaxchanel)
  return analogvoltmaxchanel_;
}
void devicechaneldesc::set_analogvoltmaxchanel(::google::protobuf::uint32 value) {
  
  analogvoltmaxchanel_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.analogvoltmaxchanel)
}

// uint32 analogcurrentmaxchanel = 5;
void devicechaneldesc::clear_analogcurrentmaxchanel() {
  analogcurrentmaxchanel_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::analogcurrentmaxchanel() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.analogcurrentmaxchanel)
  return analogcurrentmaxchanel_;
}
void devicechaneldesc::set_analogcurrentmaxchanel(::google::protobuf::uint32 value) {
  
  analogcurrentmaxchanel_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.analogcurrentmaxchanel)
}

// float ffremax = 6;
void devicechaneldesc::clear_ffremax() {
  ffremax_ = 0;
}
float devicechaneldesc::ffremax() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.ffremax)
  return ffremax_;
}
void devicechaneldesc::set_ffremax(float value) {
  
  ffremax_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.ffremax)
}

// float fanalogVoltmax = 7;
void devicechaneldesc::clear_fanalogvoltmax() {
  fanalogvoltmax_ = 0;
}
float devicechaneldesc::fanalogvoltmax() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.fanalogVoltmax)
  return fanalogvoltmax_;
}
void devicechaneldesc::set_fanalogvoltmax(float value) {
  
  fanalogvoltmax_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.fanalogVoltmax)
}

// float fanalogcurrentmax = 8;
void devicechaneldesc::clear_fanalogcurrentmax() {
  fanalogcurrentmax_ = 0;
}
float devicechaneldesc::fanalogcurrentmax() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.fanalogcurrentmax)
  return fanalogcurrentmax_;
}
void devicechaneldesc::set_fanalogcurrentmax(float value) {
  
  fanalogcurrentmax_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.fanalogcurrentmax)
}

// bool ishasudc = 9;
void devicechaneldesc::clear_ishasudc() {
  ishasudc_ = false;
}
bool devicechaneldesc::ishasudc() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.ishasudc)
  return ishasudc_;
}
void devicechaneldesc::set_ishasudc(bool value) {
  
  ishasudc_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.ishasudc)
}

// float fudcmax = 10;
void devicechaneldesc::clear_fudcmax() {
  fudcmax_ = 0;
}
float devicechaneldesc::fudcmax() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.fudcmax)
  return fudcmax_;
}
void devicechaneldesc::set_fudcmax(float value) {
  
  fudcmax_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.fudcmax)
}

// bool ishasidc = 11;
void devicechaneldesc::clear_ishasidc() {
  ishasidc_ = false;
}
bool devicechaneldesc::ishasidc() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.ishasidc)
  return ishasidc_;
}
void devicechaneldesc::set_ishasidc(bool value) {
  
  ishasidc_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.ishasidc)
}

// float fidcmax = 12;
void devicechaneldesc::clear_fidcmax() {
  fidcmax_ = 0;
}
float devicechaneldesc::fidcmax() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.fidcmax)
  return fidcmax_;
}
void devicechaneldesc::set_fidcmax(float value) {
  
  fidcmax_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.fidcmax)
}

// uint32 nbimaxnum = 13;
void devicechaneldesc::clear_nbimaxnum() {
  nbimaxnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::nbimaxnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nbimaxnum)
  return nbimaxnum_;
}
void devicechaneldesc::set_nbimaxnum(::google::protobuf::uint32 value) {
  
  nbimaxnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nbimaxnum)
}

// uint32 nbomaxnum = 14;
void devicechaneldesc::clear_nbomaxnum() {
  nbomaxnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::nbomaxnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nbomaxnum)
  return nbomaxnum_;
}
void devicechaneldesc::set_nbomaxnum(::google::protobuf::uint32 value) {
  
  nbomaxnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nbomaxnum)
}

// bool ishasDigitalout = 15;
void devicechaneldesc::clear_ishasdigitalout() {
  ishasdigitalout_ = false;
}
bool devicechaneldesc::ishasdigitalout() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.ishasDigitalout)
  return ishasdigitalout_;
}
void devicechaneldesc::set_ishasdigitalout(bool value) {
  
  ishasdigitalout_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.ishasDigitalout)
}

// bool ishasvoltanalogout = 16;
void devicechaneldesc::clear_ishasvoltanalogout() {
  ishasvoltanalogout_ = false;
}
bool devicechaneldesc::ishasvoltanalogout() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.ishasvoltanalogout)
  return ishasvoltanalogout_;
}
void devicechaneldesc::set_ishasvoltanalogout(bool value) {
  
  ishasvoltanalogout_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.ishasvoltanalogout)
}

// bool ishascuranalogout = 17;
void devicechaneldesc::clear_ishascuranalogout() {
  ishascuranalogout_ = false;
}
bool devicechaneldesc::ishascuranalogout() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.ishascuranalogout)
  return ishascuranalogout_;
}
void devicechaneldesc::set_ishascuranalogout(bool value) {
  
  ishascuranalogout_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.ishascuranalogout)
}

// uint32 nDigitalmodulenum = 18;
void devicechaneldesc::clear_ndigitalmodulenum() {
  ndigitalmodulenum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::ndigitalmodulenum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nDigitalmodulenum)
  return ndigitalmodulenum_;
}
void devicechaneldesc::set_ndigitalmodulenum(::google::protobuf::uint32 value) {
  
  ndigitalmodulenum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nDigitalmodulenum)
}

// uint32 nDigitalmodulePortNum = 19;
void devicechaneldesc::clear_ndigitalmoduleportnum() {
  ndigitalmoduleportnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::ndigitalmoduleportnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nDigitalmodulePortNum)
  return ndigitalmoduleportnum_;
}
void devicechaneldesc::set_ndigitalmoduleportnum(::google::protobuf::uint32 value) {
  
  ndigitalmoduleportnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nDigitalmodulePortNum)
}

// uint32 nAnalogVoltModuleCount = 20;
void devicechaneldesc::clear_nanalogvoltmodulecount() {
  nanalogvoltmodulecount_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::nanalogvoltmodulecount() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleCount)
  return nanalogvoltmodulecount_;
}
void devicechaneldesc::set_nanalogvoltmodulecount(::google::protobuf::uint32 value) {
  
  nanalogvoltmodulecount_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleCount)
}

// uint32 nAnalogVoltModuleBeginNum = 21;
void devicechaneldesc::clear_nanalogvoltmodulebeginnum() {
  nanalogvoltmodulebeginnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::nanalogvoltmodulebeginnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleBeginNum)
  return nanalogvoltmodulebeginnum_;
}
void devicechaneldesc::set_nanalogvoltmodulebeginnum(::google::protobuf::uint32 value) {
  
  nanalogvoltmodulebeginnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleBeginNum)
}

// repeated uint32 nAnalogVoltModuleChanleCount = 22;
int devicechaneldesc::nanalogvoltmodulechanlecount_size() const {
  return nanalogvoltmodulechanlecount_.size();
}
void devicechaneldesc::clear_nanalogvoltmodulechanlecount() {
  nanalogvoltmodulechanlecount_.Clear();
}
::google::protobuf::uint32 devicechaneldesc::nanalogvoltmodulechanlecount(int index) const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleChanleCount)
  return nanalogvoltmodulechanlecount_.Get(index);
}
void devicechaneldesc::set_nanalogvoltmodulechanlecount(int index, ::google::protobuf::uint32 value) {
  nanalogvoltmodulechanlecount_.Set(index, value);
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleChanleCount)
}
void devicechaneldesc::add_nanalogvoltmodulechanlecount(::google::protobuf::uint32 value) {
  nanalogvoltmodulechanlecount_.Add(value);
  // @@protoc_insertion_point(field_add:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleChanleCount)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
devicechaneldesc::nanalogvoltmodulechanlecount() const {
  // @@protoc_insertion_point(field_list:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleChanleCount)
  return nanalogvoltmodulechanlecount_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
devicechaneldesc::mutable_nanalogvoltmodulechanlecount() {
  // @@protoc_insertion_point(field_mutable_list:hqyDeviceConfig.devicechaneldesc.nAnalogVoltModuleChanleCount)
  return &nanalogvoltmodulechanlecount_;
}

// uint32 nAnalogCurrentModuleCount = 23;
void devicechaneldesc::clear_nanalogcurrentmodulecount() {
  nanalogcurrentmodulecount_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::nanalogcurrentmodulecount() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleCount)
  return nanalogcurrentmodulecount_;
}
void devicechaneldesc::set_nanalogcurrentmodulecount(::google::protobuf::uint32 value) {
  
  nanalogcurrentmodulecount_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleCount)
}

// uint32 nAnalogCurrentModuleBeginNum = 24;
void devicechaneldesc::clear_nanalogcurrentmodulebeginnum() {
  nanalogcurrentmodulebeginnum_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::nanalogcurrentmodulebeginnum() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleBeginNum)
  return nanalogcurrentmodulebeginnum_;
}
void devicechaneldesc::set_nanalogcurrentmodulebeginnum(::google::protobuf::uint32 value) {
  
  nanalogcurrentmodulebeginnum_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleBeginNum)
}

// repeated uint32 nAnalogCurrentModuleChanleCount = 25;
int devicechaneldesc::nanalogcurrentmodulechanlecount_size() const {
  return nanalogcurrentmodulechanlecount_.size();
}
void devicechaneldesc::clear_nanalogcurrentmodulechanlecount() {
  nanalogcurrentmodulechanlecount_.Clear();
}
::google::protobuf::uint32 devicechaneldesc::nanalogcurrentmodulechanlecount(int index) const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleChanleCount)
  return nanalogcurrentmodulechanlecount_.Get(index);
}
void devicechaneldesc::set_nanalogcurrentmodulechanlecount(int index, ::google::protobuf::uint32 value) {
  nanalogcurrentmodulechanlecount_.Set(index, value);
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleChanleCount)
}
void devicechaneldesc::add_nanalogcurrentmodulechanlecount(::google::protobuf::uint32 value) {
  nanalogcurrentmodulechanlecount_.Add(value);
  // @@protoc_insertion_point(field_add:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleChanleCount)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
devicechaneldesc::nanalogcurrentmodulechanlecount() const {
  // @@protoc_insertion_point(field_list:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleChanleCount)
  return nanalogcurrentmodulechanlecount_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
devicechaneldesc::mutable_nanalogcurrentmodulechanlecount() {
  // @@protoc_insertion_point(field_mutable_list:hqyDeviceConfig.devicechaneldesc.nAnalogCurrentModuleChanleCount)
  return &nanalogcurrentmodulechanlecount_;
}

// uint32 nDeviceNumber = 26;
void devicechaneldesc::clear_ndevicenumber() {
  ndevicenumber_ = 0u;
}
::google::protobuf::uint32 devicechaneldesc::ndevicenumber() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.devicechaneldesc.nDeviceNumber)
  return ndevicenumber_;
}
void devicechaneldesc::set_ndevicenumber(::google::protobuf::uint32 value) {
  
  ndevicenumber_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.devicechaneldesc.nDeviceNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int range::kFminFieldNumber;
const int range::kFmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

range::range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hqyDeviceConfig.range)
}
range::range(const range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fmin_, &from.fmin_,
    reinterpret_cast<char*>(&fmax_) -
    reinterpret_cast<char*>(&fmin_) + sizeof(fmax_));
  // @@protoc_insertion_point(copy_constructor:hqyDeviceConfig.range)
}

void range::SharedCtor() {
  ::memset(&fmin_, 0, reinterpret_cast<char*>(&fmax_) -
    reinterpret_cast<char*>(&fmin_) + sizeof(fmax_));
  _cached_size_ = 0;
}

range::~range() {
  // @@protoc_insertion_point(destructor:hqyDeviceConfig.range)
  SharedDtor();
}

void range::SharedDtor() {
}

void range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* range::descriptor() {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[2].descriptor;
}

const range& range::default_instance() {
  protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

range* range::New(::google::protobuf::Arena* arena) const {
  range* n = new range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void range::Clear() {
// @@protoc_insertion_point(message_clear_start:hqyDeviceConfig.range)
  ::memset(&fmin_, 0, reinterpret_cast<char*>(&fmax_) -
    reinterpret_cast<char*>(&fmin_) + sizeof(fmax_));
}

bool range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hqyDeviceConfig.range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fmin = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fmax = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hqyDeviceConfig.range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hqyDeviceConfig.range)
  return false;
#undef DO_
}

void range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hqyDeviceConfig.range)
  // float fmin = 1;
  if (this->fmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fmin(), output);
  }

  // float fmax = 2;
  if (this->fmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fmax(), output);
  }

  // @@protoc_insertion_point(serialize_end:hqyDeviceConfig.range)
}

::google::protobuf::uint8* range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hqyDeviceConfig.range)
  // float fmin = 1;
  if (this->fmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fmin(), target);
  }

  // float fmax = 2;
  if (this->fmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fmax(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hqyDeviceConfig.range)
  return target;
}

size_t range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hqyDeviceConfig.range)
  size_t total_size = 0;

  // float fmin = 1;
  if (this->fmin() != 0) {
    total_size += 1 + 4;
  }

  // float fmax = 2;
  if (this->fmax() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hqyDeviceConfig.range)
  GOOGLE_DCHECK_NE(&from, this);
  const range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hqyDeviceConfig.range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hqyDeviceConfig.range)
    MergeFrom(*source);
  }
}

void range::MergeFrom(const range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hqyDeviceConfig.range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.fmin() != 0) {
    set_fmin(from.fmin());
  }
  if (from.fmax() != 0) {
    set_fmax(from.fmax());
  }
}

void range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hqyDeviceConfig.range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void range::CopyFrom(const range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hqyDeviceConfig.range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool range::IsInitialized() const {
  return true;
}

void range::Swap(range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void range::InternalSwap(range* other) {
  std::swap(fmin_, other->fmin_);
  std::swap(fmax_, other->fmax_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata range::GetMetadata() const {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// range

// float fmin = 1;
void range::clear_fmin() {
  fmin_ = 0;
}
float range::fmin() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.range.fmin)
  return fmin_;
}
void range::set_fmin(float value) {
  
  fmin_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.range.fmin)
}

// float fmax = 2;
void range::clear_fmax() {
  fmax_ = 0;
}
float range::fmax() const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.range.fmax)
  return fmax_;
}
void range::set_fmax(float value) {
  
  fmax_ = value;
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.range.fmax)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int analogmap::kNdevicechanelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

analogmap::analogmap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hqyDeviceConfig.analogmap)
}
analogmap::analogmap(const analogmap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ndevicechanel_(from.ndevicechanel_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hqyDeviceConfig.analogmap)
}

void analogmap::SharedCtor() {
  _cached_size_ = 0;
}

analogmap::~analogmap() {
  // @@protoc_insertion_point(destructor:hqyDeviceConfig.analogmap)
  SharedDtor();
}

void analogmap::SharedDtor() {
}

void analogmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* analogmap::descriptor() {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[3].descriptor;
}

const analogmap& analogmap::default_instance() {
  protobuf_hqyDeviceConfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

analogmap* analogmap::New(::google::protobuf::Arena* arena) const {
  analogmap* n = new analogmap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void analogmap::Clear() {
// @@protoc_insertion_point(message_clear_start:hqyDeviceConfig.analogmap)
  ndevicechanel_.Clear();
}

bool analogmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hqyDeviceConfig.analogmap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ndevicechanel = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ndevicechanel())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_ndevicechanel())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hqyDeviceConfig.analogmap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hqyDeviceConfig.analogmap)
  return false;
#undef DO_
}

void analogmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hqyDeviceConfig.analogmap)
  // repeated uint32 ndevicechanel = 1;
  if (this->ndevicechanel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ndevicechanel_cached_byte_size_);
  }
  for (int i = 0; i < this->ndevicechanel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ndevicechanel(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hqyDeviceConfig.analogmap)
}

::google::protobuf::uint8* analogmap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hqyDeviceConfig.analogmap)
  // repeated uint32 ndevicechanel = 1;
  if (this->ndevicechanel_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ndevicechanel_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ndevicechanel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ndevicechanel(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hqyDeviceConfig.analogmap)
  return target;
}

size_t analogmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hqyDeviceConfig.analogmap)
  size_t total_size = 0;

  // repeated uint32 ndevicechanel = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ndevicechanel_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ndevicechanel_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void analogmap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hqyDeviceConfig.analogmap)
  GOOGLE_DCHECK_NE(&from, this);
  const analogmap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const analogmap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hqyDeviceConfig.analogmap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hqyDeviceConfig.analogmap)
    MergeFrom(*source);
  }
}

void analogmap::MergeFrom(const analogmap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hqyDeviceConfig.analogmap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ndevicechanel_.MergeFrom(from.ndevicechanel_);
}

void analogmap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hqyDeviceConfig.analogmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void analogmap::CopyFrom(const analogmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hqyDeviceConfig.analogmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool analogmap::IsInitialized() const {
  return true;
}

void analogmap::Swap(analogmap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void analogmap::InternalSwap(analogmap* other) {
  ndevicechanel_.UnsafeArenaSwap(&other->ndevicechanel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata analogmap::GetMetadata() const {
  protobuf_hqyDeviceConfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hqyDeviceConfig_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// analogmap

// repeated uint32 ndevicechanel = 1;
int analogmap::ndevicechanel_size() const {
  return ndevicechanel_.size();
}
void analogmap::clear_ndevicechanel() {
  ndevicechanel_.Clear();
}
::google::protobuf::uint32 analogmap::ndevicechanel(int index) const {
  // @@protoc_insertion_point(field_get:hqyDeviceConfig.analogmap.ndevicechanel)
  return ndevicechanel_.Get(index);
}
void analogmap::set_ndevicechanel(int index, ::google::protobuf::uint32 value) {
  ndevicechanel_.Set(index, value);
  // @@protoc_insertion_point(field_set:hqyDeviceConfig.analogmap.ndevicechanel)
}
void analogmap::add_ndevicechanel(::google::protobuf::uint32 value) {
  ndevicechanel_.Add(value);
  // @@protoc_insertion_point(field_add:hqyDeviceConfig.analogmap.ndevicechanel)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
analogmap::ndevicechanel() const {
  // @@protoc_insertion_point(field_list:hqyDeviceConfig.analogmap.ndevicechanel)
  return ndevicechanel_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
analogmap::mutable_ndevicechanel() {
  // @@protoc_insertion_point(field_mutable_list:hqyDeviceConfig.analogmap.ndevicechanel)
  return &ndevicechanel_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hqyDeviceConfig

// @@protoc_insertion_point(global_scope)
